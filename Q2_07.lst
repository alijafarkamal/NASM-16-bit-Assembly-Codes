     1                                  ; [org 0x0100]
     2                                  ; jmp start
     3                                  ; zero_count: dw 0
     4                                  ; one_count: dw 0
     5                                  ; ; Clear screen routine
     6                                  ; clrscr:
     7                                      ; push es
     8                                      ; push ax
     9                                      ; push di
    10                                  
    11                                      ; mov ax, 0xb800
    12                                      ; mov es, ax             ; Video memory segment
    13                                      ; mov di, 0              ; Start at the top left corner
    14                                  
    15                                  ; nextloc:
    16                                      ; mov word [es:di], 0x0720  ; Clear with space character, grey on black background
    17                                      ; add di, 2               ; Move to next character position
    18                                      ; cmp di, 4000            ; Check if we've reached the end of screen buffer (80x25)
    19                                      ; jne nextloc             ; Continue clearing if not done
    20                                  
    21                                      ; pop di
    22                                      ; pop ax
    23                                      ; pop es
    24                                      ; ret
    25                                  	
    26                                  
    27                                  ; count_bits:
    28                                  	; push bp              
    29                                      ; mov bp, sp
    30                                      ; mov cx, 16     
    31                                      ; mov ax, [bp+4]      
    32                                  	; xor si,si
    33                                  	; xor di,di
    34                                  ; loop1:
    35                                  	; test ax,1
    36                                  	; jz increment
    37                                  	; add si,1
    38                                  	; jmp bit_by_bit
    39                                  ; increment:
    40                                  	; add di,1
    41                                  ; bit_by_bit:
    42                                  	; shr ax,1
    43                                  	; loop loop1
    44                                  	
    45                                  	
    46                                  	; mov ax,[bp+6]
    47                                  	; mov cx,16
    48                                  ; loop2:
    49                                  	; test ax,1
    50                                  	; jz increment1
    51                                  	; add si,1
    52                                  	; jmp bit_by
    53                                  ; increment1:
    54                                  	; add di,1
    55                                  ; bit_by:
    56                                  	; shr ax,1
    57                                  	; loop loop2
    58                                  	; mov [zero_count],si
    59                                  	; mov [one_count],di
    60                                  	
    61                                  	; pop bp
    62                                  	; ret
    63                                  ; draw_rectangle:
    64                                  	; push bp              
    65                                      ; mov bp, sp
    66                                  	; push si;0
    67                                  	; push di;1
    68                                  
    69                                  	; mov dx,di
    70                                  	; mov bx,160
    71                                  	; mul bx
    72                                  	; shl dx,1
    73                                  		
    74                                  	; mov cx,si
    75                                  	; shl cx,1
    76                                  	; push cx
    77                                  	; mov ax,0xB800
    78                                  	; mov es,ax
    79                                  	; mov di,0
    80                                  	
    81                                  	; mov bx,[bp-4]
    82                                  ; label1:
    83                                  	; mov ax,0xB800
    84                                  	; mov es,ax
    85                                  	; mov cx,si
    86                                  ; row:
    87                                  	; mov ax,'#'
    88                                  	; mov ah,0x0F
    89                                  	; mov [es:di],ax
    90                                  	; add di,2
    91                                  	; loop row
    92                                  ; col:
    93                                  	; dec bx
    94                                  	; add di,160
    95                                  	; sub di,[bp-6]
    96                                  	; cmp bx,0
    97                                  	; jne label1
    98                                  	
    99                                  	; pop cx
   100                                  	; pop di
   101                                  	; pop si
   102                                  	; pop bp
   103                                  	; ret 4
   104                                  ; start:
   105                                      ; call clrscr
   106                                  	
   107                                      ; push 23585       
   108                                  	; push 4832
   109                                      ; call count_bits      
   110                                      ; call draw_rectangle  
   111                                  	
   112                                      ; mov ax, 0x4C00
   113                                      ; int 0x21               ; Exit program
   114                                  [org 0x0100]
   115 00000000 E95D01                  jmp start
   116 00000003 0000                    sett dw 0
   117 00000005 72                      move db 'r'        
   118 00000006 0000                    row dw 0            
   119 00000008 0000                    col dw 0            
   120 0000000A 0000                    tick dw 0
   121                                  clrscr:
   122 0000000C 60                          pusha
   123 0000000D B800B8                      mov ax, 0xb800
   124 00000010 8EC0                        mov es, ax
   125 00000012 BF0000                      mov di, 0
   126 00000015 B9D007                      mov cx, 2000
   127                                  myloop:
   128 00000018 26C7052007                  mov word [es:di], 0x0720
   129 0000001D 83C702                      add di, 2
   130 00000020 E2F6                        loop myloop
   131 00000022 61                          popa
   132 00000023 C3                          ret
   133                                  
   134                                  print:
   135 00000024 60                          pusha
   136 00000025 B800B8                      mov ax, 0xb800
   137 00000028 8EC0                        mov es, ax
   138 0000002A B80000                  mov ax,0
   139 0000002D 2E8B1E[0600]                mov bx, [cs:row]
   140 00000032 B050                        mov al, 80
   141 00000034 F7E3                        mul bx                
   142 00000036 2E0306[0800]                add ax, [cs:col]  
   143 0000003B BF0000                  mov di,0
   144 0000003E D1E0                        shl ax, 1          
   145 00000040 89C7                        mov di, ax
   146 00000042 2E803E[0500]72              cmp byte [cs:move], 'r'
   147 00000048 7418                        je clear_right
   148 0000004A 2E803E[0500]64              cmp byte [cs:move], 'd'
   149 00000050 7438                        je clear_down
   150 00000052 2E803E[0500]6C              cmp byte [cs:move], 'l'
   151 00000058 7458                        je clear_left
   152 0000005A 2E803E[0500]75              cmp byte [cs:move], 'u'
   153 00000060 7477                        je clear_up
   154                                  
   155                                  clear_right:
   156 00000062 26C745FE2007                mov word [es:di-2], 0x0720  
   157 00000068 26C7052A07                  mov word [es:di], 0x072A    
   158 0000006D 2EFF06[0800]                inc word [cs:col]              
   159 00000072 2E833E[0800]4F              cmp word [cs:col], 79          
   160 00000078 7403                        je change_dir_right
   161 0000007A E98400                      jmp print_asterisk
   162                                  
   163                                  change_dir_right:
   164 0000007D 2EC606[0500]64              mov byte [cs:move], 'd'         ; Change direction to down
   165 00000083 2EFF06[0600]                inc word [cs:row]               ; Move down
   166 00000088 EB77                        jmp print_asterisk
   167                                  
   168                                  clear_down:
   169 0000008A 26C78560FF2007              mov word [es:di-160], 0x0720 ; Clear previous position
   170 00000091 26C7052A07                  mov word [es:di], 0x072A      ; Print asterisk
   171 00000096 2EFF06[0600]                inc word [cs:row]                ; Move down
   172 0000009B 2E833E[0600]18              cmp word [cs:row], 24            ; Check if end of column (bottom border)
   173 000000A1 7402                        je change_dir_down
   174 000000A3 EB5C                        jmp print_asterisk
   175                                  
   176                                  change_dir_down:
   177 000000A5 2EC606[0500]6C              mov byte [cs:move], 'l'         ; Change direction to left
   178 000000AB 2EFF0E[0800]                dec word [cs:col]               ; Move left
   179 000000B0 EB4F                        jmp print_asterisk
   180                                  
   181                                  clear_left:
   182 000000B2 26C745022007                mov word [es:di+2], 0x0720    ; Clear previous position
   183 000000B8 26C7052A07                  mov word [es:di], 0x072A      ; Print asterisk
   184 000000BD 2EFF0E[0800]                dec word [cs:col]                ; Move left
   185 000000C2 2E833E[0800]00              cmp word [cs:col], 0             ; Check if end of row (left border)
   186 000000C8 7402                        je change_dir_left
   187 000000CA EB35                        jmp print_asterisk
   188                                  
   189                                  change_dir_left:
   190 000000CC 2EC606[0500]75              mov byte [cs:move], 'u'         ; Change direction to up
   191 000000D2 2EFF0E[0600]                dec word [cs:row]               ; Move up
   192 000000D7 EB28                        jmp print_asterisk
   193                                  
   194                                  clear_up:
   195 000000D9 26C785A0002007              mov word [es:di+160], 0x0720  ; Clear previous position
   196 000000E0 26C7052A07                  mov word [es:di], 0x072A      ; Print asterisk
   197 000000E5 2EFF0E[0600]                dec word [cs:row]                ; Move up
   198 000000EA 2E833E[0600]00              cmp word [cs:row], 0             ; Check if end of column (top border)
   199 000000F0 7402                        je change_dir_up
   200 000000F2 EB0D                        jmp print_asterisk
   201                                  
   202                                  change_dir_up:
   203 000000F4 2EC606[0500]72              mov byte [cs:move], 'r'         ; Change direction to right
   204 000000FA 2EFF06[0800]                inc word [cs:col]               ; Move right
   205 000000FF EB00                        jmp print_asterisk
   206                                  
   207                                  print_asterisk:
   208 00000101 61                          popa
   209 00000102 C3                          ret
   210                                  
   211                                  delay:
   212 00000103 51                          push cx
   213 00000104 B9FFFF                      mov cx, 0xffff
   214                                  delay_loop:
   215 00000107 E2FE                        loop delay_loop
   216 00000109 59                          pop cx
   217 0000010A C3                          ret
   218 0000010B 50                      timer:push ax
   219 0000010C 2EFF06[0A00]            inc word[cs:tick]
   220                                  ;
   221 00000111 2E833E[0A00]12          cmp word[cs:tick],18
   222 00000117 7402                    je chkkk
   223 00000119 EB1C                    jmp enddddd
   224                                  chkkk:
   225 0000011B 2E833E[0300]01          cmp word[cs:sett],1
   226 00000121 750D                    jne exi
   227 00000123 E8FEFE                  call print
   228 00000126 E8DAFF                  call delay
   229 00000129 2EC706[0300]0000        mov word[cs:sett],0
   230                                  exi:
   231 00000130 2EC706[0A00]0000        mov word[cs:tick],0
   232                                  enddddd:
   233 00000137 B020                    mov al,0x20
   234 00000139 E620                    out 0x20,al
   235 0000013B 58                      pop ax
   236 0000013C CF                      iret
   237 0000013D 50                      kbsir:push ax
   238 0000013E E460                    in al,0x60
   239 00000140 3C2A                    cmp al,0x2a
   240 00000142 7509                    jne nextcmp
   241 00000144 2EC706[0300]0100        mov word[cs:sett],1
   242 0000014B EB0D                    jmp exit
   243 0000014D 3C36                    nextcmp cmp al,0x36
   244 0000014F 7509                    jne exit
   245 00000151 2EC706[0300]0000        mov word[cs:sett],0
   246 00000158 EB00                    jmp exit
   247                                  exit:
   248 0000015A B020                    mov al,0x20
   249 0000015C E620                    out 0x20,al
   250 0000015E 58                      pop ax
   251 0000015F CF                      iret
   252                                  start:
   253 00000160 E8A9FE                      call clrscr
   254                                  
   255 00000163 31C0                    xor ax,ax
   256 00000165 8EC0                    mov es,ax
   257 00000167 FA                      cli
   258 00000168 26C7062400[3D01]        mov word [es:9*4], kbsir ; store offset at n*4
   259 0000016F 268C0E2600              mov [es:9*4+2], cs
   260 00000174 26C7062000[0B01]        mov word[es:8*4],timer
   261 0000017B 268C0E2200              mov [es:8*4+2],cs
   262 00000180 FB                      sti
   263 00000181 BA[6001]                mov dx ,start
   264 00000184 83C20F                  add dx,15
   265 00000187 B104                    mov cl,4
   266 00000189 D3EA                    shr dx,cl
   267 0000018B B80031                  mov ax,0x3100
   268 0000018E CD21                    int 0x21
   269                                  ;jmp start
   270                                                 ; Number of iterations (adjust as needed)
   271                                  ;
   272                                  ;jmp start
