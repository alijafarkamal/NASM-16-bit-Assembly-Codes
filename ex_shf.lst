     1                                  ; 16bit multiplication
     2                                  [org 0x0100]
     3 00000000 EB0A                    jmp start
     4                                  
     5 00000002 00D00000                multiplicand:		dd 0xD000 ; 16bit multiplicand 32bit space
     6 00000006 00F0                    multiplier:			dw 0xF000 ; 16bit multiplier
     7 00000008 00000000                result:				dd 0 ; 32bit result
     8                                  
     9 0000000C B110                    start:				mov cl, 16 ; initialize bit count to 16
    10 0000000E 8B16[0600]              					mov dx, [multiplier] ; load multiplier in dx
    11                                  
    12 00000012 D1EA                    checkbit:			shr dx, 1 ; move right most bit in carry
    13 00000014 730E                    					jnc skip ; skip addition if bit is zero
    14                                  
    15 00000016 A1[0200]                					mov ax, [multiplicand]
    16 00000019 0106[0800]              					add [result], ax ; add less significant word
    17 0000001D A1[0400]                					mov ax, [multiplicand+2]
    18 00000020 1106[0A00]              					adc [result+2], ax ; add more significant word
    19                                  
    20 00000024 D126[0200]              skip:				shl word [multiplicand], 1
    21 00000028 D116[0400]              					rcl word [multiplicand+2], 1 ; shift multiplicand left
    22 0000002C FEC9                    					dec cl ; decrement bit count
    23 0000002E 75E2                    					jnz checkbit ; repeat if bits left
    24                                  
    25                                  
    26 00000030 B8004C                  mov ax, 0x4c00 ; terminate program
    27 00000033 CD21                    int 0x21
