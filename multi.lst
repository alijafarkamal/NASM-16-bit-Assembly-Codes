     1                                  ; multitasking and dynamic thread registration
     2                                  [org 0x0100]
     3 00000000 E99044                  jmp start
     4                                  ; PCB layout:
     5                                  ; ax,bx,cx,dx,si,di,bp,sp,ip,cs,ds,ss,es,flags,next,dummy
     6                                  ; 0, 2, 4, 6, 8,10,12,14,16,18,20,22,24, 26 , 28 , 30
     7 00000003 0000<rep 200h>          pcb: times 32*16 dw 0 ; space for 32 PCBs
     8 00000403 0000<rep 2000h>         stack: times 32*256 dw 0 ; space for 32 512 byte stacks
     9 00004403 0100                    nextpcb: dw 1 ; index of next free pcb
    10 00004405 0000                    current: dw 0 ; index of current pcb
    11 00004407 0000                    lineno: dw 0 ; line number for next thread
    12                                  
    13                                  
    14                                  ;;;;; COPY LINES 028-071 FROM EXAMPLE 10.1 (printnum) ;;;;;
    15                                  ; subroutine to print a number on screen
    16                                  ; takes the row no, column no, and number to be printed as parameters
    17 00004409 55                      printnum: push bp
    18 0000440A 89E5                    			mov bp, sp
    19 0000440C 06                      			push es
    20 0000440D 50                      			push ax
    21 0000440E 53                      			push bx
    22 0000440F 51                      			push cx
    23 00004410 52                      			push dx
    24 00004411 57                      			push di
    25 00004412 BF5000                  			mov di, 80 ; load di with columns per row
    26 00004415 8B4608                  			mov ax, [bp+8] ; load ax with row number
    27 00004418 F7E7                    			mul di ; multiply with columns per row
    28 0000441A 89C7                    			mov di, ax ; save result in di
    29 0000441C 037E06                  			add di, [bp+6] ; add column number
    30 0000441F D1E7                    			shl di, 1 ; turn into byte count
    31 00004421 83C708                  			add di, 8 ; to end of number location
    32 00004424 B800B8                  			mov ax, 0xb800
    33 00004427 8EC0                    			mov es, ax ; point es to video base
    34 00004429 8B4604                  			mov ax, [bp+4] ; load number in ax
    35 0000442C BB1000                  			mov bx, 16 ; use base 16 for division
    36 0000442F B90400                  			mov cx, 4 ; initialize count of digits
    37 00004432 BA0000                  			nextdigit: mov dx, 0 ; zero upper half of dividend
    38 00004435 F7F3                    			div bx ; divide by 10
    39 00004437 80C230                  			add dl, 0x30 ; convert digit into ascii value
    40 0000443A 80FA39                  			cmp dl, 0x39 ; is the digit an alphabet
    41 0000443D 7603                    			jbe skipalpha ; no, skip addition
    42 0000443F 80C207                  			add dl, 7 ; yes, make in alphabet code
    43 00004442 B607                    			skipalpha: mov dh, 0x07 ; attach normal attribute
    44 00004444 268915                  			mov [es:di], dx ; print char on screen
    45 00004447 83EF02                  			sub di, 2 ; to previous screen location
    46 0000444A E2E6                    			loop nextdigit ; if no divide it again
    47 0000444C 5F                      			pop di
    48 0000444D 5A                      			pop dx
    49 0000444E 59                      			pop cx
    50 0000444F 5B                      			pop bx
    51 00004450 58                      			pop ax
    52 00004451 07                      			pop es
    53 00004452 5D                      			pop bp
    54 00004453 C20600                  			ret 6
    55                                  
    56                                  clrscr:
    57 00004456 B800B8                  			mov ax, 0xb800 					; load video base in ax
    58 00004459 8EC0                    			mov es, ax 					; point es to video base
    59 0000445B BF0000                  			mov di, 0 					; point di to top left column
    60                                  									; es:di pointint to --> 0xB800:0000 (B8000)
    61                                  
    62                                  nextchar: 	
    63 0000445E 26C7052007              		mov word [es:di], 0x0720 				; clear next char on screen
    64 00004463 83C702                  		add di, 2 						; move to next screen location
    65 00004466 81FFA00F                		cmp di, 4000 						; has the whole screen cleared
    66 0000446A 75F2                    		jne nextchar 						; if no clear next position
    67 0000446C C3                      ret
    68                                  
    69                                  ; mytask subroutine to be run as a thread
    70                                  ; takes line number as parameter
    71 0000446D 55                      mytask: push bp
    72 0000446E 89E5                    		mov bp, sp
    73 00004470 83EC02                  		sub sp, 2 ; thread local variable
    74 00004473 50                      		push ax
    75 00004474 53                      		push bx
    76 00004475 8B4604                  		mov ax, [bp+4] ; load line number parameter
    77 00004478 BB4600                  		mov bx, 70 ; use column number 70
    78 0000447B C746FE0000              		mov word [bp-2], 0 ; initialize local variable
    79                                  		
    80 00004480 50                      		printagain: push ax ; line number
    81 00004481 53                      					push bx ; column number
    82 00004482 FF76FE                  					push word [bp-2] ; number to be printed
    83 00004485 E881FF                  					call printnum ; print the number
    84 00004488 FF46FE                  					inc word [bp-2] ; increment the local variable
    85 0000448B EBF3                    					jmp printagain ; infinitely print
    86 0000448D 5B                      		pop bx
    87 0000448E 58                      		pop ax
    88 0000448F 89EC                    		mov sp, bp
    89 00004491 5D                      		pop bp
    90 00004492 C3                      		ret
    91                                  ; subroutine to register a new thread
    92                                  ; takes the segment, offset, of the thread routine and a parameter
    93                                  ; for the target thread subroutine
    94                                  
    95                                  start: 
    96 00004493 E8C0FF                  	call clrscr
    97 00004496 30E4                    		nextkey: xor ah, ah ; service 0 â€“ get keystroke
    98 00004498 CD16                    				int 0x16 ; bios keyboard services	
    99 0000449A FF36[0744]              				push word [lineno] ; thread parameter
   100 0000449E 6A14                    				push 20
   101 000044A0 68D204                  				push 1234
   102                                  				; call printnum
   103 000044A3 E8C7FF                  				call mytask ; register the thread
   104 000044A6 FF06[0744]              				inc word [lineno]
   105 000044AA EBEA                    				jmp nextkey ; wait for next keypress
   106                                  				
   107 000044AC B8004C                  		mov ax,0x4c00
   108 000044AF CD21                    		int 0x21
