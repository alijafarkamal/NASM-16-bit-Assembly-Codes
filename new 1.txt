; org 0x100                 ; COM file starts at 0x100 in memory

; section .data
; name db 29, 0, 29 dup(0)         ; Buffer for name (29 max characters, +2 for control)
; roll db 9, 0, 9 dup(0)           ; Buffer for roll number (9 max characters, +2 for control)
; course db 29, 0, 29 dup(0)       ; Buffer for course name (29 max characters, +2 for control)
; section_name db 9, 0, 9 dup(0)   ; Buffer for section (9 max characters, +2 for control)

; msg_name db "Enter your name: $"
; msg_roll db "Enter your roll number: $"
; msg_course db "Enter your course name: $"
; msg_section db "Enter your section: $"

; newline1 db 0Dh, 0Ah, "$"         ; Newline sequence for DOS interrupt 21h
; msg_prompt db "Your Entered Data:$"
; label_name db "Name: $"
; label_roll db "Roll Number: $"
; label_course db "Course: $"
; label_section db "Section: $"

; section .text
; start:
    ; ; Ask for and store the name
    ; mov dx, msg_name
    ; call print_string            ; Print "Enter your name:"
    ; lea dx, [name]
    ; call read_string             ; Read user input into 'name'
    ; call terminate_string        ; Null-terminate input
    ; call newline                 ; Move to the next line

    ; ; Ask for and store the roll number
    ; mov dx, msg_roll
    ; call print_string            ; Print "Enter your roll number:"
    ; lea dx, [roll]
    ; call read_string             ; Read user input into 'roll'
    ; call terminate_string        ; Null-terminate input
    ; call newline                 ; Move to the next line

    ; ; Ask for and store the course name
    ; mov dx, msg_course
    ; call print_string            ; Print "Enter your course name:"
    ; lea dx, [course]
    ; call read_string             ; Read user input into 'course'
    ; call terminate_string        ; Null-terminate input
    ; call newline                 ; Move to the next line

    ; ; Ask for and store the section
    ; mov dx, msg_section
    ; call print_string            ; Print "Enter your section:"
    ; lea dx, [section_name]
    ; call read_string             ; Read user input into 'section_name'
    ; call terminate_string        ; Null-terminate input
    ; call newline                 ; Move to the next line

    ; ; Clear the screen
    ; call clrscr

    ; ; Display data in the middle of the screen (12th row, 30th column)
    ; mov ah, 0x02                ; BIOS interrupt to set cursor position
    ; mov bh, 0                   ; Page number
    ; mov dh, 12                  ; Row (12th)
    ; mov dl, 30                  ; Column (30th)
    ; int 0x10

    ; ; Display a prompt
    ; mov dx, msg_prompt
    ; call print_string
    ; call newline

    ; ; Display the entered data
    ; call display_data

    ; ; Program end
    ; mov ax, 0x4C00              ; DOS terminate program
    ; int 0x21

; ; Subroutine to display entered data
; display_data:
    ; ; Display Name
    ; mov dx, label_name
    ; call print_string
    ; lea dx, [name+2]
    ; call print_string
    ; call newline

    ; ; Display Roll Number
    ; mov dx, label_roll
    ; call print_string
    ; lea dx, [roll+2]
    ; call print_string
    ; call newline

    ; ; Display Course
    ; mov dx, label_course
    ; call print_string
    ; lea dx, [course+2]
    ; call print_string
    ; call newline

    ; ; Display Section
    ; mov dx, label_section
    ; call print_string
    ; lea dx, [section_name+2]
    ; call print_string
    ; call newline

    ; ret

; ; Subroutine to clear the screen
; clrscr:
    ; pusha
    ; push es
    ; mov ax, 0xb800             ; Load video base in ax
    ; mov es, ax                 ; Point es to video base
    ; mov di, 0                  ; Point di to top left column (0xB800:0000)

; nextchar:
    ; mov word [es:di], 0x0720   ; Clear next char on screen with space (0x20) and white attribute (0x07)
    ; add di, 2                  ; Move to next screen position (2 bytes per character)
    ; cmp di, 4000               ; Check if the whole screen is cleared (4000 bytes for 80x25 text mode)
    ; jne nextchar               ; If not, clear the next character
    ; pop es
    ; popa
    ; ret

; ; Subroutine to null-terminate the input
; ; terminate_string:
    ; ; mov al, 0                  ; Null character
    ; ; lea si, [dx+2]             ; Start of user input
    ; ; mov bl, [dx+1]             ; Length of the input
    ; ; add si, bx                 ; Move SI to the end of the input
    ; ; mov [si], al               ; Append null terminator
    ; ; ret

; ; Subroutine to print a string (uses DOS interrupt 21h, function 09h)
; print_string:
    ; mov ah, 0x09               ; DOS function 09h: print string
    ; int 0x21                   ; Print the string at DS:DX
    ; ret

; ; Subroutine to read a string (uses DOS interrupt 21h, function 0Ah)
; read_string:
    ; mov ah, 0x0A               ; DOS function 0Ah: buffered input
    ; int 0x21                   ; Read user input into buffer at DS:DX
    ; ret

; ; Subroutine to move to the next line
; newline:
    ; mov dx, newline1
    ; call print_string
    ; ret


; terminate_string:

	
    ; mov al, 0                  ; Null character
	; push di
	; add dx,2
	; mov di,dx
    ; lea si, [di]             ; Start of user input
	; sub dx,1
	; mov di,dx
    ; mov bl, [di]             ; Length of the input
	; pop di
    ; add si, bx                 ; Move SI to the end of the input
    ; mov [si], al               ; Append null terminator
    ; ret 