     1                                  [org 0x0100]
     2 00000000 E91F17                  jmp start
     3                                  
     4 00000003 5802                    right: dw 600
     5 00000005 2602                    mid: dw 550
     6 00000007 F401                    left: dw 500
     7                                  
     8 00000009 B80B                    right_b: dw 3000
     9 0000000B E60A                    mid_b: dw 2790
    10 0000000D 7409                    left_b: dw 2420
    11                                  
    12 0000000F 00000000                oldisr: dd 0
    13 00000013 00000000                oldisr2: dd 0
    14                                  
    15 00000017 00                      flag: db 0
    16 00000018 00                      flag2: db 0
    17 00000019 00                      flag3: db 0
    18                                  
    19 0000001A 00                      ground_flag:db 0
    20                                  
    21 0000001B 2030                    rec_colour: dw 0x3020
    22                                  
    23 0000001D 00                      f1: db 0
    24 0000001E 00                      f2: db 0
    25 0000001F 00                      f3: db 0
    26                                  
    27                                  
    28 00000020 070503                  l: db 7,5,3
    29                                  
    30                                  
    31                                  
    32                                  
    33 00000023 0000<rep 7D0h>          buffer: times 2000 dw 0
    34 00000FC3 464C41505059204249-     gamename: db 'FLAPPY BIRD....$'
    34 00000FCC 52442E2E2E2E24     
    35 00000FD3 4D656D626572313A20-     name1: db 'Member1: Abdul Ghani , 23L-0761....$'
    35 00000FDC 416264756C20476861-
    35 00000FE5 6E69202C2032334C2D-
    35 00000FEE 303736312E2E2E2E24 
    36 00000FF7 4D656D626572323A20-     name2: db 'Member2: Ali Shahzad , 23L-0719....$'
    36 00001000 416C6920536861687A-
    36 00001009 6164202C2032334C2D-
    36 00001012 303731392E2E2E2E24 
    37 0000101B 33726420536D657374-     smester: db '3rd Smester....$'
    37 00001024 65722E2E2E2E24     
    38 0000102B 53636F72653A2000        sc: db 'Score: ',0
    39                                  
    40                                  
    41 00001033 57656C636F6D652074-     message1: db 'Welcome to Flappy Bird'
    41 0000103C 6F20466C6170707920-
    41 00001045 42697264           
    42 00001049 1600                    length1: dw 22
    43 0000104B 507265737320532074-     message2: db 'Press S to start AND E to End the Game'
    43 00001054 6F2073746172742041-
    43 0000105D 4E44204520746F2045-
    43 00001066 6E6420746865204761-
    43 0000106F 6D65               
    44 00001071 2D00                    length2: dw 45
    45 00001073 707265737320492074-     msg: db 'press I to view the intructions'
    45 0000107C 6F2076696577207468-
    45 00001085 6520696E7472756374-
    45 0000108E 696F6E73           
    46 00001092 2000                    len: dw 32
    47                                  
    48 00001094 507265737320452074-     message3: db 'Press E to End the game And C to continue'
    48 0000109D 6F20456E6420746865-
    48 000010A6 2067616D6520416E64-
    48 000010AF 204320746F20636F6E-
    48 000010B8 74696E7565         
    49 000010BD 3100                    length3: dw 49
    50                                  
    51                                  
    52 000010BF 00                      velocity db 0
    53 000010C0 01                      gravity db 1
    54 000010C1 FD                      flap_strength db -3
    55 000010C2 2800                    x: dw 40        
    56 000010C4 0C00                    y: dw 12        
    57                                  
    58                                  
    59                                  
    60 000010C6 47616D65204F766572-     gameover_message: db 'Game Over :(....$'
    60 000010CF 203A282E2E2E2E24   
    61 000010D7 0D00                    gameover_length: dw 13
    62                                  
    63 000010D9 596F75722053636F72-     score_message: db 'Your Score:'
    63 000010E2 653A               
    64 000010E4 0B00                    score_length: dw 11
    65 000010E6 0000                    score :dw 0
    66 000010E8 0A00                    highest_score :dw 10
    67                                  
    68 000010EA 507265737320452074-     prompt_message: db 'Press E to end '
    68 000010F3 6F20656E6420       
    69 000010F9 0F00                    prompt_length: dw 15
    70                                  
    71                                  
    72 000010FB 436F6E67726174756C-     congrats_message: db 'Congratulations :)...$'
    72 00001104 6174696F6E73203A29-
    72 0000110D 2E2E2E24           
    73 00001111 1200                    congrats_length: dw 18
    74                                  
    75 00001113 596F752062726F6B65-     score_message2: db 'You broke the record!....$'
    75 0000111C 20746865207265636F-
    75 00001125 7264212E2E2E2E24   
    76 0000112D 1600                    score_length2: dw 22
    77 0000112F 507265737320452074-     prompt_message2: db 'Press E to end....$'
    77 00001138 6F20656E642E2E2E2E-
    77 00001141 24                 
    78 00001142 0F00                     prompt_length2: dw 15
    79                                  
    80                                  
    81                                  
    82                                  
    83 00001144 00                      old_x db 0
    84 00001145 00                      old_y db 0
    85                                  
    86                                  update_screen:
    87 00001146 FA                      cli                    ; Disable interrupts
    88 00001147 60                      pusha                  ; Save all registers
    89 00001148 B8[2300]                mov ax, buffer         ; Load the address of the buffer
    90 0000114B 89C6                    mov si, ax             ; SI points to the buffer start
    91 0000114D B800B8                  mov ax, 0xB800         ; Video memory segment
    92 00001150 8EC0                    mov es, ax             ; Set ES to video segment
    93 00001152 31FF                    xor di, di             ; DI points to start of video memory
    94                                  
    95 00001154 B9D007                  mov cx, 2000           ; Number of words (80x25 characters)
    96                                  copy_loop:
    97 00001157 A5                      movsw                  ; Move word from [SI] to [ES:DI], SI and DI increment by 2
    98 00001158 E2FD                    loop copy_loop         ; Repeat for all screen words
    99                                  
   100 0000115A 61                      popa                   ; Restore all registers
   101 0000115B FB                      sti                    ; Re-enable interrupts
   102 0000115C C3                      ret
   103                                  
   104                                  
   105                                  
   106                                  
   107                                  draw_bird:
   108 0000115D 50                          push ax
   109 0000115E 53                          push bx
   110 0000115F 06                          push es
   111 00001160 57                          push di
   112                                  
   113 00001161 B800B8                      mov ax, 0xb800         
   114 00001164 8EC0                        mov es, ax
   115 00001166 31FF                        xor di, di             
   116                                  
   117                                    
   118 00001168 B050                        mov al, 80             
   119 0000116A F626[C410]                  mul byte [y]           
   120 0000116E 83C028                      add ax, 40             
   121 00001171 D1E0                        shl ax, 1              
   122 00001173 89C7                        mov di, ax             
   123                                  
   124                                     
   125 00001175 268B1D                      mov bx, [es:di]
   126 00001178 3B1E[1B00]                  cmp bx, [rec_colour]  
   127 0000117C 7456                        je .collsionDetected
   128 0000117E 26C7052040                  mov word [es:di], 0x4020  
   129 00001183 83C702                      add di, 2                 
   130                                  							  
   131 00001186 268B1D                      mov bx, [es:di]
   132 00001189 3B1E[1B00]                  cmp bx, [rec_colour]  
   133 0000118D 7445                        je .collsionDetected
   134 0000118F 26C7052040                  mov word [es:di], 0x4020  
   135 00001194 83C702                      add di, 2                 
   136                                  
   137 00001197 268B1D                      mov bx, [es:di]
   138 0000119A 3B1E[1B00]                  cmp bx, [rec_colour]  
   139 0000119E 7434                        je .collsionDetected
   140 000011A0 26C7052040                  mov word [es:di], 0x4020 
   141 000011A5 81C7A000                	ADD DI,160
   142                                  
   143 000011A9 268B1D                  	mov bx, [es:di]
   144 000011AC 3B1E[1B00]                  cmp bx, [rec_colour]  
   145                                  	
   146 000011B0 7422                    	je .collsionDetected
   147 000011B2 26C7052040              	MOV WORD[ES:DI],0x4020
   148                                  	
   149                                  
   150                                      
   151 000011B7 B482                    	mov ah,0x82
   152 000011B9 B05E                    	mov al,'^'
   153 000011BB 83EF02                  	sub di, 2
   154 000011BE 268905                  	MOV WORD[ES:DI],ax
   155                                  	
   156                                      
   157 000011C1 83EF02                  	SUB DI,2
   158 000011C4 268B1D                  	mov bx, [es:di]
   159 000011C7 3B1E[1B00]                  cmp bx, [rec_colour]  
   160 000011CB 7407                        je .collsionDetected
   161 000011CD 26C7052040              	MOV WORD[ES:DI],0x4020
   162                                  	 
   163 000011D2 EB0C                        jmp .end_update
   164                                  	
   165                                  
   166                                  .collsionDetected:
   167 000011D4 2EC606[8B1A]01              mov byte[cs:collision_flag],1
   168 000011DA E88402                      call unhook_keyboard_isr
   169 000011DD E89602                      call unhook_timer_isr
   170                                      
   171                                  
   172                                  .end_update:
   173 000011E0 5F                          pop di
   174 000011E1 07                          pop es
   175 000011E2 5B                          pop bx
   176 000011E3 58                          pop ax
   177 000011E4 C3                          ret
   178                                  
   179                                  clear_bird:
   180 000011E5 50                          push ax
   181 000011E6 53                          push bx
   182 000011E7 06                          push es
   183 000011E8 57                          push di
   184                                  
   185 000011E9 B800B8                      mov ax, 0xb800         
   186 000011EC 8EC0                        mov es, ax
   187 000011EE 31FF                        xor di, di             
   188                                  
   189                                     
   190 000011F0 B050                        mov al, 80             
   191 000011F2 F626[C410]                  mul byte [y]           
   192 000011F6 83C028                      add ax, 40             
   193 000011F9 D1E0                        shl ax, 1              
   194 000011FB 89C7                        mov di, ax             
   195                                  
   196                                     
   197 000011FD 26C7052007                  mov word [es:di], 0x0720
   198                                  
   199 00001202 5F                          pop di
   200 00001203 07                          pop es
   201 00001204 5B                          pop bx
   202 00001205 58                          pop ax
   203 00001206 C3                          ret
   204                                  
   205                                  
   206                                  clear:
   207 00001207 06                          push es
   208 00001208 50                          push ax
   209 00001209 51                          push cx
   210 0000120A 57                          push di
   211                                  
   212 0000120B B800B8                      mov ax, 0xb800
   213 0000120E 8EC0                        mov es, ax
   214 00001210 31FF                        xor di, di
   215 00001212 B82007                      mov ax, 0x0720  
   216 00001215 B9D007                      mov cx, 2000    
   217                                  
   218 00001218 FC                          cld
   219 00001219 F3AB                        rep stosw       
   220                                  
   221 0000121B 5F                          pop di
   222 0000121C 59                          pop cx
   223 0000121D 58                          pop ax
   224 0000121E 07                          pop es
   225 0000121F C3                          ret
   226                                  
   227                                  
   228                                  background:
   229 00001220 06                          push es
   230 00001221 50                          push ax
   231 00001222 51                          push cx
   232 00001223 57                          push di
   233                                  
   234 00001224 B800B8                      mov ax, 0xb800
   235 00001227 8EC0                        mov es, ax
   236 00001229 31FF                        xor di, di
   237 0000122B B8207F                      mov ax, 0x7F20  ; space char with blue background
   238 0000122E B9D007                      mov cx, 2000
   239                                  
   240 00001231 FC                          cld
   241 00001232 F3AB                        rep stosw       ; apply blue background across screen
   242                                  
   243 00001234 5F                          pop di
   244 00001235 59                          pop cx
   245 00001236 58                          pop ax
   246 00001237 07                          pop es
   247 00001238 C3                          ret
   248                                  
   249                                  printstr:
   250 00001239 55                          push bp
   251 0000123A 89E5                        mov bp, sp
   252 0000123C 06                          push es
   253 0000123D 50                          push ax
   254 0000123E 51                          push cx
   255 0000123F 56                          push si
   256 00001240 57                          push di
   257                                  
   258 00001241 B800B8                      mov ax, 0xb800
   259 00001244 8EC0                        mov es, ax           
   260                                  
   261 00001246 B050                        mov al, 80           
   262 00001248 F6660C                      mul byte [bp+12]     
   263 0000124B 03460A                      add ax, [bp+10]      
   264 0000124E D1E0                        shl ax, 1            
   265                                  
   266 00001250 89C7                        mov di, ax           
   267 00001252 8B7606                      mov si, [bp+6]       
   268 00001255 8B4E04                      mov cx, [bp+4]       
   269 00001258 8A6608                      mov ah, [bp+8]       
   270                                  
   271 0000125B FC                          cld 
   272                                  
   273                                  nextchar:
   274 0000125C AC                          lodsb                
   275 0000125D AB                          stosw                
   276 0000125E E2FC                        loop nextchar        
   277                                          
   278 00001260 5F                          pop di
   279 00001261 5E                          pop si
   280 00001262 59                          pop cx
   281 00001263 58                          pop ax
   282 00001264 07                          pop es
   283 00001265 5D                          pop bp
   284 00001266 C20A00                      ret 10
   285                                  
   286                                  print_message:
   287 00001269 55                          push bp
   288 0000126A 89E5                        mov bp, sp
   289 0000126C 06                          push es
   290 0000126D 50                          push ax
   291 0000126E 51                          push cx
   292 0000126F 56                          push si
   293 00001270 57                          push di
   294                                      
   295 00001271 B800B8                      mov ax, 0xb800
   296 00001274 8EC0                        mov es, ax           
   297                                  
   298 00001276 B050                        mov al, 80           
   299 00001278 F6660C                      mul byte [bp+12]     
   300 0000127B 03460A                      add ax, [bp+10]      
   301 0000127E D1E0                        shl ax, 1            
   302                                  
   303 00001280 89C7                        mov di, ax           
   304 00001282 8B7606                      mov si, [bp+6]       
   305 00001285 8B4E04                      mov cx, [bp+4]       
   306 00001288 8A6608                      mov ah, [bp+8]       
   307                                  
   308 0000128B FC                          cld 
   309                                  
   310                                  nextchar1:
   311 0000128C AC                          lodsb                
   312 0000128D AB                          stosw                
   313 0000128E E2FC                        loop nextchar1        
   314                                          
   315 00001290 5F                          pop di
   316 00001291 5E                          pop si
   317 00001292 59                          pop cx
   318 00001293 58                          pop ax
   319 00001294 07                          pop es
   320 00001295 5D                          pop bp
   321 00001296 C20A00                      ret 10
   322                                  	
   323                                  uped:
   324 00001299 55                          push bp
   325 0000129A 89E5                        mov bp, sp
   326 0000129C 60                          pusha
   327                                      
   328                                      
   329 0000129D B800B8                      mov ax, 0xB800
   330 000012A0 8EC0                        mov es, ax
   331 000012A2 31FF                        xor di, di 
   332                                      
   333 000012A4 B80000                      mov ax,0
   334 000012A7 BB5000                  	mov bx,80;
   335 000012AA F7E3                    	mul bx
   336 000012AC 83C000                  	add ax,0;
   337 000012AF D1E0                    	shl ax,1
   338 000012B1 89C7                    	mov di,ax
   339                                  	
   340                                  loop_ground1:
   341 000012B3 26C7052068                  mov word [es:di], 0x6820 
   342 000012B8 83C702                      add di, 2                
   343 000012BB 81FFE001                    cmp di, 480
   344 000012BF 72F2                        jb loop_ground1          
   345 000012C1 61                          popa
   346 000012C2 5D                          pop bp
   347 000012C3 C3                          ret
   348                                  	
   349                                  	
   350                                  ground:
   351 000012C4 55                          push bp
   352 000012C5 89E5                        mov bp, sp
   353 000012C7 60                          pusha
   354                                      
   355                                      
   356 000012C8 B800B8                      mov ax, 0xB800
   357 000012CB 8EC0                        mov es, ax
   358 000012CD 31FF                        xor di, di 
   359                                      
   360 000012CF B81400                      mov ax,20
   361 000012D2 BB5000                  	mov bx,80;
   362 000012D5 F7E3                    	mul bx
   363 000012D7 83C000                  	add ax,0;
   364 000012DA D1E0                    	shl ax,1
   365 000012DC 89C7                    	mov di,ax
   366                                  	
   367                                  loop_ground:
   368 000012DE 26C7052060                  mov word [es:di], 0x6020 
   369 000012E3 83C702                      add di, 2                
   370 000012E6 81FFA00F                    cmp di, 4000
   371                                  	;mov word[es:3780],0x0720
   372 000012EA 72F2                        jb loop_ground
   373                                  	
   374 000012EC 61                          popa
   375 000012ED 5D                          pop bp
   376 000012EE C3                          ret
   377                                  	
   378                                  scrollGround:
   379 000012EF 55                          push bp
   380 000012F0 89E5                        mov bp, sp
   381 000012F2 60                          pusha
   382                                      
   383 000012F3 B800B8                      mov ax, 0xb800            ; Set ES to video memory
   384 000012F6 8EC0                        mov es, ax
   385 000012F8 BF760C                      mov di, 3190              ; Start at the first ground row (row 19)
   386 000012FB BE0000                      mov si, 0                 ; Offset into Save_Ground (starting point)
   387 000012FE BB[811A]                    mov bx, Save_Ground       ; Address of Save_Ground
   388 00001301 B90500                      mov cx, 5                 ; Process 5 rows (lines 19-24)
   389                                  
   390 00001304 FC                          cld                       ; Ensure forward direction (left to right)
   391                                      
   392                                      ; Save the current ground rows to Save_Ground
   393                                  save_ground_loop:
   394 00001305 268B15                      mov dx, [es:di]           ; Save the first word of the row (current row)
   395 00001308 8910                        mov [bx + si], dx         ; Store it in Save_Ground
   396 0000130A 81C7A000                    add di, 160               ; Move to next row (next row in video memory)
   397 0000130E 83C602                      add si, 2                 ; Increment Save_Ground offset (2 bytes per word)
   398 00001311 E2F2                        loop save_ground_loop     ; Repeat for 5 rows
   399                                  
   400                                      ; Now we begin the scroll (shift rows left)
   401 00001313 BF760C                      mov di, 3190              ; Reset to the first ground row
   402 00001316 BE780C                      mov si, 3192              ; Start shifting from column 2 (word 2 in the row)
   403 00001319 B90500                      mov cx, 5                 ; Process 5 rows (lines 19-24)
   404                                      
   405 0000131C 1E                          push ds
   406 0000131D 8ED8                        mov ds, ax                ; Set DS to the correct segment
   407                                  
   408                                      ; Shift rows left
   409                                  shift_ground_loop:
   410 0000131F 51                          push cx
   411 00001320 B94F00                      mov cx, 79                ; Shift 79 words (158 bytes) in the row
   412 00001323 F3A5                        rep movsw                 ; Move row data one word left (shift)
   413 00001325 83C702                      add di, 2                 ; Skip the last word (clear rightmost column)
   414 00001328 59                          pop cx
   415 00001329 83C602                      add si, 2                 ; Move to the next row
   416 0000132C E2F1                        loop shift_ground_loop    ; Repeat for all 5 rows
   417                                  
   418                                      ; Restore the last column (rightmost part of the rows)
   419 0000132E BE0000                      mov si, 0                 ; Reset Save_Ground offset
   420 00001331 BF7E0C                      mov di, 3198              ; Start restoring from the last column
   421 00001334 B90500                      mov cx, 5                 ; Process 5 rows
   422                                  
   423 00001337 1F                          pop ds                    ; Restore DS
   424                                  restore_ground_loop:
   425 00001338 8B10                        mov dx, [bx + si]         ; Load saved word from Save_Ground
   426 0000133A 268915                      mov [es:di], dx           ; Restore it to the last column
   427 0000133D 83C602                      add si, 2                 ; Increment Save_Ground offset (2 bytes per word)
   428 00001340 81C7A000                    add di, 160               ; Move to the next row
   429 00001344 E2F2                        loop restore_ground_loop  ; Repeat for all 5 rows
   430                                  
   431 00001346 61                          popa
   432 00001347 5D                          pop bp
   433 00001348 C3                          ret
   434                                  
   435                                  
   436                                  
   437                                  RECTANGLE:
   438 00001349 55                          push bp
   439 0000134A 89E5                        mov bp, sp
   440 0000134C 50                          push ax
   441 0000134D 53                          push bx
   442 0000134E 51                          push cx
   443 0000134F 52                          push dx
   444 00001350 56                          push si
   445 00001351 57                          push di
   446                                  
   447 00001352 8B7E06                      mov di, [bp+6]        ; di = start address of the rectangle
   448 00001355 8B5604                      mov dx, [bp+4]             ; dx = row counter
   449                                  
   450                                  outerloop:
   451 00001358 B90000                      mov cx, 0                
   452                                  innerloop:
   453 0000135B A1[1B00]                	mov ax,[rec_colour]
   454 0000135E 268905                      mov word [es:di], ax 
   455 00001361 83C702                      add di, 2            
   456 00001364 41                          inc cx
   457 00001365 83F906                      cmp cx, 6      
   458 00001368 75F1                        jne innerloop        
   459                                  
   460 0000136A 81C79400                    add di, 148  
   461                                  	
   462 0000136E 4A                          dec dx
   463 0000136F 83FA00                      cmp dx, 0       
   464 00001372 75E4                        jne outerloop        
   465                                  
   466 00001374 5F                          pop di
   467 00001375 5E                          pop si
   468 00001376 5A                          pop dx
   469 00001377 59                          pop cx
   470 00001378 5B                          pop bx
   471 00001379 58                          pop ax
   472 0000137A 5D                          pop bp
   473 0000137B C20400                      ret 4             
   474                                  
   475                                  
   476                                  
   477                                  wait_for_key:
   478 0000137E 31C0                        xor ax, ax
   479 00001380 CD16                        int 0x16           
   480 00001382 C3                          ret
   481                                  
   482                                  
   483                                  
   484                                  
   485                                  delay:
   486 00001383 60                          pusha
   487 00001384 B9FFFF                      mov cx, 0FFFFh         
   488                                  .delay_loop:
   489 00001387 90                          nop                    
   490 00001388 E2FD                        loop .delay_loop       
   491 0000138A 61                          popa
   492 0000138B C3                          ret
   493                                  	
   494                                  	
   495                                  	
   496                                  	
   497                                  update_bird_position:
   498                                      ; Preserve registers
   499 0000138C 50                          push ax
   500 0000138D 53                          push bx
   501 0000138E 51                          push cx
   502 0000138F 52                          push dx
   503 00001390 06                          push es
   504 00001391 57                          push di
   505                                  
   506                                      ; Check if update should be performed
   507 00001392 2EA0[7E1A]                  MOV AL, [CS:release_flag]
   508 00001396 3C01                        CMP AL, 1
   509 00001398 744F                        je NOUPDATE                    
   510                                  
   511                                      ; Reset status flags
   512 0000139A C606[1A00]00                mov byte [ground_flag], 0      
   513                                  
   514                                      ; Apply gravity and update velocity
   515 0000139F A0[BF10]                    mov al, [velocity]
   516 000013A2 0206[C010]                  add al, [gravity]             
   517 000013A6 A2[BF10]                    mov [velocity], al
   518                                  
   519                                      ; Update Y position
   520 000013A9 A0[C410]                    mov al, [y]
   521 000013AC 0206[BF10]                  add al, [velocity]            
   522 000013B0 A2[C410]                    mov [y], al
   523                                  
   524                                    
   525                                     
   526                                  
   527                                  
   528                                      
   529                                  
   530                                      ; Boundary checks
   531 000013B3 803E[C410]03                cmp byte [y], 3
   532 000013B8 7D05                        jge no_limit_up
   533 000013BA C606[C410]03                mov byte [y], 3              
   534                                  no_limit_up:
   535                                  
   536 000013BF 803E[C410]16                cmp byte [y], 22
   537 000013C4 7C0D                        jl no_limit_down
   538 000013C6 E89800                      call unhook_keyboard_isr
   539 000013C9 E8AA00                      call unhook_timer_isr
   540 000013CC C606[1A00]01                mov byte [ground_flag], 1
   541 000013D1 EB08                        jmp collision_detected        
   542                                  no_limit_down:
   543                                  
   544 000013D3 2EC606[7E1A]00              mov byte [CS:release_flag], 0
   545 000013D9 EB14                        jmp end_update
   546                                  
   547                                  collision_detected:
   548 000013DB E88300                      call unhook_keyboard_isr
   549 000013DE E89500                      call unhook_timer_isr
   550 000013E1 2EC606[8B1A]01              mov byte[cs:collision_flag], 1
   551                                     
   552 000013E7 EB06                        jmp end_update                  
   553                                  
   554                                  NOUPDATE:
   555 000013E9 2EC606[7E1A]00              mov byte [CS:release_flag], 0
   556                                  
   557                                  end_update:
   558 000013EF 5F                          pop di
   559 000013F0 07                          pop es
   560 000013F1 5A                          pop dx
   561 000013F2 59                          pop cx
   562 000013F3 5B                          pop bx
   563 000013F4 58                          pop ax
   564 000013F5 C3                          ret
   565                                  
   566                                  
   567                                  endscreen:
   568 000013F6 A1[E610]                mov ax,  word[score]
   569 000013F9 3B06[E810]              cmp ax,word [highest_score]
   570 000013FD 7C06                    jl end_scr
   571 000013FF A3[E810]                mov word[highest_score],ax
   572 00001402 E82D01                  call highest_score_scr
   573                                  
   574                                  end_scr:
   575                                  
   576                                     
   577 00001405 E818FE                      call background
   578                                  
   579                                      ; Display "Game Over 😞" message
   580 00001408 B80A00                      mov ax, 10
   581 0000140B 50                          push ax
   582 0000140C B81E00                      mov ax, 30
   583 0000140F 50                          push ax
   584 00001410 B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   585 00001413 50                          push ax
   586 00001414 B8[C610]                    mov ax, gameover_message
   587 00001417 50                          push ax
   588 00001418 FF36[D710]                  push word [gameover_length]
   589 0000141C E84AFE                      call print_message
   590                                  
   591                                      ; Display score (You can replace with actual score logic if needed)
   592 0000141F B80C00                      mov ax, 12
   593 00001422 50                          push ax
   594 00001423 B81E00                      mov ax, 30
   595 00001426 50                          push ax
   596 00001427 B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   597 0000142A 50                          push ax
   598 0000142B B8[D910]                    mov ax, score_message
   599 0000142E 50                          push ax
   600 0000142F FF36[E410]                  push word [score_length]
   601 00001433 E833FE                      call print_message
   602 00001436 E8C800                   call display_score
   603                                      ; Display "Press E to end, S to start again"
   604 00001439 B80E00                      mov ax, 14
   605 0000143C 50                          push ax
   606 0000143D B81E00                      mov ax, 30
   607 00001440 50                          push ax
   608 00001441 B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   609 00001444 50                          push ax
   610 00001445 B8[EA10]                    mov ax, prompt_message
   611 00001448 50                          push ax
   612 00001449 FF36[F910]                  push word [prompt_length]
   613 0000144D E819FE                      call print_message
   614                                  
   615                                     h: 
   616 00001450 E82BFF                  call wait_for_key
   617                                    
   618                                  	
   619 00001453 3C65                    	cmp al,'e'
   620 00001455 0F84FC03                    je handle_endgame
   621 00001459 3C45                    	cmp al,'E'
   622 0000145B 0F84F603                	je handle_endgame
   623                                  	
   624 0000145F EBEF                    	jmp h
   625                                  
   626                                  	
   627                                  
   628                                      
   629                                  	
   630                                  unhook_keyboard_isr:
   631 00001461 FA                          cli                     
   632 00001462 31C0                        xor ax, ax
   633 00001464 8EC0                        mov es, ax		
   634 00001466 A1[0F00]                    mov ax, [oldisr]       
   635 00001469 26A32400                    mov [es:9*4], ax       
   636 0000146D A1[1100]                    mov ax, [oldisr+2]     
   637 00001470 26A32600                    mov [es:9*4+2], ax     
   638 00001474 FB                          sti  
   639                                  	
   640 00001475 C3                          ret
   641                                  unhook_timer_isr:
   642 00001476 FA                          cli                     
   643 00001477 31C0                        xor ax, ax
   644 00001479 8EC0                        mov es, ax		
   645 0000147B A1[1300]                    mov ax, [oldisr2]       
   646 0000147E 26A32000                    mov [es:8*4], ax       
   647 00001482 A1[1500]                    mov ax, [oldisr2+2]     
   648 00001485 26A32200                    mov [es:8*4+2], ax     
   649 00001489 FB                          sti  
   650                                  	
   651 0000148A C3                          ret
   652                                  
   653                                  
   654                                  again_start:
   655 0000148B C606[C210]28            	mov byte[x],40
   656 00001490 C606[C410]0C            	mov byte[y],12
   657 00001495 E8C5FC                      call draw_bird
   658 00001498 E98702                  	JMP start
   659                                  	
   660                                  
   661                                  flaapy:
   662 0000149B A0[C110]                    mov al, [flap_strength]
   663 0000149E A2[BF10]                    mov [velocity], al
   664 000014A1 C3                          ret
   665                                  
   666                                  flap:
   667 000014A2 E8F6FF                      call flaapy
   668 000014A5 EB54                       jmp out_kbisr
   669                                  
   670                                  pause_screen:
   671                                  
   672 000014A7 E89CFC                  call update_screen
   673                                  
   674 000014AA E873FD                  call background
   675                                  
   676                                  
   677 000014AD B80D00                      mov ax, 13
   678 000014B0 50                          push ax
   679 000014B1 B81000                      mov ax, 16
   680 000014B4 50                          push ax
   681 000014B5 B87000                      mov ax, 0x70       
   682 000014B8 50                          push ax
   683 000014B9 B8[9410]                    mov ax, message3
   684 000014BC 50                          push ax
   685 000014BD FF36[BD10]                  push word [length3]
   686 000014C1 E8A5FD                      call print_message
   687                                  	
   688                                     
   689 000014C4 C606[1700]01               mov byte[flag] ,1 
   690                                     
   691                                  	.pause_loop:
   692 000014C9 E460                        in al, 0x60             
   693 000014CB 3C2E                        cmp al, 0x2E            
   694 000014CD 7408                        je resume_game
   695 000014CF 3C12                    	cmp al ,0x12
   696 000014D1 0F848003                	je handle_endgame
   697                                      
   698                                  	
   699 000014D5 EBF2                        jmp .pause_loop         
   700                                  
   701                                  resume_game:
   702 000014D7 C606[1700]00                mov byte [flag], 0  
   703                                  
   704                                   
   705 000014DC EB1D                        JMP out_kbisr           
   706                                  
   707                                  
   708                                  
   709                                  
   710                                  
   711                                     
   712                                     
   713                                  wait_for_retrace:
   714 000014DE BADA03                      mov dx, 0x03DA        ; VGA status register
   715                                  .wait_not_retrace:
   716 000014E1 EC                          in al, dx
   717 000014E2 A808                        test al, 0x08         ; Check if in vertical retrace
   718 000014E4 74FB                        jz .wait_not_retrace  ; Loop until retrace starts
   719                                  
   720 000014E6 C3                          ret
   721                                  kbisr:
   722 000014E7 50                          push ax                
   723 000014E8 E460                    	in al,0x60
   724                                  	
   725                                  	
   726 000014EA 3C48                    	cmp al,0x48
   727 000014EC 74B4                    	je flap
   728                                  	
   729                                  	
   730                                  	
   731 000014EE 3C01                    	cmp al,0x01
   732 000014F0 74B5                    	je pause_screen
   733                                  	
   734                                  
   735 000014F2 3CC8                    cmp al,0xC8
   736 000014F4 7505                        jne out_kbisr
   737 000014F6 C606[7E1A]01            	mov byte [release_flag],1
   738                                  	
   739                                  	
   740                                  	
   741                                  	
   742                                  	
   743                                  out_kbisr:
   744                                  	
   745 000014FB B020                    	mov al,0x20
   746 000014FD E620                    	out 0x20,al
   747 000014FF 58                      	pop ax
   748 00001500 CF                      	iret
   749                                  	
   750                                  	
   751                                  	display_score:
   752 00001501 55                          PUSH BP 
   753 00001502 89E5                    	MOV BP,sp
   754 00001504 60                      	pusha
   755 00001505 B800B8                      mov ax, 0xB800         
   756 00001508 8EC0                        mov es, ax       
   757 0000150A BFD607                      mov di, 2006        
   758 0000150D BB0A00                      mov bx ,10 
   759 00001510 B90000                      mov cx,0
   760 00001513 A1[E610]                    mov ax,[score]
   761                                     
   762                                     nextdigit:
   763 00001516 31D2                        xor dx, dx 
   764 00001518 F7F3                       div bx 
   765 0000151A 80C230                     add dl,0x30
   766 0000151D 52                         push dx 
   767 0000151E 41                         inc cx
   768 0000151F 83F800                     cmp ax,0
   769 00001522 75F2                       jnz nextdigit
   770                                  
   771                                     
   772                                     nextpos:
   773 00001524 5A                         pop dx
   774 00001525 B670                       mov dh,0x70
   775 00001527 268915                     mov [es:di],dx
   776 0000152A 83C702                     add di,2
   777 0000152D E2F5                       loop nextpos
   778 0000152F 61                         popa
   779 00001530 5D                         pop bp
   780                                     
   781                                     
   782 00001531 C3                          ret
   783                                           
   784                                  
   785                                  highest_score_scr:
   786 00001532 06                          push es
   787 00001533 50                          push ax
   788 00001534 51                          push cx
   789 00001535 52                          push dx
   790 00001536 56                          push si
   791 00001537 57                          push di
   792                                  
   793                                      ; Set background and foreground color
   794 00001538 E8E5FC                      call background
   795                                  
   796                                      ; Display "Congratulations 🎉" message
   797 0000153B B80A00                      mov ax, 10
   798 0000153E 50                          push ax
   799 0000153F B81E00                      mov ax, 30
   800 00001542 50                          push ax
   801 00001543 B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   802 00001546 50                          push ax
   803 00001547 B8[FB10]                    mov ax, congrats_message
   804 0000154A 50                          push ax
   805 0000154B FF36[1111]                  push word [congrats_length]
   806 0000154F E817FD                      call print_message
   807                                  
   808                                      ; Display score message
   809 00001552 B80C00                      mov ax, 12
   810 00001555 50                          push ax
   811 00001556 B81E00                      mov ax, 30
   812 00001559 50                          push ax
   813 0000155A B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   814 0000155D 50                          push ax
   815 0000155E B8[1311]                    mov ax, score_message2
   816 00001561 50                          push ax
   817 00001562 FF36[2D11]                  push word [score_length2]
   818 00001566 E800FD                      call print_message
   819                                  
   820                                      ; Display "Press E to end, S to start again"
   821 00001569 B80E00                      mov ax, 14
   822 0000156C 50                          push ax
   823 0000156D B81E00                      mov ax, 30
   824 00001570 50                          push ax
   825 00001571 B87000                      mov ax, 0x70       ; Attribute for foreground and background color
   826 00001574 50                          push ax
   827 00001575 B8[2F11]                    mov ax, prompt_message2
   828 00001578 50                          push ax
   829 00001579 FF36[4211]                  push word [prompt_length2]
   830 0000157D E8E9FC                      call print_message
   831                                  
   832                                     h1:
   833 00001580 E8FBFD                      call wait_for_key
   834 00001583 3C45                        cmp al, 'E'
   835 00001585 0F84B802                    je endgame
   836 00001589 3C65                        cmp al, 'e'
   837 0000158B 0F84B202                    je endgame
   838 0000158F 3C53                        cmp al, 'S'
   839 00001591 0F844A02                    je game_start
   840 00001595 3C73                        cmp al, 's'
   841 00001597 0F844402                    je game_start
   842 0000159B EBE3                        jmp h1    
   843                                  	
   844                                  	
   845 0000159D 5F                          pop di
   846 0000159E 5E                          pop si
   847 0000159F 5A                          pop dx
   848 000015A0 59                          pop cx
   849 000015A1 58                          pop ax
   850 000015A2 07                          pop es
   851 000015A3 C3                          ret
   852                                  
   853                                  print_current_score:
   854 000015A4 50                          push ax
   855 000015A5 53                          push bx
   856 000015A6 51                          push cx
   857 000015A7 52                          push dx
   858 000015A8 06                          push es
   859 000015A9 57                          push di
   860                                  
   861 000015AA B800B8                      mov ax, 0xb800         ; Video memory segment
   862 000015AD 8EC0                        mov es, ax
   863 000015AF 31FF                        xor di, di             ; Clear DI
   864                                  	
   865 000015B1 B050                    	 mov al, 80             ; Number of columns per row
   866 000015B3 B301                    	mov bl,1
   867 000015B5 F6E3                        mul bl                 ; Multiply by row number (2nd row)
   868 000015B7 83C018                      add ax, 24             ; Add column number (30th column)
   869 000015BA D1E0                        shl ax, 1              ; Multiply by 2 (each character is 2 bytes)
   870 000015BC 89C7                        mov di, ax             ; Set DI to the correct position
   871 000015BE BE[2B10]                	mov si, sc             ; Address of "score" string
   872                                    .print_score_word:
   873 000015C1 AC                          lodsb                  ; Load next character from the string
   874 000015C2 3C00                        cmp al, 0              ; Check if end of string (null terminator)
   875 000015C4 7405                        je hell        ; If null terminator, jump to print number
   876 000015C6 B460                        mov ah, 0x60           ; Attribute byte (black background, white text)
   877 000015C8 AB                          stosw                  ; Store character and attribute at [ES:DI]
   878 000015C9 EBF6                        jmp .print_score_word   ; Repeat for the next character
   879                                  	
   880                                  	
   881                                  hell:
   882 000015CB B050                        mov al, 80             ; Number of columns per row
   883 000015CD B301                    	mov bl,1
   884 000015CF F6E3                        mul bl                 ; Multiply by row number (2nd row)
   885 000015D1 83C01E                      add ax, 30             ; Add column number (30th column)
   886 000015D4 D1E0                        shl ax, 1              ; Multiply by 2 (each character is 2 bytes)
   887 000015D6 89C7                        mov di, ax             ; Set DI to the correct position
   888                                  
   889 000015D8 A1[E610]                    mov ax, [score]        ; Load current score
   890 000015DB E81000                      call int_to_str        ; Convert score to string
   891                                  
   892 000015DE B90500                      mov cx, 5              ; Length of the score string
   893                                  print_loop:
   894 000015E1 AC                          lodsb                  ; Load next character from score string
   895 000015E2 B460                        mov ah, 0x60           ; Attribute byte (black background, white text)
   896 000015E4 AB                          stosw                  ; Store character and attribute at [ES:DI]
   897 000015E5 E2FA                        loop print_loop        ; Repeat for all characters
   898                                  
   899 000015E7 5F                          pop di
   900 000015E8 07                          pop es
   901 000015E9 5A                          pop dx
   902 000015EA 59                          pop cx
   903 000015EB 5B                          pop bx
   904 000015EC 58                          pop ax
   905 000015ED C3                          ret
   906                                  
   907                                  int_to_str:
   908                                      ; Converts the integer in AX to a string in DS:SI
   909                                      ; Assumes AX contains the integer and DS:SI points to the buffer
   910 000015EE 50                          push ax
   911 000015EF 53                          push bx
   912 000015F0 51                          push cx
   913 000015F1 52                          push dx
   914                                  
   915 000015F2 B90000                      mov cx, 0              ; Initialize digit count
   916 000015F5 BB0A00                      mov bx, 10             ; Divisor for decimal conversion
   917                                  
   918                                  .convert_loop:
   919 000015F8 31D2                        xor dx, dx             ; Clear DX
   920 000015FA F7F3                        div bx                 ; Divide AX by 10, quotient in AX, remainder in DX
   921 000015FC 80C230                      add dl, '0'            ; Convert remainder to ASCII
   922 000015FF 52                          push dx                ; Push remainder onto stack
   923 00001600 41                          inc cx                 ; Increment digit count
   924 00001601 85C0                        test ax, ax            ; Check if quotient is zero
   925 00001603 75F3                        jnz .convert_loop      ; Repeat if quotient is not zero
   926                                  
   927 00001605 BE[2300]                    mov si, buffer         ; Load buffer address
   928 00001608 01CE                        add si, cx             ; Move SI to the end of the string
   929 0000160A C60400                      mov byte [si], 0       ; Null-terminate the string
   930                                  
   931                                  .pop_digits:
   932 0000160D 5A                          pop dx                 ; Pop digit from stack
   933 0000160E 4E                          dec si                 ; Move SI back
   934 0000160F 8814                        mov [si], dl           ; Store digit in buffer
   935 00001611 E2FA                        loop .pop_digits       ; Repeat for all digits
   936                                  
   937 00001613 5A                          pop dx
   938 00001614 59                          pop cx
   939 00001615 5B                          pop bx
   940 00001616 58                          pop ax
   941 00001617 C3                          ret
   942                                  print:
   943                                             
   944                                  
   945 00001618 BA[2B10]                    mov dx, sc 	
   946 0000161B B409                        mov ah, 9 		
   947 0000161D CD21                        int 0x21 
   948                                  	
   949 0000161F C3                      	ret
   950                                  
   951                                  
   952                                  
   953                                  game_loop:
   954                                  game:
   955                                     
   956 00001620 E860FD                      call delay
   957 00001623 E85DFD                      call delay
   958 00001626 E85AFD                      call delay
   959                                      
   960 00001629 E8B2FE                      call wait_for_retrace
   961 0000162C E817FB                  	call update_screen
   962                                  	
   963                                  
   964 0000162F E8EEFB                      call background
   965 00001632 E88FFC                      call ground
   966 00001635 E861FC                      call uped
   967                                  	
   968 00001638 E869FF                  call print_current_score
   969                                         
   970                                  	   
   971                                      ; mov ah, 01h            
   972                                      ; int 16h
   973                                      ; jz no_key_pressed      
   974                                  
   975                                     
   976                                      ; mov ah, 00h            
   977                                      ; int 16h
   978                                      ; cmp al, 'U'
   979                                      ; je flap 
   980                                  
   981                                  	
   982                                  
   983                                  
   984                                  	
   985                                   
   986                                      
   987 0000163B 832E[0300]02                sub word [right], 2
   988                                  	
   989 00001640 813E[0300]E001              cmp word [right], 480    ;;;;;LEFT CORNER
   990 00001646 7D0A                        jge skip1
   991 00001648 FF06[E610]                   INC WORD [score]
   992 0000164C C706[0300]7002              mov word [right], 624
   993                                  
   994                                  skip1:
   995 00001652 A1[0300]                    mov ax, [right]
   996 00001655 50                          push ax
   997                                  	
   998 00001656 B80400                  	mov ax,4
   999 00001659 50                      	push ax
  1000                                      
  1001 0000165A E8ECFC                      call RECTANGLE
  1002                                  	
  1003                                  	
  1004                                  	
  1005                                  
  1006 0000165D 832E[0500]02                sub word [mid], 2
  1007 00001662 813E[0500]E001              cmp word [mid], 480
  1008 00001668 7D0A                        jge skip2
  1009 0000166A FF06[E610]              	INC WORD [score]
  1010 0000166E C706[0500]7002              mov word [mid], 624
  1011                                  
  1012                                  skip2:
  1013 00001674 A1[0500]                    mov ax, [mid]
  1014 00001677 50                          push ax
  1015                                  	
  1016 00001678 B80600                  	mov ax,6
  1017 0000167B 50                      	push ax
  1018                                     
  1019 0000167C E8CAFC                      call RECTANGLE
  1020                                  
  1021 0000167F 832E[0700]02                sub word [left], 2
  1022 00001684 813E[0700]E001              cmp word [left], 480
  1023 0000168A 7D0A                        jge skip3
  1024 0000168C FF06[E610]              	INC WORD [score]
  1025 00001690 C706[0700]7002              mov word [left], 624
  1026                                  
  1027                                  skip3:
  1028 00001696 A1[0700]                    mov ax, [left]
  1029 00001699 50                          push ax
  1030                                  	
  1031 0000169A B80300                  	mov ax,3
  1032 0000169D 50                      	push ax
  1033                                     
  1034 0000169E E8A8FC                      call RECTANGLE
  1035                                  
  1036 000016A1 832E[0900]02                sub word [right_b], 2
  1037 000016A6 813E[0900]400B              cmp word [right_b], 2880
  1038 000016AC 7D06                        jge skip4
  1039                                  	
  1040 000016AE C706[0900]D00B              mov word [right_b], 3024
  1041                                  
  1042                                  skip4:
  1043 000016B4 A1[0900]                    mov ax, [right_b]
  1044 000016B7 50                          push ax
  1045 000016B8 B80200                  	mov ax,2
  1046 000016BB 50                      	push ax
  1047                                     
  1048 000016BC E88AFC                      call RECTANGLE
  1049                                  
  1050 000016BF 832E[0B00]02                sub word [mid_b], 2
  1051 000016C4 813E[0B00]A00A              cmp word [mid_b], 2720
  1052 000016CA 7D06                        jge skip5
  1053 000016CC C706[0B00]300B              mov word [mid_b], 2864
  1054                                  
  1055                                  skip5:
  1056 000016D2 A1[0B00]                    mov ax, [mid_b]
  1057 000016D5 50                          push ax
  1058 000016D6 B80300                  	mov ax,3
  1059 000016D9 50                      	push ax
  1060                                      
  1061 000016DA E86CFC                      call RECTANGLE
  1062                                  
  1063 000016DD 832E[0D00]02                sub word [left_b], 2
  1064 000016E2 813E[0D00]6009              cmp word [left_b], 2400
  1065 000016E8 7D06                        jge skip6
  1066 000016EA C706[0D00]F009              mov word [left_b], 2544
  1067                                  
  1068                                  skip6:
  1069 000016F0 A1[0D00]                    mov ax, [left_b]
  1070 000016F3 50                          push ax
  1071                                  	
  1072 000016F4 B80500                  	mov ax,5
  1073 000016F7 50                      	push ax
  1074                                     
  1075 000016F8 E84EFC                      call RECTANGLE
  1076                                  	
  1077                                  	no_key_pressed:
  1078                                  	 
  1079 000016FB E88EFC                  	call update_bird_position
  1080 000016FE E8E4FA                      call clear_bird
  1081 00001701 E859FA                     call draw_bird
  1082                                  	
  1083                                  	
  1084 00001704 803E[1A00]01            	cmp byte[ground_flag],1
  1085 00001709 0F84E9FC                	je endscreen
  1086                                  	
  1087 0000170D 803E[8B1A]01            	cmp byte[collision_flag],1
  1088 00001712 0F84E0FC                	je endscreen
  1089                                      
  1090                                  	
  1091                                  	
  1092                                  
  1093 00001716 803E[1800]01               cmp byte[flag2],1
  1094                                     
  1095 0000171B 0F84D7FC                	je endscreen
  1096 0000171F E9FEFE                      jmp game
  1097                                  
  1098                                  
  1099                                  
  1100                                  start:
  1101                                  	
  1102                                  	
  1103                                  	                    ; Re-enable interrupts
  1104 00001722 E8E2FA                      call clear
  1105 00001725 E8F8FA                      call background
  1106                                  	
  1107                                  	
  1108                                  	
  1109 00001728 B402                    	mov ah, 02h     
  1110 0000172A B700                        mov bh,  0        
  1111 0000172C B602                        mov dh, 2         
  1112 0000172E B21B                        mov dl, 27        
  1113 00001730 CD10                        int 10h           
  1114                                  
  1115 00001732 BA[C30F]                    mov dx, gamename 	
  1116 00001735 B409                        mov ah, 9 		
  1117 00001737 CD21                        int 0x21 
  1118                                  	
  1119                                  	
  1120 00001739 B402                        mov ah, 02h     
  1121 0000173B B700                        mov bh,  0        
  1122 0000173D B603                        mov dh, 3         
  1123 0000173F B21B                        mov dl, 27        
  1124 00001741 CD10                        int 10h           
  1125                                  
  1126 00001743 BA[1B10]                    mov dx, smester 	
  1127 00001746 B409                        mov ah, 9 		
  1128 00001748 CD21                        int 0x21 
  1129                                  	
  1130 0000174A B402                    	mov ah, 02h     
  1131 0000174C B700                        mov bh,  0        
  1132 0000174E B604                        mov dh, 4        
  1133 00001750 B214                        mov dl, 20        
  1134 00001752 CD10                        int 10h           
  1135                                  
  1136 00001754 BA[D30F]                    mov dx, name1 	
  1137 00001757 B409                        mov ah, 9 		
  1138 00001759 CD21                        int 0x21 
  1139                                  	
  1140                                  	
  1141                                  	
  1142 0000175B B402                        mov ah, 02h       
  1143 0000175D B700                        mov bh,  0        
  1144 0000175F B605                        mov dh, 5        
  1145 00001761 B214                        mov dl, 20        
  1146 00001763 CD10                        int 10h           
  1147                                  
  1148 00001765 BA[F70F]                    mov dx, name2 	
  1149 00001768 B409                        mov ah, 9 		
  1150 0000176A CD21                        int 0x21 
  1151                                  	
  1152 0000176C B520                    	mov ch, 32
  1153 0000176E B401                        mov ah, 1
  1154 00001770 CD10                        int 10h
  1155                                  	
  1156 00001772 E809FC                  	call wait_for_key
  1157                                  	
  1158                                  	
  1159                                  	wapis:
  1160                                  	
  1161 00001775 E8A8FA                  	call background
  1162                                  	
  1163                                  	
  1164 00001778 B80C00                      mov ax, 12
  1165 0000177B 50                          push ax
  1166 0000177C B81900                      mov ax, 25
  1167 0000177F 50                          push ax
  1168 00001780 B87000                      mov ax, 0x70       
  1169 00001783 50                          push ax
  1170 00001784 B8[3310]                    mov ax, message1
  1171 00001787 50                          push ax
  1172 00001788 FF36[4910]                  push word [length1]
  1173 0000178C E8AAFA                      call printstr
  1174 0000178F 58                          pop ax
  1175                                      
  1176                                      
  1177 00001790 B80D00                      mov ax, 13
  1178 00001793 50                          push ax
  1179 00001794 B81000                      mov ax, 16
  1180 00001797 50                          push ax
  1181 00001798 B87000                      mov ax, 0x70       
  1182 0000179B 50                          push ax
  1183 0000179C B8[4B10]                    mov ax, message2
  1184 0000179F 50                          push ax
  1185 000017A0 FF36[7110]                  push word [length2]
  1186 000017A4 E8C2FA                      call print_message
  1187 000017A7 B80E00                  	 mov ax, 14
  1188 000017AA 50                          push ax
  1189 000017AB B81800                      mov ax, 24
  1190 000017AE 50                          push ax
  1191 000017AF B87000                      mov ax, 0x70       
  1192 000017B2 50                          push ax
  1193 000017B3 B8[7310]                    mov ax, msg
  1194 000017B6 50                          push ax
  1195 000017B7 FF36[9210]                  push word [len]
  1196 000017BB E8ABFA                      call print_message
  1197                                  	
  1198                                  	
  1199                                  	
  1200                                  
  1201                                  start_game:
  1202 000017BE E8BDFB                      call wait_for_key
  1203 000017C1 3C53                        cmp al, 'S'        
  1204 000017C3 741A                        je game_start
  1205 000017C5 3C73                        cmp al, 's'
  1206 000017C7 7416                        je game_start
  1207 000017C9 3C45                        cmp al, 'E'
  1208 000017CB 7474                        je endgame
  1209 000017CD 3C65                        cmp al, 'e'
  1210 000017CF 7470                        je endgame
  1211 000017D1 3C49                    	CMP al,'I'
  1212 000017D3 0F84D000                	je show_instructions
  1213 000017D7 3C69                    	CMP al,'i'
  1214 000017D9 0F84CA00                	je show_instructions
  1215 000017DD EBDF                        jmp start_game    
  1216                                  
  1217                                  game_start:
  1218                                  
  1219                                  
  1220                                  
  1221                                    
  1222 000017DF E83EFA                      call background
  1223 000017E2 E8B4FA                  	call uped
  1224 000017E5 E8DCFA                  	call ground
  1225 000017E8 A1[0300]                	mov  ax, [right]
  1226 000017EB 50                          push ax
  1227 000017EC B80400                  	mov ax,4
  1228 000017EF 50                      	push ax
  1229                                  	
  1230 000017F0 E856FB                  	call RECTANGLE
  1231                                  	
  1232                                  	
  1233                                  	
  1234 000017F3 A1[0900]                	 mov ax, [right_b] 
  1235 000017F6 50                          push ax
  1236 000017F7 B80200                  	mov ax,2
  1237 000017FA 50                      	push ax
  1238 000017FB E84BFB                  	call RECTANGLE
  1239                                  
  1240                                  	
  1241 000017FE E85CF9                  	call draw_bird
  1242                                  	
  1243 00001801 E87AFB                  	CALL wait_for_key
  1244                                  	
  1245                                  	
  1246                                  	
  1247 00001804 31C0                    	xor ax, ax
  1248 00001806 8EC0                    	mov es, ax
  1249 00001808 26A12400                	mov ax,[es:9*4]
  1250 0000180C A3[0F00]                	mov [oldisr],ax
  1251 0000180F 26A12600                	mov ax,[es:9*4+2]
  1252 00001813 A3[1100]                	mov [oldisr+2],ax
  1253                                  	
  1254                                  	
  1255 00001816 26A12000                	mov ax, [es:8*4]          ; Save INT 8 old ISR offset
  1256 0000181A A3[1300]                mov [oldisr2], ax
  1257 0000181D 26A12200                mov ax, [es:8*4+2]        ; Save INT 8 old ISR segment
  1258 00001821 A3[1500]                mov [oldisr2+2], ax
  1259                                  
  1260                                  	
  1261 00001824 FA                      	cli                       
  1262 00001825 26C7062400[E714]        	mov word [es:9*4], kbisr  
  1263 0000182C 268C0E2600              	mov [es:9*4+2], cs   
  1264                                  
  1265 00001831 26C7062000[6018]        	mov word[es:8*4],timer
  1266 00001838 268C0E2200              	mov [es:8*4+2],cs
  1267                                  
  1268                                  
  1269                                  	
  1270 0000183D FB                      	sti 
  1271                                  	
  1272                                  	
  1273                                  	
  1274                                  	
  1275                                  	
  1276 0000183E E9DFFD                  	jmp game_loop
  1277                                  
  1278                                  endgame:
  1279                                  
  1280 00001841 B020                    mov al,0x20
  1281 00001843 E620                    out 0x20,al	
  1282 00001845 E8BFF9                  call clear
  1283 00001848 B506                    	mov ch, 6
  1284 0000184A B107                    	mov cl, 7
  1285 0000184C B401                    	mov ah, 1
  1286 0000184E CD10                    	int 10h
  1287                                  	
  1288 00001850 B8004C                      mov ax, 0x4c00
  1289 00001853 CD21                        int 0x21          
  1290                                  	
  1291                                  	
  1292                                  handle_endgame:
  1293 00001855 E809FC                      call unhook_keyboard_isr  
  1294 00001858 E81BFC                      call unhook_timer_isr  
  1295 0000185B E8A9F9                  	call clear
  1296 0000185E EBE1                        jmp endgame
  1297                                  	
  1298                                  	
  1299                                  timer:
  1300 00001860 50                          push ax
  1301 00001861 53                          push bx
  1302 00001862 51                          push cx
  1303 00001863 52                          push dx
  1304                                  
  1305 00001864 2EA0[1700]                  mov al, [cs:flag]
  1306 00001868 3C01                        cmp al, 1
  1307 0000186A 741D                        je timer_done         
  1308                                     
  1309 0000186C 2EFF06[7F1A]                inc word [cs:tick_count]
  1310                                  
  1311 00001871 2E833E[7F1A]12              cmp word [cs:tick_count], 18
  1312 00001877 7510                        jne timer_done            
  1313                                      
  1314                                     
  1315 00001879 2EC706[7F1A]0000            mov word [cs:tick_count], 0
  1316 00001880 2EC606[7E1A]01              mov byte [cs:release_flag], 1
  1317 00001886 E803FB                      CALL update_bird_position
  1318                                  
  1319                                  timer_done:
  1320                                     
  1321 00001889 B020                        mov al, 0x20
  1322 0000188B E620                        out 0x20, al
  1323                                  
  1324                                      
  1325 0000188D 5A                          pop dx
  1326 0000188E 59                          pop cx
  1327 0000188F 5B                          pop bx
  1328 00001890 58                          pop ax
  1329                                  
  1330 00001891 CF                          iret
  1331                                  	
  1332                                  	
  1333                                  print_string:
  1334 00001892 B800B8                  mov ax,0xB800
  1335 00001895 8EC0                    mov es, ax
  1336                                      
  1337 00001897 AC                          lodsb                     
  1338 00001898 3C00                        cmp al, 0                 
  1339 0000189A 740A                        je end_print              
  1340 0000189C B40E                        mov ah, 0x0E              
  1341 0000189E B700                        mov bh, 0                 
  1342 000018A0 B314                        mov bl, 0x14              
  1343 000018A2 CD10                        int 0x10                  
  1344 000018A4 EBEC                        jmp print_string          
  1345                                  
  1346                                  end_print:
  1347 000018A6 C3                          ret
  1348                                  
  1349                                  show_instructions:
  1350                                      
  1351 000018A7 E876F9                      call background
  1352                                  
  1353 000018AA E86200                     call move_to_next_line
  1354                                     
  1355                                  
  1356                                      
  1357 000018AD BE[2119]                    mov si, welcome_msg      
  1358 000018B0 E8DFFF                      call print_string        
  1359 000018B3 E85900                      call move_to_next_line   
  1360                                  
  1361                                      
  1362 000018B6 BE[3E19]                    mov si, line_1_msg
  1363 000018B9 E8D6FF                      call print_string
  1364 000018BC E85000                      call move_to_next_line
  1365                                  
  1366 000018BF BE[6A19]                    mov si, line_2_msg
  1367 000018C2 E8CDFF                      call print_string
  1368 000018C5 E84700                      call move_to_next_line
  1369                                  
  1370 000018C8 BE[9219]                    mov si, line_3_msg
  1371 000018CB E8C4FF                      call print_string
  1372 000018CE E83E00                      call move_to_next_line
  1373                                  
  1374 000018D1 BE[BD19]                    mov si, line_4_msg
  1375 000018D4 E8BBFF                      call print_string
  1376 000018D7 E83500                      call move_to_next_line
  1377                                  
  1378 000018DA BE[DD19]                    mov si, line_5_msg
  1379 000018DD E8B2FF                      call print_string
  1380 000018E0 E82C00                      call move_to_next_line
  1381                                  
  1382 000018E3 BE[041A]                    mov si, line_6_msg
  1383 000018E6 E8A9FF                      call print_string
  1384 000018E9 E82300                      call move_to_next_line
  1385                                  
  1386 000018EC BE[211A]                    mov si, line_7_msg
  1387 000018EF E8A0FF                      call print_string
  1388 000018F2 E81A00                      call move_to_next_line
  1389                                  
  1390 000018F5 BE[451A]                    mov si, line_8_msg
  1391 000018F8 E897FF                      call print_string
  1392 000018FB E81100                  	CALL move_to_next_line
  1393 000018FE BE[601A]                	mov si, line_9_msg
  1394 00001901 E88EFF                      call print_string
  1395                                  	
  1396 00001904 C606[7D1A]08            	mov byte[counter],8
  1397                                  
  1398                                      
  1399 00001909 E872FA                      call wait_for_key
  1400                                  
  1401                                      
  1402 0000190C E966FE                      jmp  wapis
  1403                                  	
  1404                                  
  1405                                  
  1406                                                       
  1407                                  
  1408                                  
  1409                                  
  1410                                  
  1411                                  
  1412                                  
  1413                                  move_to_next_line:
  1414                                  	
  1415 0000190F B402                        mov ah, 0x02            
  1416 00001911 B700                        mov bh, 0             
  1417 00001913 8A36[7D1A]                  mov dh, [counter]       
  1418 00001917 B214                        mov dl, 20               
  1419 00001919 8006[7D1A]01            	add byte[counter],1
  1420 0000191E CD10                        int 0x10                
  1421 00001920 C3                          ret
  1422                                  	
  1423                                  
  1424                                  
  1425                                    
  1426                                  	
  1427                                  	
  1428                                  	
  1429                                  	
  1430 00001921 57454C434F4D452054-     welcome_msg db 'WELCOME TO FLAPPY BIRD GAME!', 0
  1430 0000192A 4F20464C4150505920-
  1430 00001933 424952442047414D45-
  1430 0000193C 2100               
  1431 0000193E 312E20505245535320-     line_1_msg db '1. PRESS up arrow key FLAP AND GAIN HEIGHT.', 0
  1431 00001947 7570206172726F7720-
  1431 00001950 6B657920464C415020-
  1431 00001959 414E44204741494E20-
  1431 00001962 4845494748542E00   
  1432 0000196A 322E2041564F494420-     line_2_msg db '2. AVOID PIPES OR GROUND TO STAY ALIVE.', 0
  1432 00001973 5049504553204F5220-
  1432 0000197C 47524F554E4420544F-
  1432 00001985 205354415920414C49-
  1432 0000198E 56452E00           
  1433 00001992 332E20594F55522053-     line_3_msg db '3. YOUR SCORE INCREASES AS YOU PASS PIPES.', 0
  1433 0000199B 434F524520494E4352-
  1433 000019A4 454153455320415320-
  1433 000019AD 594F55205041535320-
  1433 000019B6 50495045532E00     
  1434 000019BD 342E20505245535320-     line_4_msg db '4. PRESS ESC TO PAUSE THE GAME.', 0
  1434 000019C6 45534320544F205041-
  1434 000019CF 555345205448452047-
  1434 000019D8 414D452E00         
  1435 000019DD 352E20505245535320-     line_5_msg db '5. PRESS I TO VIEW INSTRUCTIONS AGAIN.', 0
  1435 000019E6 4920544F2056494557-
  1435 000019EF 20494E535452554354-
  1435 000019F8 494F4E532041474149-
  1435 00001A01 4E2E00             
  1436 00001A04 362E20505245535320-     line_6_msg db '6. PRESS E TO exit THE GAME.', 0
  1436 00001A0D 4520544F2065786974-
  1436 00001A16 205448452047414D45-
  1436 00001A1F 2E00               
  1437 00001A21 372E2054525920544F-     line_7_msg db '7. TRY TO SCORE THE HIGHEST POINTS!', 0
  1437 00001A2A 2053434F5245205448-
  1437 00001A33 452048494748455354-
  1437 00001A3C 20504F494E54532100 
  1438 00001A45 2D3E20474F4F44204C-     line_8_msg db '-> GOOD LUCK AND HAVE FUN!', 0
  1438 00001A4E 55434B20414E442048-
  1438 00001A57 4156452046554E2100 
  1439 00001A60 2D3E20507265737320-     line_9_msg db '-> Press any key to continue', 0
  1439 00001A69 616E79206B65792074-
  1439 00001A72 6F20636F6E74696E75-
  1439 00001A7B 6500               
  1440                                  
  1441                                  
  1442 00001A7D 08                      counter: db 8
  1443 00001A7E 00                      release_flag : db 0
  1444 00001A7F 0000                    tick_count : dw 0
  1445                                  
  1446                                  
  1447 00001A81 000000000000000000-     Save_Ground: dw 0,0,0,0,0
  1447 00001A8A 00                 
  1448                                  
  1449                                  
  1450 00001A8B 00                      collision_flag: db 0;
