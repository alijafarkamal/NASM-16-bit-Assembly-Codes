     1                                  ; ; [org 0x0100]
     2                                  		; ; mov ax, 0xb800
     3                                  		; ; mov es, ax					; point es to video base
     4                                  		; ; jmp start
     5                                  		
     6                                  ; ; nextloc:	
     7                                  			; ; mov word [es:di], 0x0720	; clear next char on screen
     8                                  			; ; add di, 2					; move to next screen location
     9                                  			; ; cmp di, 4000				; has the whole screen cleared
    10                                  			; ; jne nextloc					; if no clear next position
    11                                  			; ; mov di,0
    12                                  ; ; MovingStar:
    13                                  	; ; mov word[es:di],0x8C2A
    14                                  	; ; call delay
    15                                  	; ; mov word[es:di],0x0720
    16                                  	; ; add di,bx
    17                                  	; ; cmp di,si
    18                                  	; ; jz out
    19                                  	; ; ret
    20                                  	
    21                                  ; ; MovingStar1:
    22                                  	; ; mov word[es:di],0x8A2A
    23                                  	; ; call delay
    24                                  	; ; mov word[es:di],0x0720
    25                                  	; ; sub di,bx
    26                                  	; ; cmp di,si
    27                                  	; ; jz out1
    28                                  	; ; ret
    29                                  ; ; delay:      push cx
    30                                  			; ; mov cx, 0xFFFF
    31                                  ; ; loop3:		loop loop3
    32                                  			; ; mov cx, 0xFFFF
    33                                  ; ; loop4:		loop loop4
    34                                  			; ; mov cx, 0xFFFF
    35                                  ; ; loop2:		loop loop2
    36                                  			; ; mov cx, 0xFFFF
    37                                  ; ; loop5:		loop loop5
    38                                  			; ; pop cx
    39                                  			; ; ret
    40                                  ; ; start:
    41                                  		; ; mov di,0
    42                                  		; ; mov cx,80
    43                                  		; ; mov bx,2
    44                                  		; ; mov si,158
    45                                  		; ; call nextloc
    46                                  ; ; next: 
    47                                  			; ; mov ax, 0xb800 					; load video base in ax
    48                                  			; ; mov es, ax 					; point es to video base
    49                                  			; ; mov di, 0 					; point di to top left column
    50                                  									; ; es:di pointint to --> 0xB800:0000 (B8000)
    51                                  
    52                                  ; ; nextchar: 	
    53                                  		; ; mov word [es:di], 0x0720 				; clear next char on screen
    54                                  		; ; add di, 2 						; move to next screen location
    55                                  		; ; cmp di, 4000 						; has the whole screen cleared
    56                                  		; ; jne nextchar 
    57                                  		; ; ret 
    58                                  ; ; start:	
    59                                  		; ; call next
    60                                  		; ; mov di,1640
    61                                  		; ; mov byte[es:di],0x2A00
    62                                  		; ; mov ax,0x8434
    63                                  		; ; mov bl,0x85
    64                                  		; ; div bl
    65                                  		; ; mov ax,0xffff
    66                                  		; ; mov dx,0x0100
    67                                  		; ; mov bl,0x3
    68                                  		; ; div bl
    69                                  ; ; LOOP1:
    70                                  		; ; call MovingStar
    71                                  		; ; loop LOOP1
    72                                  ; ; out:
    73                                  		; ; mov cx,24	
    74                                  		; ; mov bx,160
    75                                  		; ; mov si,4000
    76                                  ; ; LOOP2:
    77                                  		; ; call MovingStar
    78                                  		; ; loop LOOP2
    79                                  		; ; mov cx,80
    80                                  		; ; mov bx,2
    81                                  		; ; mov si,3840
    82                                  ; ; LOOP3:
    83                                  		; ; call MovingStar1
    84                                  		; ; loop LOOP3
    85                                  ; ; out1:
    86                                  		; ; mov cx,24
    87                                  		; ; mov bx,160
    88                                  		; ; mov si,160
    89                                  ; ; LOOP4:
    90                                  	; ; call MovingStar1
    91                                  	; ; loop LOOP4
    92                                  ; ; exit:
    93                                  		; ; mov di,2
    94                                  		; ; mov cx,80
    95                                  		; ; mov bx,2
    96                                  		; ; mov si,158
    97                                  ; ; jmp start1
    98                                  ; ; mov ax, 0x4c00 ; terminate program
    99                                  ; ; int 0x21
   100                                  ; ; [org 0x0100]
   101                                  ; ; jmp start
   102                                  ; ; clrscr:		push es
   103                                  			; ; push ax
   104                                  			; ; push di
   105                                  
   106                                  			; ; mov ax, 0xb800
   107                                  			; ; mov es, ax					; point es to video base
   108                                  			; ; mov di, 0					; point di to top left column
   109                                  
   110                                  ; ; nextloc:	mov word [es:di], 0x0720	; clear next char on screen
   111                                  			; ; add di, 2					; move to next screen location
   112                                  			; ; cmp di, 4000				; has the whole screen cleared
   113                                  			; ; jne nextloc					; if no clear next position
   114                                  
   115                                  			; ; pop di
   116                                  			; ; pop ax
   117                                  			; ; pop es
   118                                  			; ; ret
   119                                  ; ; --------------------------------------------------------------------
   120                                  ; ; subroutine to print a string at top left of screen
   121                                  ; ; takes address of string and its length as parameters
   122                                  ; ; --------------------------------------------------------------------
   123                                  ; ; printstr:	push bp
   124                                  			; ; mov bp, sp
   125                                  			; ; push es
   126                                  			; ; push ax
   127                                  			; ; push cx
   128                                  			; ; push si
   129                                  			; ; push di
   130                                  
   131                                  			; ; mov ax, 0xb800
   132                                  			; ; mov es, ax				; point es to video base
   133                                  			; ; mov di, 160				; point di to top left column
   134                                  									; ; es:di --> b800:0000
   135                                  			; ; mov si, [bp+6]			; point si to string
   136                                  			; ; mov cx, [bp+4]			; load length of string in cx
   137                                  			; ; mov ah, 0x07			; normal attribute fixed in al
   138                                  			
   139                                  ; ; nextchar:	mov al, [si]			; load next char of string
   140                                  			; ; mov [es:di], ax			; show this char on screen
   141                                  			; ; add di, 2				; move to next screen location
   142                                  			; ; add si, 1				; move to next char in string			
   143                                  			; ; loop nextchar			; repeat the operation cx times
   144                                  			
   145                                  			; ; pop di
   146                                  			; ; pop si
   147                                  			; ; pop cx
   148                                  			; ; pop ax
   149                                  			; ; pop es
   150                                  			; ; pop bp
   151                                  			; ; ret 4
   152                                  ; ; makeborders:
   153                                  ; ; push bp
   154                                  ; ; mov bp,sp
   155                                  ; ; pusha
   156                                  ; ; mov cx,2000
   157                                  ; ; mov ax,0xB800
   158                                  ; ; mov es,ax
   159                                  ; ; mov ax,0x7000
   160                                  ; ; mov di,0
   161                                  ; ; loopa:
   162                                  	; ; add word[es:di],ax
   163                                  	; ; add di,2
   164                                  ; ; loop loopa
   165                                  ; ; mov cx,80
   166                                  ; ; mov di,0
   167                                  ; ; mov ah,0x70
   168                                  ; ; mov al,'A'
   169                                  ; ; rep stosw
   170                                  ; ; mov cx,78
   171                                  ; ; mov di,162
   172                                  ; ; mov al,'B'
   173                                  ; ; rep stosw
   174                                  
   175                                  ; ; mov cx,80
   176                                  ; ; mov di,160*24
   177                                  ; ; mov al,'A'
   178                                  ; ; rep stosw
   179                                  ; ; mov cx,78
   180                                  ; ; mov di,160*23+2
   181                                  ; ; mov al,'B'
   182                                  ; ; rep stosw
   183                                  ; ; mov cx,0xFFFF
   184                                  ; ; push es
   185                                  ; ; pop ds
   186                                  ; ; cld
   187                                  ; ; mov si,162
   188                                  ; ; mov di,160*23+2
   189                                  ; ; repe cmpsb
   190                                  ; ; mov ah,0xCC
   191                                  ; ; mov al,'L'
   192                                  ; ; mov [es:di],ax
   193                                  ; ; mov word[msg],di
   194                                  ; ; mov ah, 0x13
   195                                  ; ; mov al, 1c
   196                                  ; ; mov bh, 0
   197                                  ; ; mov bl, 7
   198                                  ; ; mov dx, 0x0A03
   199                                  ; ; mov cx, 5
   200                                  ; ; push cs
   201                                  ; ; pop es
   202                                  ; ; mov bp, msg
   203                                  ; ; int 0x10
   204                                  ; ; mov [es:di],
   205                                  	; ; popa
   206                                  ; ; pop bp
   207                                  ; ; rep stosw
   208                                  ; ; banomansingh:
   209                                  	; ; push bp
   210                                  ; ; mov bp,sp
   211                                  ; ; pusha
   212                                  	; ; mov ax,0xB800
   213                                  	; ; mov es,ax
   214                                  	; ; mov ah,0x07
   215                                  	; ; mov al,'$'
   216                                  	; ; mov di,160
   217                                  	; ; mov cx,20
   218                                  	; ; rep stosw
   219                                  	; ; mov cx,20
   220                                  	; ; mov di,1600
   221                                  	; ; rep stosw
   222                                  	; ; mov cx,8
   223                                  	; ; mov di,320
   224                                  ; ; loopa:
   225                                  	; ; stosw
   226                                  	; ; add di,158
   227                                  ; ; loop loopa
   228                                  
   229                                  ; ; mov ax,0xCC20
   230                                  ; ; mov di,322
   231                                  ; ; mov dx,1
   232                                  ; ; bigLoop:
   233                                  	; ; mov cx,18
   234                                  	; ; rep stosw
   235                                  	; ; add di,160
   236                                  	; ; sub di,36
   237                                  	; ; inc dx
   238                                  	; ; cmp dx,9
   239                                  	; ; je out
   240                                  ; ; jmp bigLoop
   241                                  ; ; out:
   242                                  	; ; popa
   243                                  	; ; pop bp
   244                                  ; ; ret
   245                                  ; ; start:
   246                                  	; ; call clrscr
   247                                  	; ; call banomansingh
   248                                  ; ; mov ah, 0x13
   249                                  ; ; mov al, 1
   250                                  ; ; mov bh, 0
   251                                  ; ; mov bl, 7
   252                                  ; ; mov dx, 0x0A03
   253                                  ; ; mov cx, 11
   254                                  ; ; push cs
   255                                  ; ; pop es
   256                                  ; ; mov bp, message
   257                                  ; ; int 0x10; service 13 - print string
   258                                  ; ; subservice 01 – update cursor
   259                                  ; ; output on page 0
   260                                  ; ; normal attrib
   261                                  ; ; row 10 column 3
   262                                  ; ; length of string
   263                                  	; ; call makeborders
   264                                  	; ; xor ax, ax
   265                                  	; ; mov es, ax
   266                                  	; ; load zero in es
   267                                  	; ; mov word [es:0*4], myisrfor0 ; store offset at n*4
   268                                  	; ; mov [es:0*4+2], cs
   269                                  	; ; store segment at n*4+2
   270                                  	; ; call genint0
   271                                  	; ; generate interrupt 0
   272                                  ; ; mov ax, 0x4c00
   273                                  ; ; int 0x21
   274                                  ; BITS 16
   275                                  ; ORG 0x100               ; COM file starts at 100h
   276                                  
   277                                  ; SECTION .data           ; Data section
   278                                  ; oldInt9 dw 0            ; To store old INT 9h vector
   279                                  ; videoMemoryStart dw 0xB800
   280                                  ; videoMemorySize dw 4000 ; 80 columns, 25 rows, 2 bytes per character
   281                                  
   282                                  ; SECTION .bss            ; Uninitialized data section
   283                                  ; screenBuffer resb 4000  ; Buffer to save the screen (80x25x2)
   284                                  
   285                                  ; SECTION .text           ; Code section
   286                                  ; start:
   287                                      ; ; Save old INT 9h vector
   288                                      ; cli                 ; Clear interrupts
   289                                      ; push ax
   290                                      ; push es
   291                                      ; mov ax, 0           ; Segment address of IVT
   292                                      ; mov es, ax
   293                                      ; mov ax, [es:9*4]    ; Offset of old INT 9h handler
   294                                      ; mov word [oldInt9], ax
   295                                      ; mov ax, [es:9*4+2]  ; Segment of old INT 9h handler
   296                                      ; mov word [oldInt9+2], ax
   297                                  
   298                                      ; ; Set new INT 9h vector to our ISR
   299                                      ; lea dx, newInt9Handler
   300                                      ; mov [es:9*4], dx
   301                                      ; mov [es:9*4+2], cs
   302                                  
   303                                      ; pop es
   304                                      ; pop ax
   305                                      ; sti                 ; Set interrupts
   306                                  
   307                                      ; ; Terminate but stay resident
   308                                      ; mov ax, 0x3100      ; AH = 31h, AL = 0 (return code)
   309                                      ; mov dx, 0x1000      ; DX = number of paragraphs to keep resident
   310                                      ; int 0x21            ; DOS interrupt
   311                                  
   312                                  ; newInt9Handler:
   313                                      ; pusha               ; Save all registers
   314                                      ; in al, 0x60         ; Read from the keyboard port
   315                                      ; cmp al, 0x2E        ; Scan code for 'c'
   316                                      ; je saveScreen
   317                                      ; cmp al, 0x2F        ; Scan code for 'v'
   318                                      ; je restoreScreen
   319                                      ; jmp callOldInt9     ; Not 'c' or 'v', call old ISR
   320                                  
   321                                  ; saveScreen:
   322                                      ; mov si, videoMemoryStart
   323                                      ; mov di, screenBuffer
   324                                      ; mov cx, videoMemorySize
   325                                      ; rep movsb           ; Save screen to buffer
   326                                      ; jmp endISR
   327                                  
   328                                  ; restoreScreen:
   329                                      ; mov si, screenBuffer
   330                                      ; mov di, videoMemoryStart
   331                                      ; mov cx, videoMemorySize
   332                                      ; rep movsb           ; Restore screen from buffer
   333                                  
   334                                  ; callOldInt9:
   335                                      ; call dword [oldInt9] ; Call old ISR
   336                                  
   337                                  ; endISR:
   338                                      ; popa                ; Restore all registers
   339                                      ; mov al, 0x20        ; EOI to PIC
   340                                      ; out 0x20, al
   341                                      ; iret                ; Return from interrupt
   342                                  
   343                                  ; SECTION .bss
   344                                  ; align 16
   345                                  ; screenBuffer resb 4000 ; 80*25*2 bytes (screen size 80x25, 2 bytes per character)
   346                                  
   347                                  ; SECTION .text
   348                                  ; global _start
   349                                  ; _start:
   350                                      ; ; Installation of the TSR part omitted for brevity
   351                                  
   352                                  ; ; Assume SaveScreen and RestoreScreen are implemented correctly somewhere
   353                                  [org 0x0100]
   354 00000000 E91E10                  jmp start
   355                                  
   356 00000003 00<rep FA0h>            buffer: times 4000 db 0
   357 00000FA3 00000000                oldisr: dd 0
   358                                  
   359                                  kbisr:
   360 00000FA7 50                          push ax
   361 00000FA8 06                          push es
   362 00000FA9 B800B8                      mov ax, 0xb800
   363 00000FAC 8EC0                        mov es, ax
   364 00000FAE E460                        in al, 0x60
   365 00000FB0 3C2E                        cmp al, 0x2E
   366 00000FB2 7505                        jne nextcmp2
   367 00000FB4 E83E00                      call saveScreen
   368 00000FB7 EB10                        jmp exit
   369                                  
   370                                  nextcmp2:
   371 00000FB9 3C2F                        cmp al, 0x2F
   372 00000FBB 7505                        jne nomatch
   373 00000FBD E84B00                      call restoreScreen
   374 00000FC0 EB00                        jmp nomatch
   375                                  
   376                                  nomatch:
   377 00000FC2 07                          pop es
   378 00000FC3 58                          pop ax
   379 00000FC4 2EFF2E[A30F]                jmp far [cs:oldisr]
   380                                  
   381                                  exit:
   382 00000FC9 B020                        mov al, 0x20
   383 00000FCB E620                        out 0x20, al
   384 00000FCD 07                          pop es
   385 00000FCE 58                          pop ax
   386 00000FCF CF                          iret
   387                                  
   388                                  start1:
   389                                  
   390                                  sleep:
   391 00000FD0 51                          push cx
   392 00000FD1 B9FFFF                      mov cx, 0xFFFF
   393                                  delay:
   394 00000FD4 E2FE                        loop delay
   395 00000FD6 59                          pop cx
   396 00000FD7 C3                          ret
   397                                  
   398                                  clrscr:
   399 00000FD8 06                          push es
   400 00000FD9 50                          push ax
   401 00000FDA 57                          push di
   402 00000FDB B800B8                      mov ax, 0xb800
   403 00000FDE 8EC0                        mov es, ax
   404 00000FE0 BF0000                      mov di, 0
   405                                  nextloc:
   406 00000FE3 26C7052007                  mov word [es:di], 0x0720
   407 00000FE8 83C702                      add di, 2
   408 00000FEB 81FFA00F                    cmp di, 4000
   409 00000FEF 75F2                        jne nextloc
   410 00000FF1 5F                          pop di
   411 00000FF2 58                          pop ax
   412 00000FF3 07                          pop es
   413 00000FF4 C3                          ret
   414                                  
   415                                  saveScreen:
   416 00000FF5 60                          pusha
   417 00000FF6 B9A00F                      mov cx, 4000
   418 00000FF9 B800B8                      mov ax, 0xb800
   419 00000FFC 8ED8                        mov ds, ax
   420 00000FFE 0E                          push cs
   421 00000FFF 07                          pop es
   422 00001000 BE0000                      mov si, 0
   423 00001003 BF[0300]                    mov di, buffer
   424 00001006 FC                          cld
   425 00001007 F3A4                        rep movsb
   426 00001009 61                          popa
   427 0000100A C3                          ret
   428                                  
   429                                  restoreScreen:
   430 0000100B 60                          pusha
   431 0000100C B9A00F                      mov cx, 4000
   432 0000100F B800B8                      mov ax, 0xb800
   433 00001012 8EC0                        mov es, ax
   434 00001014 0E                          push cs
   435 00001015 1F                          pop ds
   436 00001016 BE[0300]                    mov si, buffer
   437 00001019 BF0000                      mov di, 0
   438 0000101C FC                          cld
   439 0000101D F3A4                        rep movsb
   440 0000101F 61                          popa
   441 00001020 C3                          ret
   442                                  
   443                                  start:
   444 00001021 31C0                        xor ax, ax
   445 00001023 8EC0                        mov es, ax
   446 00001025 26A12400                    mov ax, [es:9*4]
   447 00001029 A3[A30F]                    mov [oldisr], ax
   448 0000102C 26A12600                    mov ax, [es:9*4+2]
   449 00001030 A3[A50F]                    mov [oldisr+2], ax
   450 00001033 FA                          cli
   451 00001034 26C7062400[A70F]            mov word [es:9*4], kbisr
   452 0000103B 268C0E2600                  mov [es:9*4+2], cs
   453 00001040 FB                          sti
   454 00001041 BA[2110]                    mov dx, start
   455 00001044 83C20F                      add dx, 15
   456 00001047 B104                        mov cl, 4
   457 00001049 D3EA                        shr dx, cl
   458 0000104B B80031                      mov ax, 0x3100
   459 0000104E CD21                        int 0x21
