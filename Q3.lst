     1                                  [org 0x0100]
     2 00000000 EB58                    	jmp check123
     3 00000002 010102020202040404-     arr: db 1,1,2,2,2,2,4,4,4,4,4
     3 0000000B 0404               
     4 0000000D 0B00                    count: dw 11
     5 0000000F 00                      mode: db 0
     6                                  start:
     7 00000010 B90000                  	mov cx,0			;counter
     8 00000013 8A1E[0300]              	mov bl,[arr+1]			;1st element
     9 00000017 B201                    	mov dl,1			;one step ahead
    10 00000019 B90000                  	mov cx,0
    11 0000001C BD0000                  	mov bp,0			;frequency holder
    12 0000001F BF0100                  	mov di,1			;one index ahead
    13                                  loop:
    14 00000022 390E[0D00]              	cmp [count],cx			;checks condition
    15 00000026 7429                    	jz out				;if not equal jump out of loop
    16 00000028 3A9D[0100]              	cmp bl,[arr+di-1]		;element comparison
    17 0000002C 750F                    	jnz check
    18                                  pre_check:
    19 0000002E 83C101                  	add cx,1			;increment
    20 00000031 83C701                  	add di,1			;increment
    21 00000034 8A9D[0200]              	mov bl,[arr+di]			;element holder
    22 00000038 83C201                  	add dx,1			;increment
    23 0000003B EBE5                    	jmp loop	
    24                                  check:
    25 0000003D 39EA                    	cmp dx,bp			;checks if previous frequency is 			 			than current
    26 0000003F 7705                    	ja move				;if not jump to move
    27 00000041 BA0000                  	mov dx,0			;otherwise again set to 0
    28 00000044 EBE8                    	jmp pre_check			;jump back
    29                                  move:
    30 00000046 8A85[0100]              	mov al,[arr+di-1]		;mode holder
    31 0000004A 89D5                    	mov bp,dx			;frequency holder
    32 0000004C BA0000                  	mov dx,0			;again initialized to 0
    33 0000004F EBDD                    	jmp pre_check	;return back to iteration
    34                                  out:
    35 00000051 A2[0F00]                	mov [mode],al
    36 00000054 C3                      	ret
    37                                  	and123:
    38                                  	
    39 00000055 B8004C                  	mov ax,0x4c00
    40 00000058 CD21                    	int 0x21
    41 0000005A E8B3FF                  	check123: call start
    42 0000005D EBF6                    	jmp and123
