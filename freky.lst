     1                                  ; [org 0x0100]
     2                                  
     3                                  ; jmp start
     4                                  
     5                                  ; pausescreenmessage: db 'Press ENTER to confirm or BACKSPACE to return'
     6                                  ; pausescreenmessage_length: dw 45
     7                                  
     8                                  ; instructionscreenmessage1: db 'Objective:'
     9                                  ; instructionscreenmessage1_length: dw 10
    10                                  ; instructionscreenmessage2: db '- Navigate the bird through the gaps in the pipes'
    11                                  ; instructionscreenmessage2_length: dw 49
    12                                  ; instructionscreenmessage3: db '- Avoid crashing into the pipes or the ground'
    13                                  ; instructionscreenmessage3_length: dw 45
    14                                  ; instructionscreenmessage4: db '- Earn 1 point for every pipe you successfully pass'
    15                                  ; instructionscreenmessage4_length: dw 51
    16                                  ; instructionscreenmessage5: db 'Controls:'
    17                                  ; instructionscreenmessage5_length: dw 9
    18                                  ; instructionscreenmessage6: db '- Press SPACEBAR to make the bird jump'
    19                                  ; instructionscreenmessage6_length: dw 38
    20                                  ; instructionscreenmessage7: db '- Press ANY key to start the game & ESC to pause'
    21                                  ; instructionscreenmessage7_length: dw 48
    22                                  
    23                                  ; title_text1: db 'PRESS ANY KEY'
    24                                  ; title_text1_length: dw 13
    25                                  ; title_text2: db 'DANIYAL ZAIDI  23L-0718'
    26                                  ; title_text2_length: dw 23
    27                                  ; title_text3: db 'SAREM WAHEED   23L-0885'
    28                                  ; title_text4: db 'Fall 2024'
    29                                  ; title_text4_length: dw 9
    30                                  
    31                                  ; pipeWidth: dw 1      ; changes
    32                                  ; pipeWidthReal: dw 8  ; constant
    33                                  
    34                                  ; pipeWidth1: dw 1
    35                                  ; pipeWidth2: dw 1
    36                                  ; pipeWidth3: dw 1
    37                                  
    38                                  ; pipeHeight: dw 9
    39                                  
    40                                  ; pipeHeight1: dw 9
    41                                  ; pipeHeight2: dw 9
    42                                  ; pipeHeight3: dw 9
    43                                  
    44                                  ; difference: dw 8
    45                                  ; groundHeight: dw 2
    46                                  ; CurrentCol: dw 79
    47                                  
    48                                  ; CurrentCol1: dw 79
    49                                  ; CurrentCol2: dw 79
    50                                  ; CurrentCol3: dw 79
    51                                  
    52                                  ; birdR: dw 12
    53                                  ; birdC: dw 35
    54                                  
    55                                  ; birdDirection: db 'D'
    56                                  
    57                                  ; init: dw 0
    58                                  
    59                                  ; init1: dw 0
    60                                  ; init2: dw 0
    61                                  ; init3: dw 0
    62                                  
    63                                  ; flagPillar: dw 0
    64                                  
    65                                  ; flagPillar1: dw 0
    66                                  ; flagPillar2: dw 0
    67                                  ; flagPillar3: dw 0
    68                                  
    69                                  ; pipe1Flag: dw 0
    70                                  ; pipe2Flag: dw 0
    71                                  ; pipe3Flag: dw 0
    72                                  
    73                                  ; pipe1Exists: dw 0
    74                                  ; pipe2Exists: dw 0
    75                                  ; pipe3Exists: dw 0
    76                                  
    77                                  ; has_Collided: dw 0
    78                                  
    79                                  ; backGroundBuffer: times 2000 dw 0 ; space for 4000 bytes
    80                                  ; saveBuffer: times 2000 dw 0 ; space for 4000 bytes
    81                                  ; oldisr: dd 0 ; space for saving old isr
    82                                  ; oldisr_timer: dd 0 ; space for saving old isr
    83                                  ; newisr: dd 0 ; space for saving old isr
    84                                  
    85                                  ; bufferforground: dw 0, 0, 0
    86                                  
    87                                  ; starttimer: dw 0
    88                                  ; counting: dw 0
    89                                  ; pausetime: dw 6
    90                                  
    91                                  ; border_end_screen_color: dw 0x0F20
    92                                  ; gameover_color: dw 0x0020
    93                                  
    94                                  ; endscreen_text1 db 'Score: '
    95                                  ; endscreen_text1_length: dw 7
    96                                  
    97                                  ; scoreofgame: dw 0
    98                                  
    99                                  ; shouldexit: dw 0
   100                                  ; pause_flag: dw 0
   101                                  
   102                                  ; moveGround:
   103                                  	; pusha
   104                                  
   105                                  	; mov ax, 0xb800
   106                                  	; mov es, ax
   107                                  
   108                                  	; mov ax, [cs:groundHeight]
   109                                  	; mov cx, 160
   110                                  	; mul cx
   111                                  	; mov di, ax
   112                                  
   113                                  	; mov ax, 4000
   114                                  	; sub ax, di
   115                                  	; mov di, ax
   116                                  
   117                                  	; mov cx, di
   118                                  	; add cx, 146
   119                                  
   120                                  	; mov ax, [es:di]
   121                                  	; mov [bufferforground], ax
   122                                  	; mov ax, [es:di+160]
   123                                  	; mov [bufferforground +2], ax
   124                                  	; mov ax, [es:di+320]
   125                                  	; mov [bufferforground +4], ax
   126                                  
   127                                  ; movetoleftvalues:
   128                                  	; add di,2
   129                                  	; mov ax, [es:di]
   130                                  	; mov [es:di-2], ax
   131                                  	; mov ax, [es:di+160]
   132                                  	; mov [es:di+158], ax
   133                                  	; mov ax, [es:di+320]
   134                                  	; mov [es:di+318], ax
   135                                  
   136                                  	; cmp di, cx
   137                                  	; jne movetoleftvalues
   138                                  
   139                                  
   140                                  	; mov ax, [bufferforground]
   141                                  	; mov [es:di], ax
   142                                  	; mov ax, [bufferforground + 2]
   143                                  	; mov [es:di+160], ax
   144                                  	; mov ax, [bufferforground + 4]
   145                                  	; mov [es:di+320], ax
   146                                  
   147                                  	; popa
   148                                  	; ret
   149                                  
   150                                  ; random:
   151                                  	; push ax
   152                                  
   153                                  	; mov al, 00h
   154                                  	; out 0x70, al ; command byte written at first port
   155                                  	; jmp D1 ; waste one instruction time
   156                                  	; D1: in al, 0x71 ; result of command is in AL now
   157                                  
   158                                  	; mov ah, al ; since its stored in bcd we store it in our convention
   159                                  	; shr al, 4
   160                                  	; and ah, 0Fh
   161                                  	; add al, ah
   162                                  
   163                                  	; and al, 0Dh
   164                                  	
   165                                  	; add al, 2
   166                                  	
   167                                  	; cmp al, 14
   168                                  	; jle contRand1
   169                                  	
   170                                  	; mov al, 14
   171                                  	
   172                                  ; contRand1:
   173                                  	; mov ah, 0
   174                                  
   175                                  	; mov [cs:pipeHeight], ax
   176                                  	; ;mov word[cs:pipeHeight], 2
   177                                  
   178                                  	; pop ax
   179                                  	; ret
   180                                  
   181                                  ; clrscr:
   182                                  	; push bp
   183                                  	; mov bp,sp
   184                                  	; push es
   185                                  	; push ax
   186                                  	; push cx
   187                                  	; push di
   188                                  
   189                                  	; mov ax, 0xb800
   190                                  	; mov es, ax
   191                                  	; xor di, di
   192                                  	; mov ax, [bp +4]
   193                                  	; mov cx, 2000
   194                                  
   195                                  	; cld
   196                                  	; rep stosw
   197                                  
   198                                  	; pop di
   199                                  	; pop cx
   200                                  	; pop ax
   201                                  	; pop es
   202                                  	; pop bp
   203                                  	; ret 2
   204                                  
   205                                  ; delay:
   206                                  	; push cx
   207                                  	; mov cx, 0xFFFF
   208                                  ; loop1:
   209                                  	; loop loop1
   210                                  	; mov cx, 0xFFFF
   211                                  ; loop2:
   212                                  	; loop loop2
   213                                  	; pop cx
   214                                  	; ret
   215                                  
   216                                  ; Background:
   217                                  	; push es
   218                                  	; push ax
   219                                  	; push di
   220                                  	; push cx
   221                                  	; push bx
   222                                  
   223                                  	; mov ax, 0xb800
   224                                  	; mov es, ax
   225                                  
   226                                  	; mov cx, 4000
   227                                  	; mov ax, [cs:groundHeight]
   228                                  	; mov bx, 160
   229                                  	; mul bx
   230                                  	; sub cx, ax
   231                                  
   232                                  	; mov di, 0
   233                                  	; mov ah, 0x30
   234                                  	; mov al, 0x20
   235                                  
   236                                  ; next:
   237                                  	; mov [es:di], ax
   238                                  	; add di, 2
   239                                  	; cmp di, cx
   240                                  	; jnz next
   241                                  
   242                                  	; pop bx
   243                                  	; pop cx
   244                                  	; pop di
   245                                  	; pop ax
   246                                  	; pop es
   247                                  	; ret
   248                                  
   249                                  ; PipeU:
   250                                  	; push bp
   251                                  	; mov bp, sp
   252                                  	; sub sp, 2
   253                                  	; push es
   254                                  	; push ax
   255                                  	; push di
   256                                  	; push cx
   257                                  	; push bx
   258                                  
   259                                  	; mov ax, 0xb800
   260                                  	; mov es, ax
   261                                  
   262                                  	; mov ax, [cs:pipeWidth]
   263                                  	; mov cx, 2
   264                                  	; mul cx
   265                                  	; mov cx, ax
   266                                  	; mov ax, [cs:CurrentCol]
   267                                  	; mov di, 2
   268                                  	; mul di
   269                                  	; mov di, ax
   270                                  	; add cx, di
   271                                  
   272                                  	; mov ax, [cs:pipeHeight]
   273                                  	; sub ax, 1
   274                                  	; mov bx, 160
   275                                  	; mul bx
   276                                  	; mov bx, ax
   277                                  	; mov word[bp - 2], bx
   278                                  	; add word[bp - 2], cx
   279                                  
   280                                  
   281                                  	; mov ah, 0x20
   282                                  	; mov al, 0x20
   283                                  
   284                                  
   285                                  ; next3:
   286                                  	; mov [es:di], ax
   287                                  	; add di, 2
   288                                  	; cmp di, cx
   289                                  	; jnz next3
   290                                  	; add cx, 160
   291                                  	; mov di, [cs:pipeWidth]
   292                                  	; shl di, 1
   293                                  	; mov bx, cx
   294                                  	; sub bx, di
   295                                  	; mov di, bx
   296                                  	; cmp cx, [bp - 2]
   297                                  	; jnz next3
   298                                  
   299                                  	; pop bx
   300                                  	; pop cx
   301                                  	; pop di
   302                                  	; pop ax
   303                                  	; pop es
   304                                  	; mov sp, bp
   305                                  	; pop bp
   306                                  	; ret
   307                                  
   308                                  
   309                                  ; PipeD:
   310                                  	; push bp
   311                                  	; mov bp, sp
   312                                  	; sub sp, 2
   313                                  	; push es
   314                                  	; push ax
   315                                  	; push di
   316                                  	; push cx
   317                                  	; push bx
   318                                  
   319                                  	; mov ax, 0xb800
   320                                  	; mov es, ax
   321                                  
   322                                  	; mov ax, [cs:pipeWidth]
   323                                  	; shl ax, 1
   324                                  	; mov cx, ax
   325                                  
   326                                  	; mov ax, [cs:pipeHeight]
   327                                  	; add ax, [cs:difference]
   328                                  	; mov bx, 160
   329                                  	; mul bx
   330                                  	; mov bx, ax
   331                                  
   332                                  	; mov ax, [cs:CurrentCol]
   333                                  	; shl ax, 1
   334                                  	; mov di, ax
   335                                  	; add di, bx
   336                                  	; add cx, di
   337                                  
   338                                  	; mov ax, 25
   339                                  	; sub ax, [cs:difference]
   340                                  	; sub ax, [cs:pipeHeight]
   341                                  	; sub ax, [cs:groundHeight]
   342                                  
   343                                  	; mov bx, 160
   344                                  	; mul bx
   345                                  	; mov bx, ax
   346                                  	; mov word[bp - 2], bx
   347                                  	; add word[bp - 2], cx
   348                                  
   349                                  
   350                                  	; mov ah, 0x20
   351                                  	; mov al, 0x20
   352                                  
   353                                  
   354                                  ; next4:
   355                                  	; mov [es:di], ax
   356                                  	; add di, 2
   357                                  	; cmp di, cx
   358                                  	; jnz next3
   359                                  	; add cx, 160
   360                                  	; mov di, [cs:pipeWidth]
   361                                  	; shl di, 1
   362                                  	; mov bx, cx
   363                                  	; sub bx, di
   364                                  	; mov di, bx
   365                                  	; cmp cx, [bp - 2]
   366                                  	; jnz next4
   367                                  
   368                                  	; pop bx
   369                                  	; pop cx
   370                                  	; pop di
   371                                  	; pop ax
   372                                  	; pop es
   373                                  	; mov sp, bp
   374                                  	; pop bp
   375                                  	; ret
   376                                  
   377                                  ; Bird:
   378                                  	; pusha
   379                                  
   380                                  	; mov ax, 0xb800
   381                                  	; mov es, ax
   382                                  
   383                                  	; mov ax, 80
   384                                  	; mov di, [cs:birdR]
   385                                  	; mul di
   386                                  	; add ax, word[cs:birdC]
   387                                  	; shl ax, 1
   388                                  	; mov di, ax
   389                                  
   390                                  	; mov word[es:di - 162], 0x1020
   391                                  	; mov word[es:di - 158], 0x1020
   392                                  
   393                                  	; mov ax, 0x4020
   394                                  	; mov cx, 3
   395                                  	; mov si, di
   396                                  ; lB2:
   397                                  	; mov [es:di], ax
   398                                  	; add di, 2
   399                                  	; loop lB2
   400                                  
   401                                  	; mov word[es:di], 0x0020
   402                                  	; mov [es:di + 2], ax
   403                                  	; mov word[es:di + 4], 0x0020
   404                                  
   405                                  	; mov cx, 5
   406                                  	; mov di, si
   407                                  	; add di, 160
   408                                  	; mov word[es:di], 0x6020
   409                                  	; add di, 2
   410                                  	; mov si, di
   411                                  ; lB3:
   412                                  	; mov [es:di], ax
   413                                  	; add di, 2
   414                                  	; loop lB3
   415                                  
   416                                  	; popa
   417                                  	; ret
   418                                  
   419                                  ; Ground:
   420                                  	; push es
   421                                  	; push ax
   422                                  	; push di
   423                                  	; push cx
   424                                  	; push dx
   425                                  	; push bx
   426                                  	; push si
   427                                  
   428                                  	; mov ax, 0xb800
   429                                  	; mov es, ax
   430                                  
   431                                  	; mov ax, [cs:groundHeight]
   432                                  	; mov cx, 160
   433                                  	; mul cx
   434                                  	; mov di, ax
   435                                  
   436                                  	; mov ax, 4000
   437                                  	; sub ax, di
   438                                  	; mov di, ax
   439                                  	; mov dx, di
   440                                  	; mov bx, di
   441                                  	; add bx, 36
   442                                  	; mov si, di
   443                                  	; add si, 46
   444                                  
   445                                  	; mov cx, 4000
   446                                  	; mov ah, 0x60
   447                                  	; mov al, 0x20
   448                                  
   449                                  ; next2:
   450                                  	; cmp dx, bx
   451                                  	; je print_pebble_not_dots_not_lines
   452                                  
   453                                  	; cmp di, dx
   454                                  	; je print_pebble
   455                                  
   456                                  	; cmp di, bx
   457                                  	; je print_dots
   458                                  
   459                                  	; cmp di, si
   460                                  	; je print_lines
   461                                  
   462                                  	; mov [es:di], ax
   463                                  	; add di, 2
   464                                  
   465                                  ; otherwise_continue:
   466                                  	; cmp di, cx
   467                                  	; jnz next2
   468                                  	
   469                                  	; call printbrownboxattherightbottom
   470                                  	
   471                                  	; push cs
   472                                  	; pop ds	
   473                                  	; push endscreen_text1
   474                                  	; push 0x6F
   475                                  	; push word[endscreen_text1_length]
   476                                  	; push 0x169A
   477                                  	; call printline
   478                                  
   479                                  	; pop si
   480                                  	; pop bx
   481                                  	; pop dx
   482                                  	; pop cx
   483                                  	; pop di
   484                                  	; pop ax
   485                                  	; pop es
   486                                  	; ret
   487                                  
   488                                  ; print_pebble_not_dots_not_lines:
   489                                  		; mov al, 0x6F
   490                                  		; mov ah, 0x64
   491                                  		; mov [es:di], ax
   492                                  		; add di, 2
   493                                  		; mov al, 0x20
   494                                  		; mov ah, 0x60
   495                                  		; add dx, 70
   496                                  		; add bx, 36
   497                                  		; jmp otherwise_continue
   498                                  
   499                                  ; print_pebble:
   500                                  		; mov al, 0x6F
   501                                  		; mov ah, 0x64
   502                                  
   503                                  		; mov [es:di], ax
   504                                  		; add di, 2
   505                                  
   506                                  		; mov al, 0x20
   507                                  		; mov ah, 0x60
   508                                  
   509                                  		; add dx, 70
   510                                  		; jmp otherwise_continue
   511                                  
   512                                  ; print_dots:
   513                                  		; mov al, 0x2E
   514                                  		; mov ah, 0x64
   515                                  
   516                                  		; mov [es:di], ax
   517                                  		; add di, 2
   518                                  
   519                                  		; mov al, 0x20
   520                                  		; mov ah, 0x60
   521                                  
   522                                  		; add bx, 36
   523                                  		; jmp otherwise_continue
   524                                  
   525                                  ; print_lines:
   526                                  		; mov al, 0x2D
   527                                  		; mov ah, 0x64
   528                                  
   529                                  		; mov [es:di], ax
   530                                  		; add di, 2
   531                                  
   532                                  		; mov al, 0x20
   533                                  		; mov ah, 0x60
   534                                  
   535                                  		; add si, 46
   536                                  		; jmp otherwise_continue
   537                                  
   538                                  ; printbrownboxattherightbottom:
   539                                  	; mov ax, [cs:groundHeight]
   540                                  	; mov cx, 160
   541                                  	; mul cx
   542                                  	; mov di, ax
   543                                  
   544                                  	; mov ax, 4000
   545                                  	; sub ax, di
   546                                  	; mov di, ax
   547                                  	; add di, 148
   548                                  	; mov bx, di
   549                                  	; mov cx, 6
   550                                  	
   551                                  ; loopforblackbox:
   552                                  	; mov word[es:di], 0x6720
   553                                  	; mov word[es:di+160], 0x6720
   554                                  	; mov word[es:di+160], 0x6720
   555                                  	; add di, 2
   556                                  	; loop loopforblackbox
   557                                  	
   558                                  	; ret
   559                                  
   560                                  ; printCloud:
   561                                  	; push bp
   562                                  	; mov bp, sp
   563                                  	; push ax
   564                                  	; push es
   565                                  	; push cx
   566                                  	; push di
   567                                  	; push si
   568                                  
   569                                  	; mov ax, 0xb800
   570                                  	; mov es, ax
   571                                  
   572                                  
   573                                  	; mov di, [bp + 4]
   574                                  	; mov ax, 0x7020
   575                                  	; mov si, di
   576                                  	; mov cx, 2
   577                                  ; nextCR1:
   578                                  	; mov [es:di], ax
   579                                  	; add di, 2
   580                                  	; loop nextCR1
   581                                  
   582                                  	; mov di, si
   583                                  	; mov cx, 6
   584                                  	; add di, 160
   585                                  	; sub di, 4
   586                                  	; mov si, di
   587                                  ; nextCR2:
   588                                  	; mov [es:di], ax
   589                                  	; add di, 2
   590                                  	; loop nextCR2
   591                                  
   592                                  	; mov di, si
   593                                  	; add di, 160
   594                                  	; sub di, 4
   595                                  	; mov cx, 10
   596                                  ; nextCR3:
   597                                  	; mov [es:di], ax
   598                                  	; add di, 2
   599                                  	; loop nextCR3
   600                                  
   601                                  	; pop si
   602                                  	; pop di
   603                                  	; pop cx
   604                                  	; pop es
   605                                  	; pop ax
   606                                  	; pop bp
   607                                  	; ret 2
   608                                  
   609                                  ; Clouds:
   610                                  	; pusha
   611                                  
   612                                  	; push 500
   613                                  	; call printCloud
   614                                  	; push 2280
   615                                  	; call printCloud
   616                                  	; push 1210
   617                                  	; call printCloud
   618                                  	; push 460
   619                                  	; call printCloud
   620                                  	; push 2830
   621                                  	; call printCloud
   622                                  
   623                                  	; popa
   624                                  	; ret
   625                                  
   626                                  ; moveUpperPipe:
   627                                  	; pusha
   628                                  
   629                                  	; mov ax, 0xb800
   630                                  	; mov es, ax
   631                                  	; mov ds, ax
   632                                  
   633                                  	; mov si, [cs:CurrentCol]     ; si = Current Col ; di = Current Col - 1
   634                                  	; mov di, si
   635                                  	; shl si, 1            ; change if currentCol is made in 160 form
   636                                  
   637                                  	; cmp si, 0
   638                                  	; jz fadeAwayPillar
   639                                  
   640                                  	; sub di, 1
   641                                  	; shl di, 1
   642                                  	; mov cx, [cs:pipeWidth]
   643                                  	; mov dx, [cs:pipeHeight]
   644                                  	; sub dx, 1
   645                                  
   646                                  	; mov ax, si
   647                                  	; jmp upperPipe
   648                                  
   649                                  ; fadeAwayPillar:
   650                                  	; add di, word[cs:pipeWidth]
   651                                  	; dec di
   652                                  	; shl di, 1
   653                                  
   654                                  	; mov cx, 25
   655                                  	; sub cx, word[cs:groundHeight]
   656                                  
   657                                  ; nextPiece:
   658                                  	; push ax
   659                                  	; push ds
   660                                  	; push cs
   661                                  	; pop ds
   662                                  	; mov si, backGroundBuffer
   663                                  	; add si, di
   664                                  	; mov ax, [ds:si]
   665                                  	; mov [es:di], ax
   666                                  	; pop ds
   667                                  	; pop ax
   668                                  
   669                                  	; add di, 160
   670                                  	; loop nextPiece
   671                                  
   672                                  	; dec word[cs:pipeWidth]
   673                                  	; jmp endup2
   674                                  
   675                                  ; upperPipe:
   676                                  	; cld
   677                                  	; rep movsw
   678                                  
   679                                  	; ; give original background back
   680                                  	; push ax
   681                                  	; push ds
   682                                  
   683                                  	; push cs
   684                                  	; pop ds
   685                                  
   686                                  	; mov si, backGroundBuffer
   687                                  	; add si, di
   688                                  
   689                                  	; mov ax, [ds:si]
   690                                  	; mov [es:di], ax
   691                                  	; pop ds
   692                                  	; pop ax
   693                                  
   694                                  	; ; reinitialise for next one
   695                                  	; mov cx, [cs:pipeWidth]
   696                                  	; mov si, ax
   697                                  	; add si, 160
   698                                  	; mov ax, si
   699                                  	; mov di, si
   700                                  	; sub di, 2
   701                                  	; dec dx
   702                                  	; cmp dx, 0
   703                                  	; jnz upperPipe
   704                                  
   705                                  	; mov dx, 25
   706                                  	; sub dx, [cs:pipeHeight]
   707                                  	; sub dx, [cs:difference]
   708                                  	; sub dx, [cs:groundHeight]
   709                                  
   710                                  	; mov cx, [cs:difference]
   711                                  	; add si, 160
   712                                  ; lop:
   713                                  	; add si, 160
   714                                  	; loop lop
   715                                  
   716                                  	; mov cx, [cs:pipeWidth]
   717                                  
   718                                  	; mov ax, si
   719                                  	; mov di, si
   720                                  	; sub di, 2
   721                                  
   722                                  ; lowerPipe:
   723                                  	; cld
   724                                  	; rep movsw
   725                                  
   726                                  	; ; give original background back
   727                                  	; push ax
   728                                  	; push ds
   729                                  
   730                                  	; push cs
   731                                  	; pop ds
   732                                  
   733                                  	; mov si, backGroundBuffer
   734                                  	; add si, di
   735                                  
   736                                  	; mov ax, [ds:si]
   737                                  	; mov [es:di], ax
   738                                  	; pop ds
   739                                  	; pop ax
   740                                  
   741                                  	; ; reinitialise for next one
   742                                  	; mov cx, [cs:pipeWidth]
   743                                  	; mov si, ax
   744                                  	; add si, 160
   745                                  	; mov ax, si
   746                                  	; mov di, si
   747                                  	; sub di, 2
   748                                  	; dec dx
   749                                  	; cmp dx, 0
   750                                  	; jnz lowerPipe
   751                                  
   752                                  
   753                                  ; lPCont:
   754                                  	; cmp word[cs:flagPillar], 0
   755                                  	; jnz endup2
   756                                  
   757                                  	; ; when it fades into the screen
   758                                  
   759                                  ; fadeInPillar:
   760                                  	; mov di, word[cs:CurrentCol]
   761                                  	; add di, word[cs:pipeWidth]
   762                                  	; sub di, 1
   763                                  	; shl di, 1
   764                                  
   765                                  	; mov cx, word[cs:pipeHeight]
   766                                  	; sub cx, 1
   767                                  
   768                                  ; nextIn1:
   769                                  	; mov word[es:di], 0x2020
   770                                  	; add di, 160
   771                                  	; loop nextIn1
   772                                  
   773                                  	; mov cx, word[cs:difference]
   774                                  
   775                                  ; tempLoop:
   776                                  	; add di, 160
   777                                  	; loop tempLoop
   778                                  
   779                                  	; add di, 160
   780                                  	; mov cx, 25
   781                                  	; sub cx, word[cs:pipeHeight]
   782                                  	; sub cx, word[cs:groundHeight]
   783                                  	; sub cx, word[cs:difference]
   784                                  
   785                                  ; nextIn2:
   786                                  	; mov word[es:di], 0x2020
   787                                  	; add di, 160
   788                                  	; loop nextIn2
   789                                  
   790                                  	; inc word[cs:pipeWidth]
   791                                  
   792                                  	; mov ax, [cs:pipeWidthReal]
   793                                  	; cmp word[cs:pipeWidth], ax    ; after it passes the right side fully ; replace 8 with pipeWidth
   794                                  	; jnz endup2
   795                                  
   796                                  	; mov word[cs:flagPillar], 1    ; 1 for the state that it has emerged fully
   797                                  
   798                                  ; endup2:
   799                                  	; popa
   800                                  	; ret
   801                                  	
   802                                  ; ;-------------------------------------------------------------
   803                                  ; moveBird_down:
   804                                  	; pusha
   805                                  
   806                                  	; mov ax, 0xb800
   807                                  	; mov es, ax
   808                                  
   809                                  	; push cs
   810                                  	; pop ds
   811                                  
   812                                  	; mov ax, 80
   813                                  	; mov di, [cs:birdR]
   814                                  	; mul di
   815                                  	; add ax, word[cs:birdC]
   816                                  	; shl ax, 1
   817                                  	; mov di, ax
   818                                  
   819                                  	; mov bx, di
   820                                  
   821                                  	; add word[cs:birdR], 1
   822                                  
   823                                  	; ; now we change the screen back to what it was behind the bird
   824                                  	
   825                                  	; mov si, saveBuffer
   826                                  	; add si, di
   827                                  	; ;sub si, 6   ; to accomodate for the link between ds and es
   828                                  
   829                                  	; mov ax, [ds:si - 162]
   830                                  	; mov word[es:di - 162], ax
   831                                  	; mov ax, [ds:si - 158]
   832                                  	; mov word[es:di - 158], ax
   833                                  	; mov ax, [ds:si - 160]
   834                                  	; mov word[es:di - 160], ax
   835                                  	; mov ax, [ds:si - 156]
   836                                  	; mov word[es:di - 156], ax
   837                                  	; mov ax, [ds:si - 154]
   838                                  	; mov word[es:di - 154], ax
   839                                  	; mov ax, [ds:si - 152]
   840                                  	; mov word[es:di - 152], ax
   841                                  	; mov ax, [ds:si - 150]
   842                                  	; mov word[es:di - 150], ax
   843                                  	
   844                                  	; mov cx, 3
   845                                  	; mov bx, di
   846                                  ; mB21:
   847                                  	; mov ax, [ds:si]
   848                                  	; mov [es:di], ax
   849                                  	; add di, 2
   850                                  	; add si, 2
   851                                  	; loop mB21
   852                                  
   853                                  	; mov ax, [ds:si]
   854                                  	; mov word[es:di], ax
   855                                  	; mov ax, [ds:si + 2]
   856                                  	; mov [es:di + 2], ax
   857                                  	; mov ax, [ds:si + 4]
   858                                  	; mov word[es:di + 4], ax
   859                                  
   860                                  	; mov cx, 5
   861                                  	; mov di, bx
   862                                  	; add di, 160
   863                                  	; add si, 160
   864                                  	; mov ax, [ds:si]
   865                                  	; mov word[es:di], ax
   866                                  	; add di, 2
   867                                  	; add si, 2
   868                                  	; mov bx, di
   869                                  ; mB31:
   870                                  	; mov ax, [ds:si]
   871                                  	; mov [es:di], ax
   872                                  	; add di, 2
   873                                  	; add si, 2
   874                                  	; loop mB31
   875                                  
   876                                  	; call Bird
   877                                  
   878                                  	; popa
   879                                  	; ret
   880                                  ; ;-------------------------------------------------------------
   881                                  ; moveBird:
   882                                  	; pusha
   883                                  
   884                                  	; mov ax, 0xb800
   885                                  	; mov es, ax
   886                                  
   887                                  	; push cs
   888                                  	; pop ds
   889                                  
   890                                  	; mov ax, 80
   891                                  	; mov di, [cs:birdR]
   892                                  	; mul di
   893                                  	; add ax, word[cs:birdC]
   894                                  	; shl ax, 1
   895                                  	; mov di, ax
   896                                  
   897                                  	; mov bx, di
   898                                  
   899                                  	; mov al, byte[cs:birdDirection]
   900                                  	; cmp al, 'D'
   901                                  	; je downwards
   902                                  	; cmp al, 'S'
   903                                  	; je jumptobirdend
   904                                  	
   905                                  	; ; upwards
   906                                  	; ;sub di, 158    ; check for bounds here
   907                                  	; sub word[cs:birdR], 1
   908                                  	; ;add word[cs:birdC], 1
   909                                  	; jmp changeTraj
   910                                  
   911                                  ; downwards:
   912                                  	; ;add di, 162
   913                                  	; add word[cs:birdR], 1
   914                                  	; ;add word[cs:birdC], 1
   915                                  
   916                                  ; changeTraj:
   917                                  	; ; now we change the screen back to what it was behind the bird
   918                                  	; mov si, backGroundBuffer
   919                                  	; add si, di
   920                                  	; sub si, 6   ; to accomodate for the link between ds and es
   921                                  	; ;sub si, 1 ; doing this leaves a trail behind heh maybe we can do something with this later on
   922                                  
   923                                  	; mov ax, [ds:si - 162]
   924                                  	; ; mov [es:di], ax
   925                                  	; mov word[es:di - 162], ax
   926                                  	; mov ax, [ds:si - 158]
   927                                  	; mov word[es:di - 158], ax
   928                                  
   929                                  	; ; mov ax, 0x4020
   930                                  	; mov cx, 3
   931                                  	; mov bx, di
   932                                  ; mB2:
   933                                  	; mov ax, [ds:si]
   934                                  	; mov [es:di], ax
   935                                  	; add di, 2
   936                                  	; add si, 2
   937                                  	; loop mB2
   938                                  
   939                                  	; mov ax, [ds:si]
   940                                  	; mov word[es:di], ax
   941                                  	; mov ax, [ds:si + 2]
   942                                  	; mov [es:di + 2], ax
   943                                  	; mov ax, [ds:si + 4]
   944                                  	; mov word[es:di + 4], ax
   945                                  
   946                                  	; mov cx, 5
   947                                  	; mov di, bx
   948                                  	; add di, 160
   949                                  	; add si, 160
   950                                  	; mov ax, [ds:si]
   951                                  	; mov word[es:di], ax
   952                                  	; add di, 2
   953                                  	; add si, 2
   954                                  	; mov bx, di
   955                                  ; mB3:
   956                                  	; mov ax, [ds:si]
   957                                  	; mov [es:di], ax
   958                                  	; add di, 2
   959                                  	; add si, 2
   960                                  	; loop mB3
   961                                  
   962                                  ; jumptobirdend:
   963                                  	; ; now we call the Bird function again so that it redraws the bird with new coords
   964                                  	; call Bird
   965                                  
   966                                  	; popa
   967                                  	; ret
   968                                  
   969                                  ; pillarMovement:
   970                                  	; pusha
   971                                  
   972                                  	; cmp word[cs:init], 0
   973                                  	; jnz notInit
   974                                  
   975                                  	; mov word[cs:init], 1
   976                                  	; jmp initPassed
   977                                  
   978                                  ; notInit:
   979                                  	; cmp word[cs:pipeWidth], 0
   980                                  	; jz emptyCall
   981                                  
   982                                  ; initPassed:
   983                                  	; mov ax, word[cs:pipeWidthReal]
   984                                  	; cmp word[cs:pipeWidth], ax    ; when it emerges from the right till its full
   985                                  	; jz rightPassedPillar
   986                                  
   987                                  	; cmp word[cs:flagPillar], 1    ; when it reaches left end
   988                                  	; jz rightPassedPillar
   989                                  
   990                                  	; ; add word[cs:pipeWidth], 1
   991                                  
   992                                  
   993                                  ; rightPassedPillar:
   994                                  	; call moveUpperPipe
   995                                  	; cmp word[cs:CurrentCol], 0
   996                                  	; jz emptyCall
   997                                  
   998                                  	; dec word[cs:CurrentCol]
   999                                  
  1000                                  ; emptyCall:
  1001                                  	; popa
  1002                                  	; ret
  1003                                  
  1004                                  
  1005                                  ; ;-----------------------------------------------------------------
  1006                                  ; ;SAVES BACKGROUND IN BUFFER
  1007                                  ; ;-----------------------------------------------------------------
  1008                                  ; saveScreen:
  1009                                  	; pusha
  1010                                  
  1011                                  	; mov cx, 2000 ; number of screen locations
  1012                                  
  1013                                  	; mov bx, [cs:groundHeight]
  1014                                  	; mov ax, 160
  1015                                  	; mul bx
  1016                                  	; sub cx, bx
  1017                                  
  1018                                  	; mov ax, 0xb800
  1019                                  	; mov ds, ax ; ds = 0xb800
  1020                                  	; push cs
  1021                                  	; pop es
  1022                                  	; mov si, 0
  1023                                  	; mov di, backGroundBuffer
  1024                                  	; cld ; set auto increment mode
  1025                                  	; rep movsw ; save screen
  1026                                  	; ;[es:di] = [ds:si]
  1027                                  
  1028                                  	; popa
  1029                                  	; ret
  1030                                  ; ;-----------------------------------------------------------------	
  1031                                  	
  1032                                  	
  1033                                  ; ;-----------------------------------------------------------------
  1034                                  ; ;SAVES CURRENT SCREEN IN BUFFER
  1035                                  ; ;-----------------------------------------------------------------
  1036                                  ; saveScreen_state:
  1037                                  	; pusha
  1038                                  
  1039                                  	; mov cx, 2000 ; number of screen locations
  1040                                  
  1041                                  	; mov ax, 0xb800
  1042                                  	; mov ds, ax ; ds = 0xb800
  1043                                  	; push cs
  1044                                  	; pop es
  1045                                  	; mov si, 0
  1046                                  	; mov di, saveBuffer
  1047                                  	; cld ; set auto increment mode
  1048                                  	; rep movsw ; save screen
  1049                                  	; ;[es:di] = [ds:si]
  1050                                  
  1051                                  	; popa
  1052                                  	; ret
  1053                                  ; ;-----------------------------------------------------------------
  1054                                  
  1055                                  
  1056                                  
  1057                                  ; ;-----------------------------------------------------------------
  1058                                  ; ; subroutine to restore the screen
  1059                                  ; ;-----------------------------------------------------------------
  1060                                  ; restoreScreen:
  1061                                  	; pusha
  1062                                  
  1063                                  	; mov cx, 2000 ; number of screen locations
  1064                                  
  1065                                  	; mov ax, 0xb800
  1066                                  	; mov es, ax ; es = 0xb800
  1067                                  	; push cs
  1068                                  	; pop ds
  1069                                  	; mov si, saveBuffer
  1070                                  	; mov di, 0
  1071                                  	; cld ; set auto increment mode
  1072                                  	; rep movsw ; save screen
  1073                                  	; ;[ds:si] -> [es:di]
  1074                                  
  1075                                  	; popa
  1076                                  	; ret
  1077                                  ; ;-----------------------------------------------------------------
  1078                                  
  1079                                  
  1080                                  ; ; restoreScreen_background:
  1081                                  	; ; pusha
  1082                                  
  1083                                  	; ; mov cx, 2000 ; number of screen locations
  1084                                  
  1085                                  	; ; mov ax, 0xb800
  1086                                  	; ; mov es, ax ; es = 0xb800
  1087                                  	; ; push cs
  1088                                  	; ; pop ds
  1089                                  	; ; mov si, backGroundBuffer
  1090                                  	; ; mov di, 0
  1091                                  	; ; cld ; set auto increment mode
  1092                                  	; ; rep movsw ; save screen
  1093                                  	; ;;[ds:si] -> [es:di]
  1094                                  
  1095                                  	; ; popa
  1096                                  	; ; ret
  1097                                  
  1098                                  ; Pipe1Movement:
  1099                                  	; pusha
  1100                                  
  1101                                  	; cmp word[cs:pipe1Flag], 0
  1102                                  	; jnz movePipe1
  1103                                  
  1104                                  	; mov word[cs:pipe1Flag], 1  ; flag (rem to reinitialise the CurrentCol value once it hits 0 and the flag asw)
  1105                                  
  1106                                  	; ; initialisation 
  1107                                  	; mov ax, [cs:pipeHeight]
  1108                                  	; call random
  1109                                  	; mov bx, [cs:pipeHeight]
  1110                                  	; mov word[cs:pipeHeight1], bx
  1111                                  
  1112                                  	; mov ax, [cs:CurrentCol1]
  1113                                  	; mov [cs:CurrentCol], ax
  1114                                  
  1115                                  	; mov ax, [cs:pipeWidth1]
  1116                                  	; mov [cs:pipeWidth], ax
  1117                                  
  1118                                  	; call PipeU
  1119                                  	; call PipeD
  1120                                  
  1121                                  ; movePipe1:
  1122                                  	; mov ax, [cs:pipeHeight1]
  1123                                  	; mov [cs:pipeHeight], ax
  1124                                  
  1125                                  	; mov ax, [cs:pipeWidth1]
  1126                                  	; mov [cs:pipeWidth], ax
  1127                                  
  1128                                  	; mov ax, [cs:CurrentCol1]
  1129                                  	; mov [cs:CurrentCol], ax
  1130                                  
  1131                                  	; mov ax, [cs:flagPillar1]
  1132                                  	; mov [cs:flagPillar], ax
  1133                                  
  1134                                  	; mov ax, [cs:init1]
  1135                                  	; mov [cs:init], ax
  1136                                  
  1137                                  	; call pillarMovement
  1138                                  
  1139                                  	; ; mov dx, 0xFFFF
  1140                                  
  1141                                  	; ; sub dx, [pipeWidth]
  1142                                  
  1143                                  	; ; dec word[CurrentCol]
  1144                                  
  1145                                  	; ;cmp word[CurrentCol], 0
  1146                                  
  1147                                  	; mov ax, [cs:init]
  1148                                  	; mov [cs:init1], ax
  1149                                  
  1150                                  	; mov ax, [cs:flagPillar]
  1151                                  	; mov [cs:flagPillar1], ax
  1152                                  
  1153                                  	; mov ax, [cs:CurrentCol]     ; this statement recovers the change in currentCol
  1154                                  	; mov [cs:CurrentCol1], ax
  1155                                  
  1156                                  	; mov ax, [cs:pipeWidth]
  1157                                  	; mov [cs:pipeWidth1], ax
  1158                                  
  1159                                  	; ; cmp word[cs:CurrentCol1], 45
  1160                                  	; ; jna Pipe2
  1161                                  	; ; cmp word[cs:CurrentCol1], 0
  1162                                  	; ; jmp continue
  1163                                  
  1164                                  	; cmp word[cs:CurrentCol1], 45
  1165                                  	; jnz endPipe1Mov
  1166                                  
  1167                                  ; setpipe2Flag:
  1168                                  	; mov word[cs:pipe2Exists], 1
  1169                                  
  1170                                  	; mov word[cs:init2], 0
  1171                                  	; mov word[cs:flagPillar2], 0
  1172                                  	; mov word[cs:pipeWidth2], 1
  1173                                  	; mov word[cs:pipe2Flag], 0
  1174                                  	; mov word[cs:CurrentCol2], 79
  1175                                  
  1176                                  ; endPipe1Mov:
  1177                                  	; popa
  1178                                  	; ret
  1179                                  
  1180                                  ; Pipe2Movement:
  1181                                  	; pusha
  1182                                  
  1183                                  	; cmp word[cs:pipe2Flag], 0
  1184                                  	; jnz movePipe2
  1185                                  
  1186                                  	; mov word[cs:pipe2Flag], 1  ; flag (rem to reinitialise the CurrentCol value once it hits 0 and the flag asw)
  1187                                  
  1188                                  	; mov ax, [cs:pipeHeight]
  1189                                  	; call random
  1190                                  	; mov bx, [cs:pipeHeight]
  1191                                  	; mov word[cs:pipeHeight2], bx
  1192                                  
  1193                                  	; mov ax, [cs:CurrentCol2]
  1194                                  	; mov [cs:CurrentCol], ax
  1195                                  
  1196                                  	; mov ax, [cs:pipeWidth2]
  1197                                  	; mov [cs:pipeWidth], ax
  1198                                  
  1199                                  	; call PipeU
  1200                                  	; call PipeD
  1201                                  
  1202                                  ; movePipe2:
  1203                                  	; mov ax, [cs:pipeHeight2]
  1204                                  	; mov [cs:pipeHeight], ax
  1205                                  
  1206                                  	; mov ax, [cs:pipeWidth2]
  1207                                  	; mov [cs:pipeWidth], ax
  1208                                  
  1209                                  	; mov ax, [cs:CurrentCol2]
  1210                                  	; mov [cs:CurrentCol], ax
  1211                                  
  1212                                  	; mov ax, [cs:flagPillar2]
  1213                                  	; mov [cs:flagPillar], ax
  1214                                  
  1215                                  	; mov ax, [cs:init2]
  1216                                  	; mov [cs:init], ax
  1217                                  
  1218                                  	; call pillarMovement
  1219                                  
  1220                                  	; ;dec word[CurrentCol]
  1221                                  	; ; cmp word[CurrentCol], 0
  1222                                  
  1223                                  	; mov ax, [cs:init]
  1224                                  	; mov [cs:init2], ax
  1225                                  
  1226                                  	; mov ax, [cs:flagPillar]
  1227                                  	; mov [cs:flagPillar2], ax
  1228                                  
  1229                                  	; mov ax, [cs:CurrentCol]
  1230                                  	; mov [cs:CurrentCol2], ax
  1231                                  
  1232                                  	; mov ax, [cs:pipeWidth]
  1233                                  	; mov [cs:pipeWidth2], ax
  1234                                  
  1235                                  	; ; cmp word[cs:CurrentCol2], 45
  1236                                  	; ; jna Pipe3
  1237                                  	; ; jmp continue
  1238                                  
  1239                                  	; cmp word[cs:CurrentCol2], 45
  1240                                  	; jnz endPipe2Mov
  1241                                  
  1242                                  ; setPipe3Flag:
  1243                                  	; mov word[cs:pipe3Exists], 1
  1244                                  
  1245                                  	; mov word[cs:init3], 0
  1246                                  	; mov word[cs:flagPillar3], 0
  1247                                  	; mov word[cs:pipeWidth3], 1
  1248                                  	; mov word[cs:pipe3Flag], 0
  1249                                  	; mov word[cs:CurrentCol3], 79
  1250                                  
  1251                                  ; endPipe2Mov:
  1252                                  	; popa
  1253                                  	; ret
  1254                                  
  1255                                  ; Pipe3Movement:
  1256                                  	; pusha
  1257                                  
  1258                                  	; cmp word[cs:pipe3Flag], 0
  1259                                  	; jnz movePipe3
  1260                                  
  1261                                  	; mov word[cs:pipe3Flag], 1  ; flag (rem to reinitialise the CurrentCol value once it hits 0)
  1262                                  
  1263                                  	; mov ax, [cs:pipeHeight]
  1264                                  	; call random
  1265                                  	; mov bx, [cs:pipeHeight]
  1266                                  	; mov word[cs:pipeHeight3], bx
  1267                                  
  1268                                  	; mov ax, [cs:CurrentCol3]
  1269                                  	; mov [cs:CurrentCol], ax
  1270                                  
  1271                                  	; mov ax, [cs:pipeWidth3]
  1272                                  	; mov [cs:pipeWidth], ax
  1273                                  
  1274                                  	; call PipeU
  1275                                  	; call PipeD
  1276                                  
  1277                                  ; movePipe3:
  1278                                  	; mov ax, [cs:pipeHeight3]
  1279                                  	; mov [cs:pipeHeight], ax
  1280                                  
  1281                                  	; mov ax, [cs:pipeWidth3]
  1282                                  	; mov [cs:pipeWidth], ax
  1283                                  
  1284                                  	; mov ax, [cs:CurrentCol3]
  1285                                  	; mov [cs:CurrentCol], ax
  1286                                  
  1287                                  	; mov ax, [cs:flagPillar3]
  1288                                  	; mov [cs:flagPillar], ax
  1289                                  
  1290                                  	; mov ax, [cs:init3]
  1291                                  	; mov [cs:init], ax
  1292                                  
  1293                                  	; call pillarMovement
  1294                                  
  1295                                  	; ; dec word[CurrentCol]
  1296                                  	; ; cmp word[CurrentCol], 0
  1297                                  
  1298                                  	; mov ax, [cs:init]
  1299                                  	; mov [cs:init3], ax
  1300                                  
  1301                                  	; mov ax, [cs:flagPillar]
  1302                                  	; mov [cs:flagPillar3], ax
  1303                                  
  1304                                  	; mov ax, [cs:CurrentCol]
  1305                                  	; mov [cs:CurrentCol3], ax
  1306                                  
  1307                                  	; mov ax, [cs:pipeWidth]
  1308                                  	; mov [cs:pipeWidth3], ax
  1309                                  
  1310                                  	; cmp word[cs:CurrentCol3], 45
  1311                                  	; jnz endPipe3Mov
  1312                                  
  1313                                  ; initPillar1:
  1314                                  	; mov word[cs:pipe1Exists], 1
  1315                                  
  1316                                  	; mov word[cs:init1], 0
  1317                                  	; mov word[cs:flagPillar1], 0
  1318                                  	; mov word[cs:pipeWidth1], 1
  1319                                  	; mov word[cs:pipe1Flag], 0
  1320                                  	; mov word[cs:CurrentCol1], 79
  1321                                  
  1322                                  ; endPipe3Mov:
  1323                                  	; popa
  1324                                  	; ret
  1325                                  
  1326                                  
  1327                                  ; create_box:
  1328                                  	; push bp
  1329                                  	; mov bp, sp
  1330                                  	; push es
  1331                                  	; push ax
  1332                                  	; push di
  1333                                  	; push dx
  1334                                  	; push bx
  1335                                  	
  1336                                  	; mov ax, 0xb800
  1337                                  	; mov es, ax
  1338                                  
  1339                                  ; ;------------------------------------
  1340                                  ; ;PRINTING FOR THE BOX
  1341                                  ; ;------------------------------------
  1342                                  	; mov di, [bp + 8]	;to contain position for printing
  1343                                  	; mov bx,	[bp + 8]	;to always have the start positon
  1344                                  	; mov cx, [bp + 6]	;to keep track of columns to be printed
  1345                                  	; mov dx, 0			;to check if the total no of rows are printed
  1346                                  
  1347                                  ; loop_for_box:
  1348                                  	; mov word[es:di], 0x6820
  1349                                  	; add di, 2
  1350                                  	; loop loop_for_box
  1351                                  
  1352                                  	
  1353                                  	; add bx, 160 		;move to the next line
  1354                                  	; mov di, bx
  1355                                  	; mov cx, [bp + 6]
  1356                                  	
  1357                                  	; add dx, 1			;check for total rows
  1358                                  	; cmp dx, [bp + 4]
  1359                                  	; jne loop_for_box
  1360                                  ; ;------------------------------------
  1361                                  
  1362                                  	
  1363                                  ; ;------------------------------------
  1364                                  ; ;PRINTING FOR THE WHITE BOUNDARY
  1365                                  ; ;------------------------------------
  1366                                  	; mov di,[bp + 8]						;return to starting point
  1367                                  	; mov cx, [bp + 6]					;to keep track of columns to be printed
  1368                                  	
  1369                                  ; loop_for_white_boundary_1:				;print the top boundary
  1370                                  	; mov bx, [bp +10]
  1371                                  	; mov word[es:di], bx	
  1372                                  	; add di, 2
  1373                                  	; loop loop_for_white_boundary_1
  1374                                  	
  1375                                  	; sub di, 2							;di gets incremented even if condition failed hence to return to orignal state
  1376                                  	; mov cx, [bp + 4]					;to keep track of rows to be printed
  1377                                  ; loop_for_white_boundary_2:				;print the top boundary
  1378                                  	; mov bx, [bp +10]
  1379                                  	; mov word[es:di], bx	
  1380                                  	; add di, 160
  1381                                  	; loop loop_for_white_boundary_2
  1382                                  	
  1383                                  	; sub di, 160							;di gets incremented even if condition failed hence to return to orignal state
  1384                                  	; mov cx, [bp + 6]					;to keep track of columns to be printed
  1385                                  ; loop_for_white_boundary_3:				;print the bottom boundary
  1386                                  	; mov bx, [bp +10]
  1387                                  	; mov word[es:di], bx	
  1388                                  	; sub di, 2
  1389                                  	; loop loop_for_white_boundary_3
  1390                                  	
  1391                                  	; add di, 2							;di gets incremented even if condition failed hence to return to orignal state
  1392                                  	; mov cx, [bp + 4]					;to keep track of rows to be printed
  1393                                  ; loop_for_white_boundary_4:				;print the left boundary
  1394                                  	; mov bx, [bp +10]
  1395                                  	; mov word[es:di], bx	
  1396                                  	; sub di, 160
  1397                                  	; loop loop_for_white_boundary_4
  1398                                  	
  1399                                  ; ;------------------------------------
  1400                                  	
  1401                                  	
  1402                                  	; pop bx
  1403                                  	; pop dx
  1404                                  	; pop di
  1405                                  	; pop ax
  1406                                  	; pop es
  1407                                  	; pop bp
  1408                                  
  1409                                  	; ret 8
  1410                                  ; ;-----------------------------------------------------------------
  1411                                  ; create_box_end:
  1412                                  	; push bp
  1413                                  	; mov bp, sp
  1414                                  	; push es
  1415                                  	; push ax
  1416                                  	; push di
  1417                                  	; push dx
  1418                                  	; push bx
  1419                                  	
  1420                                  	; mov ax, 0xb800
  1421                                  	; mov es, ax
  1422                                  
  1423                                  ; ;------------------------------------
  1424                                  ; ;PRINTING FOR THE BOX
  1425                                  ; ;------------------------------------
  1426                                  	; mov di, [bp + 8]	;to contain position for printing
  1427                                  	; mov bx,	[bp + 8]	;to always have the start positon
  1428                                  	; mov cx, [bp + 6]	;to keep track of columns to be printed
  1429                                  	; mov dx, 0			;to check if the total no of rows are printed
  1430                                  
  1431                                  ; loop_for_box1:
  1432                                  	; mov word[es:di], 0x6820
  1433                                  	; add di, 2
  1434                                  	; call delay_for_end
  1435                                  	; loop loop_for_box1
  1436                                  
  1437                                  	
  1438                                  	; add bx, 160 		;move to the next line
  1439                                  	; mov di, bx
  1440                                  	; mov cx, [bp + 6]
  1441                                  	
  1442                                  	; add dx, 1			;check for total rows
  1443                                  	; cmp dx, [bp + 4]
  1444                                  	; jne loop_for_box1
  1445                                  ; ;------------------------------------
  1446                                  
  1447                                  	
  1448                                  ; ;------------------------------------
  1449                                  ; ;PRINTING FOR THE WHITE BOUNDARY
  1450                                  ; ;------------------------------------
  1451                                  	; mov di,[bp + 8]						;return to starting point
  1452                                  	; mov cx, [bp + 6]					;to keep track of columns to be printed
  1453                                  	
  1454                                  ; loop_for_white_boundary_11:				;print the top boundary
  1455                                  	; mov bx, [bp +10]
  1456                                  	; mov word[es:di], bx	
  1457                                  	; add di, 2
  1458                                  	; call delay_for_end
  1459                                  	; loop loop_for_white_boundary_11
  1460                                  	
  1461                                  	; sub di, 2							;di gets incremented even if condition failed hence to return to orignal state
  1462                                  	; mov cx, [bp + 4]					;to keep track of rows to be printed
  1463                                  ; loop_for_white_boundary_21:				;print the top boundary
  1464                                  	; mov bx, [bp +10]
  1465                                  	; mov word[es:di], bx	
  1466                                  	; add di, 160
  1467                                  	; call delay_for_end
  1468                                  	; loop loop_for_white_boundary_21
  1469                                  	
  1470                                  	; sub di, 160							;di gets incremented even if condition failed hence to return to orignal state
  1471                                  	; mov cx, [bp + 6]					;to keep track of columns to be printed
  1472                                  ; loop_for_white_boundary_31:				;print the bottom boundary
  1473                                  	; mov bx, [bp +10]
  1474                                  	; mov word[es:di], bx	
  1475                                  	; sub di, 2
  1476                                  	; call delay_for_end
  1477                                  	; loop loop_for_white_boundary_31
  1478                                  	
  1479                                  	; add di, 2							;di gets incremented even if condition failed hence to return to orignal state
  1480                                  	; mov cx, [bp + 4]					;to keep track of rows to be printed
  1481                                  ; loop_for_white_boundary_41:				;print the left boundary
  1482                                  	; mov bx, [bp +10]
  1483                                  	; mov word[es:di], bx	
  1484                                  	; sub di, 160
  1485                                  	; call delay_for_end
  1486                                  	; loop loop_for_white_boundary_41
  1487                                  	
  1488                                  ; ;------------------------------------
  1489                                  	
  1490                                  	
  1491                                  	; pop bx
  1492                                  	; pop dx
  1493                                  	; pop di
  1494                                  	; pop ax
  1495                                  	; pop es
  1496                                  	; pop bp
  1497                                  
  1498                                  	; ret 8
  1499                                  ; ;-----------------------------------------------------------------
  1500                                  
  1501                                  ; ;-----------------------------------------------------------------
  1502                                  ; ;PRINTING FOR THE PAUSE SCREEN
  1503                                  ; ;-----------------------------------------------------------------
  1504                                  ; pause_screen:
  1505                                  	; call saveScreen_state	;save the state of the game
  1506                                  	
  1507                                  	; pusha
  1508                                  	
  1509                                  	; mov ax, 0xb800
  1510                                  	; mov es, ax
  1511                                  	; push cs
  1512                                  	; pop ds
  1513                                  	
  1514                                  	; push 0x7F20 							; color
  1515                                  	; push 1300 								;pushs location of box
  1516                                  	; push 61									;pushs width of the box
  1517                                  	; push 9									;pushs height of the box
  1518                                  	; call create_box							;creates the box for text to be placed in
  1519                                  
  1520                                  	; push pausescreenmessage
  1521                                  	; push 0x6F
  1522                                  	; push word[pausescreenmessage_length]
  1523                                  	; push 0x0C11
  1524                                  	; call printline
  1525                                  	
  1526                                  	; push 0
  1527                                  	; push 24
  1528                                  	; call curosrlocation
  1529                                  	
  1530                                  ; untilcorrectkey:
  1531                                      ; mov ah, 0
  1532                                      ; int 0x16    			; Wait for key input again
  1533                                  	; cmp al, 0Dh 			; enter pressed
  1534                                  	; je chagneexitscreenvalue;exit the game
  1535                                  
  1536                                  	; cmp al, 08h				;enter backspace
  1537                                  	; je returntoorginalstate	;return the game to original state
  1538                                  
  1539                                  	; jmp untilcorrectkey		;wait for user to enter the correct key
  1540                                  
  1541                                  
  1542                                  ; ;RETURNING THE GAME TO PREVIOUS STATE;----------------------------
  1543                                  ; returntoorginalstate:
  1544                                  	; popa
  1545                                  
  1546                                  	; call restoreScreen		;restores original state of the game
  1547                                  	; mov word[cs:pause_flag], 0
  1548                                  	; ret						;return back to keyboard interrupt code
  1549                                  	
  1550                                  ; chagneexitscreenvalue:
  1551                                  	; mov word[cs:shouldexit], 1
  1552                                  	; jmp returntoorginalstate
  1553                                  	
  1554                                  ; ;PRINT END SCREEN ANIMATION;--------------------------------------
  1555                                  ; endscreen:	
  1556                                  	
  1557                                  	; xor ax, ax
  1558                                  	; mov es, ax
  1559                                  	; cli 						; disable interrupts
  1560                                  	; mov ax, [cs:oldisr]
  1561                                  	; mov word [es:9*4], ax 		; store offset at n*4
  1562                                  	; mov ax, [cs:oldisr + 2]
  1563                                  	; mov [es:9*4+2], ax 			; store segment at n*4+2
  1564                                  	; mov ax, [cs:oldisr_timer]
  1565                                  	; mov word [es:8*4], ax 		; store offset at n*4
  1566                                  	; mov ax, [cs:oldisr_timer + 2]
  1567                                  	; mov [es:8*4+2], ax 			; store segment at n*4+2
  1568                                  	; sti 						; enable interrupts
  1569                                  		
  1570                                  	; mov ax, 0xb800
  1571                                  	; mov es, ax
  1572                                  	; mov cx, 2000
  1573                                  	; mov ax, 0x0720
  1574                                  	; mov di, 0
  1575                                  
  1576                                  	; cld
  1577                                  ; loopforendanimation:
  1578                                  	; stosw
  1579                                  	; call delay_for_end			;delay before next box is turned black
  1580                                  	; loop loopforendanimation	;using loop so that delay can be added
  1581                                  	
  1582                                  	; call endofprogram
  1583                                  ; ;-----------------------------------------------------------------
  1584                                  
  1585                                  
  1586                                  ; ;-----------------------------------------------------------------
  1587                                  ; ;CUSTOM DELAY FOR END SCREEN 
  1588                                  ; ;-----------------------------------------------------------------
  1589                                  ; delay_for_end:
  1590                                  	; push cx
  1591                                  	; mov cx, 0x0FFF
  1592                                  ; loop_for_end:
  1593                                  	; loop loop_for_end
  1594                                  	; pop cx
  1595                                  	; ret
  1596                                  ; ;-----------------------------------------------------------------
  1597                                  
  1598                                  
  1599                                  ; ;-----------------------------------------------------------------
  1600                                  ; ;CURSOR LOCATION
  1601                                  ; ;-----------------------------------------------------------------
  1602                                  ; curosrlocation:
  1603                                  	; push bp
  1604                                  	; mov bp,sp
  1605                                  	
  1606                                  	; mov ah, 02h         ; Function to set cursor position
  1607                                  	; mov bh, 0           ; Page number (usually 0 for text mode)
  1608                                  	; mov dh, [bp+4]      ; Row (0-based)
  1609                                  	; mov dl, [bp+6]      ; Column (0-based)
  1610                                  	; int 10h             ; Call BIOS video interrupt
  1611                                  
  1612                                  	; pop bp
  1613                                  	; ret 4
  1614                                  ; ;-----------------------------------------------------------------
  1615                                  
  1616                                  
  1617                                  ; ;-----------------------------------------------------------------
  1618                                  ; ;PRINT NEW LINE
  1619                                  ; ;-----------------------------------------------------------------
  1620                                  ; printline:
  1621                                  		; push bp
  1622                                  		; mov bp, sp
  1623                                  		; push ax
  1624                                  		; push bx
  1625                                  		; push cx
  1626                                  		; push dx
  1627                                  		; push es
  1628                                  		
  1629                                  		; mov ah, 0x13		; service 13 - print string
  1630                                  		; mov al, 0			; subservice 01 – update cursor 
  1631                                  		; mov bh, 0			; output on page 0
  1632                                  		; mov bl, [bp + 8]	; color attrib
  1633                                  		; mov cx, [bp + 6]	; length of string
  1634                                  		; mov dx, [bp + 4]	; row/column
  1635                                  		
  1636                                  		; ; push endscreen_text1
  1637                                  		; ; push 0x00
  1638                                  		; ; push word[cs:endscreen_text1_length]
  1639                                  		; ; push 0x1020
  1640                                  		; ; call printline
  1641                                  		
  1642                                  		; ;es:bp = ds:message
  1643                                  		; push ds
  1644                                  		; pop es				; es=ds segment of string
  1645                                  		; mov bp, [bp + 10]	; bp = offset of string
  1646                                  		
  1647                                  		; INT 0x10			; call BIOS video service
  1648                                  		
  1649                                  		; pop es
  1650                                  		; pop dx
  1651                                  		; pop cx
  1652                                  		; pop bx
  1653                                  		; pop ax
  1654                                  		; pop bp
  1655                                  		
  1656                                  		; ret 8
  1657                                  ; ;-----------------------------------------------------------------
  1658                                  
  1659                                  ; ;-----------------------------------------------------------------
  1660                                  ; ;PRINT NEW LINE
  1661                                  ; ;-----------------------------------------------------------------
  1662                                  ; printliners:
  1663                                  		; push bp
  1664                                  		; mov bp, sp
  1665                                  		; push ax
  1666                                  		; push bx
  1667                                  		; push cx
  1668                                  		; push dx
  1669                                  		; push es
  1670                                  		
  1671                                  		; mov ah, 0x13          ; service 13 - print string
  1672                                  		; mov al, 0             ; subservice 01 – update cursor
  1673                                  		; mov bh, 0             ; output on page 0
  1674                                  		; mov bl, 0x67          ; color attribute
  1675                                  		; mov cx, word[cs:endscreen_text1_length] ; length of string
  1676                                  
  1677                                  		; push ds               ; save current data segment
  1678                                  		; pop es                ; set ES=DS (string's segment)
  1679                                  		; lea bp, endscreen_text1 ; BP = offset of string
  1680                                  		
  1681                                  		; mov dx, 0x1020        ; row/column
  1682                                  		; int 0x10              ; call BIOS video service
  1683                                  		
  1684                                  		; pop es
  1685                                  		; pop dx
  1686                                  		; pop cx
  1687                                  		; pop bx
  1688                                  		; pop ax
  1689                                  		; pop bp
  1690                                  		
  1691                                  		; ret 8
  1692                                  ; ;-----------------------------------------------------------------
  1693                                  
  1694                                  
  1695                                  ; ;-----------------------------------------------------------------
  1696                                  ; ;PRINTS TITLE SCREEN
  1697                                  ; ;-----------------------------------------------------------------
  1698                                  ; title_screen:
  1699                                  	; pusha
  1700                                  	
  1701                                  	; mov ax, 0xb800
  1702                                  	; mov es, ax
  1703                                  	
  1704                                  	; mov bx, 530
  1705                                  	; mov di, bx
  1706                                  	
  1707                                  	; ;PRINTS F------------------------------
  1708                                  	; mov word[es:di],  0x3020
  1709                                  	; mov word[es:di+160],  0x3020
  1710                                  	; mov word[es:di+320],  0x3020
  1711                                  	; mov word[es:di+480],  0x3020
  1712                                  	; mov word[es:di+640],  0x3020
  1713                                  
  1714                                  	; mov word[es:di+2],  0x3020
  1715                                  	; mov word[es:di+4],  0x3020
  1716                                  	; mov word[es:di+6],  0x3020
  1717                                  	
  1718                                  	; mov word[es:di+322],  0x3020
  1719                                  	; mov word[es:di+324],  0x3020
  1720                                  	; ;-------------------------------------
  1721                                  	
  1722                                  	; add bx, 10
  1723                                  	; mov di, bx
  1724                                  	; ;PRINTS R------------------------------
  1725                                  	; mov word[es:di],  0x3020
  1726                                  	; mov word[es:di+160],  0x3020
  1727                                  	; mov word[es:di+320],  0x3020
  1728                                  	; mov word[es:di+480],  0x3020
  1729                                  	; mov word[es:di+640],  0x3020
  1730                                  	
  1731                                  	; mov word[es:di+2],  0x3020
  1732                                  	; mov word[es:di+4],  0x3020
  1733                                  	; mov word[es:di+166],  0x3020
  1734                                  	; mov word[es:di+322],  0x3020
  1735                                  	; mov word[es:di+324],  0x3020
  1736                                  	
  1737                                  	; mov word[es:di+486],  0x3020
  1738                                  	; mov word[es:di+646],  0x3020
  1739                                  	; ;-------------------------------------
  1740                                  	
  1741                                  	; add bx, 10
  1742                                  	; mov di, bx
  1743                                  	; ;PRINTS E------------------------------
  1744                                  	; mov word[es:di],  0x3020
  1745                                  	; mov word[es:di+160],  0x3020
  1746                                  	; mov word[es:di+320],  0x3020
  1747                                  	; mov word[es:di+480],  0x3020
  1748                                  	; mov word[es:di+640],  0x3020
  1749                                  	
  1750                                  	; mov word[es:di+2],  0x3020
  1751                                  	; mov word[es:di+4],  0x3020
  1752                                  	; mov word[es:di+6],  0x3020
  1753                                  	
  1754                                  	; mov word[es:di+322],  0x3020
  1755                                  	; mov word[es:di+324],  0x3020
  1756                                  	; mov word[es:di+326],  0x3020
  1757                                  	
  1758                                  	; mov word[es:di+642],  0x3020
  1759                                  	; mov word[es:di+644],  0x3020
  1760                                  	; mov word[es:di+646],  0x3020
  1761                                  	; ;-------------------------------------
  1762                                  	
  1763                                  	; add bx, 10
  1764                                  	; mov di, bx
  1765                                  	; ;PRINTS A------------------------------
  1766                                  	; mov word[es:di],  0x3020
  1767                                  	; mov word[es:di+160],0x3020
  1768                                  	; mov word[es:di+320],  0x3020
  1769                                  	; mov word[es:di+480],  0x3020
  1770                                  	; mov word[es:di+640],  0x3020
  1771                                  	
  1772                                  	; mov word[es:di+2],  0x3020
  1773                                  	; mov word[es:di+4],  0x3020
  1774                                  	; mov word[es:di+322],  0x3020
  1775                                  	; mov word[es:di+324],  0x3020
  1776                                  	
  1777                                  	; mov word[es:di+6],  0x3020
  1778                                  	; mov word[es:di+166],  0x3020
  1779                                  	; mov word[es:di+326],  0x3020
  1780                                  	; mov word[es:di+486],  0x3020
  1781                                  	; mov word[es:di+646],  0x3020
  1782                                  	; ;-------------------------------------
  1783                                  	
  1784                                  	; add bx, 10
  1785                                  	; mov di, bx
  1786                                  	; ;PRINTS K------------------------------
  1787                                  	; mov word[es:di],  0x3020
  1788                                  	; mov word[es:di+160],  0x3020
  1789                                  	; mov word[es:di+320],  0x3020
  1790                                  	; mov word[es:di+480],  0x3020
  1791                                  	; mov word[es:di+640],  0x3020
  1792                                  	
  1793                                  	
  1794                                  	; mov word[es:di+6],  0x3020
  1795                                  	; mov word[es:di+164],  0x3020
  1796                                  	; mov word[es:di+322],  0x3020
  1797                                  	; mov word[es:di+484],  0x3020
  1798                                  	; mov word[es:di+646],  0x3020
  1799                                  	; ;-------------------------------------
  1800                                  	
  1801                                  	; add bx, 10
  1802                                  	; mov di, bx
  1803                                  	; ;PRINTS Y------------------------------
  1804                                  	; mov word[es:di],  0x3020
  1805                                  	; mov word[es:di+160],  0x3020
  1806                                  	; mov word[es:di+322],  0x3020
  1807                                  
  1808                                  	; mov word[es:di+326],  0x3020
  1809                                  	; mov word[es:di+168],  0x3020
  1810                                  	; mov word[es:di+8],  0x3020
  1811                                  	
  1812                                  	; mov word[es:di+484],  0x3020
  1813                                  	; mov word[es:di+644],  0x3020
  1814                                  	; ;-------------------------------------
  1815                                  	
  1816                                  	; sub bx, 50
  1817                                  	; add bx, 1130	;next line
  1818                                  	; mov di, bx
  1819                                  	; ;PRINTS B------------------------------
  1820                                  	; mov word[es:di],  	  0x6020
  1821                                  	; mov word[es:di+160],  0x6020
  1822                                  	; mov word[es:di+320],  0x6020
  1823                                  	; mov word[es:di+480],  0x6020
  1824                                  	; mov word[es:di+640],  0x6020
  1825                                  	
  1826                                  	; mov word[es:di+2],  0x6020
  1827                                  	; mov word[es:di+4],  0x6020
  1828                                  	; mov word[es:di+322],  0x6020
  1829                                  	; mov word[es:di+324],  0x6020
  1830                                  	; mov word[es:di+642],  0x6020
  1831                                  	; mov word[es:di+644],  0x6020
  1832                                  	
  1833                                  	; mov word[es:di+166],  0x6020
  1834                                  	; mov word[es:di+486],  0x6020
  1835                                  	; ;-------------------------------------
  1836                                  	
  1837                                  	; add bx, 10
  1838                                  	; mov di, bx
  1839                                  	; ;PRINTS I------------------------------
  1840                                  	; mov word[es:di],  	  0x6020
  1841                                  	; mov word[es:di+2],  	  0x6020
  1842                                  	; mov word[es:di+4],  	  0x6020
  1843                                  	; mov word[es:di+6],  	  0x6020
  1844                                  	; mov word[es:di+8],  	  0x6020
  1845                                  	
  1846                                  	; mov word[es:di+640],  	  0x6020
  1847                                  	; mov word[es:di++642],  	  0x6020
  1848                                  	; mov word[es:di++644],  	  0x6020
  1849                                  	; mov word[es:di++646],  	  0x6020
  1850                                  	; mov word[es:di++648],  	  0x6020
  1851                                  	
  1852                                  	; mov word[es:di+164],  0x6020
  1853                                  	; mov word[es:di+324],  0x6020
  1854                                  	; mov word[es:di+484],  0x6020
  1855                                  	; ;-------------------------------------
  1856                                  	
  1857                                  	; add bx, 12
  1858                                  	; mov di, bx
  1859                                  	; ;PRINTS R------------------------------
  1860                                  	; mov word[es:di],  0x6020
  1861                                  	; mov word[es:di+160],  0x6020
  1862                                  	; mov word[es:di+320],  0x6020
  1863                                  	; mov word[es:di+480],  0x6020
  1864                                  	; mov word[es:di+640],  0x6020
  1865                                  	
  1866                                  	; mov word[es:di+2],  0x6020
  1867                                  	; mov word[es:di+4],  0x6020
  1868                                  	; mov word[es:di+166],  0x6020
  1869                                  	; mov word[es:di+322],  0x6020
  1870                                  	; mov word[es:di+324],  0x6020
  1871                                  	
  1872                                  	; mov word[es:di+486],  0x6020
  1873                                  	; mov word[es:di+646],  0x6020
  1874                                  	; ;-------------------------------------
  1875                                  	
  1876                                  	; add bx, 10
  1877                                  	; mov di, bx
  1878                                  	; ;PRINTS D------------------------------
  1879                                  	; mov word[es:di],  0x6020
  1880                                  	; mov word[es:di+160],  0x6020
  1881                                  	; mov word[es:di+320],  0x6020
  1882                                  	; mov word[es:di+480],  0x6020
  1883                                  	; mov word[es:di+640],  0x6020
  1884                                  	
  1885                                  	; mov word[es:di+2],  0x6020
  1886                                  	; mov word[es:di+642],  0x6020
  1887                                  	; mov word[es:di+4],  0x6020
  1888                                  	; mov word[es:di+644],  0x6020
  1889                                  	
  1890                                  	; mov word[es:di+166],  0x6020
  1891                                  	; mov word[es:di+326],  0x6020
  1892                                  	; mov word[es:di+486],  0x6020
  1893                                  	
  1894                                  	; ;-------------------------------------
  1895                                  	
  1896                                  	; sub bx,32
  1897                                  	; sub bx, 654
  1898                                  
  1899                                  	; mov di, bx
  1900                                  	
  1901                                  	; ;prints border around bird------------
  1902                                  	; mov cx, 4
  1903                                  ; loop_title_1:
  1904                                  	; mov word[es:di],  0x2720
  1905                                  	; sub di, 2
  1906                                  	; loop loop_title_1
  1907                                  	
  1908                                  	; mov cx, 11
  1909                                  ; loop_title_2:
  1910                                  	; mov word[es:di],  0x2720
  1911                                  	; add di, 160
  1912                                  	; loop loop_title_2
  1913                                  	
  1914                                  	; mov cx, 41
  1915                                  ; loop_title_3:
  1916                                  	; mov word[es:di],  0x2720
  1917                                  	; add di, 2
  1918                                  	; loop loop_title_3
  1919                                  	
  1920                                  	; mov cx, 11
  1921                                  ; loop_title_4:
  1922                                  	; mov word[es:di],  0x2720
  1923                                  	; sub di, 160
  1924                                  	; loop loop_title_4
  1925                                  	
  1926                                  	; mov cx, 6
  1927                                  ; loop_title_5:
  1928                                  	; mov word[es:di],  0x2720
  1929                                  	; sub di, 2
  1930                                  	; loop loop_title_5
  1931                                  ; ;-------------------------------------
  1932                                  
  1933                                  	; ;prints enter any key test
  1934                                  	; push title_text1
  1935                                  	; push 0x87
  1936                                  	; push word[title_text1_length]
  1937                                  	; push 0x1321
  1938                                  	; call printline
  1939                                  	
  1940                                  	; push title_text4
  1941                                  	; push 0x07
  1942                                  	; push word[title_text4_length]
  1943                                  	; push 0x1600
  1944                                  	; call printline
  1945                                  	
  1946                                  	; push title_text2
  1947                                  	; push 0x07
  1948                                  	; push word[title_text2_length]
  1949                                  	; push 0x1700
  1950                                  	; call printline
  1951                                  	
  1952                                  	; push title_text3
  1953                                  	; push 0x07
  1954                                  	; push word[title_text2_length]
  1955                                  	; push 0x1800
  1956                                  	; call printline
  1957                                  	
  1958                                  	; popa
  1959                                  	; ret
  1960                                  ; ;-----------------------------------------------------------------
  1961                                  ; ;CHECKS SCORE OF THE GAME
  1962                                  ; ;-----------------------------------------------------------------	
  1963                                  ; checkscore:
  1964                                  	; pusha
  1965                                  	; mov ax, [cs:birdC]
  1966                                  	; sub ax, 2
  1967                                  	; mov bx, [cs:CurrentCol]
  1968                                  	; add bx, word[cs:pipeWidth]
  1969                                  	; cmp ax, bx
  1970                                  	; jne endofcheckscore
  1971                                  	; inc word[cs:scoreofgame]
  1972                                  	
  1973                                  	; push 3988
  1974                                  	; push word[cs:scoreofgame]
  1975                                  	; call printnum
  1976                                  	
  1977                                  ; endofcheckscore:
  1978                                  	; popa
  1979                                  	; ret
  1980                                  ; ;-----------------------------------------------------------------
  1981                                  
  1982                                  
  1983                                  ; ;-----------------------------------------------------------------
  1984                                  ; ;MAKES THE BIRD FALL DOWN
  1985                                  ; ;-----------------------------------------------------------------
  1986                                  ; Birdfalls:
  1987                                  	; pusha 
  1988                                  	
  1989                                  	; call saveScreen_state
  1990                                  	; mov byte[cs:birdDirection], 'D'
  1991                                  	
  1992                                  	; mov cx, 3
  1993                                  ; loop3:	
  1994                                  	; cmp word[cs:birdR], 21
  1995                                  	; je endoffuc
  1996                                  	
  1997                                  	; call moveBird
  1998                                  	; call delay
  1999                                  	; call delay
  2000                                  	; loop loop3
  2001                                  	
  2002                                  	; cmp word[cs:birdR], 21
  2003                                  	; je endoffuc
  2004                                  ; untilbirdreachesground:
  2005                                  	; call moveBird_down
  2006                                  	; call delay
  2007                                  	; call delay
  2008                                  	; cmp word[cs:birdR], 21
  2009                                  	; jne untilbirdreachesground
  2010                                  	
  2011                                  ; endoffuc:	
  2012                                  	; popa
  2013                                  	; ret
  2014                                  	
  2015                                  ; ;-----------------------------------------------------------------
  2016                                  ; ;CREATES END SCREEN
  2017                                  ; ;-----------------------------------------------------------------
  2018                                  ; gameoverscreen:
  2019                                  	; xor ax, ax
  2020                                  	; mov es, ax
  2021                                  	; cli 						; disable interrupts
  2022                                  	; mov ax, [cs:oldisr]
  2023                                  	; mov word [es:9*4], ax 		; store offset at n*4
  2024                                  	; mov ax, [cs:oldisr + 2]
  2025                                  	; mov [es:9*4+2], ax 			; store segment at n*4+2
  2026                                  	; mov ax, [cs:oldisr_timer]
  2027                                  	; mov word [es:8*4], ax 		; store offset at n*4
  2028                                  	; mov ax, [cs:oldisr_timer + 2]
  2029                                  	; mov [es:8*4+2], ax 			; store segment at n*4+2
  2030                                  	; sti 						; enable interrupts
  2031                                  	
  2032                                  	; call delay
  2033                                  	; call delay
  2034                                  	; call delay
  2035                                  	; call delay
  2036                                  	
  2037                                  	; call Birdfalls
  2038                                  	
  2039                                  	; call printbrownboxattherightbottom
  2040                                  	
  2041                                  	; pusha
  2042                                  	; push word[cs:border_end_screen_color] 							; color
  2043                                  	; push 820 ; location
  2044                                  	; push 61	; width
  2045                                  	; push 15	; height
  2046                                  	; call create_box_end
  2047                                  	
  2048                                  	; mov ax, 0xb800
  2049                                  	; mov es, ax
  2050                                  	
  2051                                  	; mov bx, 1474
  2052                                  	; mov di, bx
  2053                                  	; mov ax, word[cs:gameover_color]
  2054                                  	; ;PRINTS G------------------------------
  2055                                  	; mov word[es:di],  ax
  2056                                  	; mov word[es:di+160],  ax
  2057                                  	; mov word[es:di+320],  ax
  2058                                  	; mov word[es:di+480],  ax
  2059                                  	; mov word[es:di+640],  ax
  2060                                  
  2061                                  	; mov word[es:di+2],  ax
  2062                                  	; mov word[es:di+4],  ax
  2063                                  	; mov word[es:di+6],  ax
  2064                                  	
  2065                                  	; mov word[es:di+640+2],  ax
  2066                                  	; mov word[es:di+640+4],  ax
  2067                                  	; mov word[es:di+640+6],  ax
  2068                                  	
  2069                                  	; mov word[es:di+480+6],  ax
  2070                                  	; mov word[es:di+320+6],  ax
  2071                                  	; mov word[es:di+320+4],  ax
  2072                                  	; ;-------------------------------------
  2073                                  	
  2074                                  	; add bx, 10
  2075                                  	; mov di, bx
  2076                                  	; ;PRINTS A------------------------------
  2077                                  	; mov word[es:di],  	ax
  2078                                  	; mov word[es:di+160],ax
  2079                                  	; mov word[es:di+320],  ax
  2080                                  	; mov word[es:di+480],  ax
  2081                                  	; mov word[es:di+640],  ax
  2082                                  	
  2083                                  	; mov word[es:di+2],  ax
  2084                                  	; mov word[es:di+4],  ax
  2085                                  	; mov word[es:di+322],  ax
  2086                                  	; mov word[es:di+324],  ax
  2087                                  	
  2088                                  	; mov word[es:di+6],  ax
  2089                                  	; mov word[es:di+166],  ax
  2090                                  	; mov word[es:di+326],  ax
  2091                                  	; mov word[es:di+486],  ax
  2092                                  	; mov word[es:di+646],  ax
  2093                                  	; ;-------------------------------------
  2094                                  	
  2095                                  	; add bx, 10
  2096                                  	; mov di, bx
  2097                                  	; ;PRINTS M------------------------------
  2098                                  	; mov word[es:di],  		ax
  2099                                  	; mov word[es:di+160],	ax
  2100                                  	; mov word[es:di+320],  	ax
  2101                                  	; mov word[es:di+480],  	ax
  2102                                  	; mov word[es:di+640],  	ax
  2103                                  	
  2104                                  	; mov word[es:di],  		ax
  2105                                  	; mov word[es:di+160+2],	ax
  2106                                  	; mov word[es:di+320+4],  ax
  2107                                  	
  2108                                  	; mov word[es:di+8],  	ax
  2109                                  	; mov word[es:di+160+6],	ax
  2110                                  	
  2111                                  	; mov word[es:di+8],  	ax
  2112                                  	; mov word[es:di+168],  	ax
  2113                                  	; mov word[es:di+328],  	ax
  2114                                  	; mov word[es:di+488],  	ax
  2115                                  	; mov word[es:di+648], 	ax
  2116                                  	; ;-------------------------------------
  2117                                  
  2118                                  	; add bx, 12
  2119                                  	; mov di, bx
  2120                                  	; ;PRINTS E------------------------------
  2121                                  	; mov word[es:di], 	 	ax
  2122                                  	; mov word[es:di+160],  	ax
  2123                                  	; mov word[es:di+320],  	ax
  2124                                  	; mov word[es:di+480],  	ax
  2125                                  	; mov word[es:di+640], 	ax
  2126                                  	
  2127                                  	; mov word[es:di+2],  	ax
  2128                                  	; mov word[es:di+4],  	ax
  2129                                  	; mov word[es:di+6],  	ax
  2130                                  	
  2131                                  	; mov word[es:di+322],  	ax
  2132                                  	; mov word[es:di+324],  	ax
  2133                                  	; mov word[es:di+326],  	ax
  2134                                  	
  2135                                  	; mov word[es:di+642],  	ax
  2136                                  	; mov word[es:di+644],  	ax
  2137                                  	; mov word[es:di+646],  	ax
  2138                                  	; ;-------------------------------------
  2139                                  	
  2140                                  	; add bx, 20
  2141                                  	; mov di, bx
  2142                                  	; ;PRINTS O------------------------------
  2143                                  	; mov word[es:di], 	 	ax
  2144                                  	; mov word[es:di+160],  	ax
  2145                                  	; mov word[es:di+320],  	ax
  2146                                  	; mov word[es:di+480],  	ax
  2147                                  	; mov word[es:di+640], 	ax
  2148                                  	
  2149                                  	; mov word[es:di+6], 	 	ax
  2150                                  	; mov word[es:di+160+6],  ax
  2151                                  	; mov word[es:di+320+6],  ax
  2152                                  	; mov word[es:di+480+6],  ax
  2153                                  	; mov word[es:di+640+6], 	ax
  2154                                  	
  2155                                  	; mov word[es:di+2],  	ax
  2156                                  	; mov word[es:di+4],  	ax
  2157                                  	; mov word[es:di+6],  	ax
  2158                                  	
  2159                                  	; mov word[es:di+642],  	ax
  2160                                  	; mov word[es:di+644],  	ax
  2161                                  	; mov word[es:di+646],  	ax
  2162                                  	; ;-------------------------------------
  2163                                  	
  2164                                  	; add bx, 10
  2165                                  	; mov di, bx
  2166                                  	; ;PRINTS V------------------------------
  2167                                  	; mov word[es:di], 	 	ax
  2168                                  	; mov word[es:di+160],  	ax
  2169                                  	; mov word[es:di+320+2],  ax
  2170                                  	; mov word[es:di+480+2],  ax
  2171                                  	; mov word[es:di+640+4], 	ax
  2172                                  	
  2173                                  	; mov word[es:di+8], 	 	ax
  2174                                  	; mov word[es:di+160+8],  ax
  2175                                  	; mov word[es:di+320+6],  ax
  2176                                  	; mov word[es:di+480+6],  ax
  2177                                  	; mov word[es:di+640+4], 	ax
  2178                                  	; ;-------------------------------------
  2179                                  	
  2180                                  	; add bx, 12
  2181                                  	; mov di, bx
  2182                                  	; ;PRINTS E------------------------------
  2183                                  	; mov word[es:di], 	 	ax
  2184                                  	; mov word[es:di+160],  	ax
  2185                                  	; mov word[es:di+320],  	ax
  2186                                  	; mov word[es:di+480],  	ax
  2187                                  	; mov word[es:di+640], 	ax
  2188                                  	
  2189                                  	; mov word[es:di+2],  	ax
  2190                                  	; mov word[es:di+4],  	ax
  2191                                  	; mov word[es:di+6],  	ax
  2192                                  	
  2193                                  	; mov word[es:di+322],  	ax
  2194                                  	; mov word[es:di+324],  	ax
  2195                                  	; mov word[es:di+326],  	ax
  2196                                  	
  2197                                  	; mov word[es:di+642],  	ax
  2198                                  	; mov word[es:di+644],  	ax
  2199                                  	; mov word[es:di+646],  	ax
  2200                                  	; ;-------------------------------------
  2201                                  	
  2202                                  	; add bx, 10
  2203                                  	; mov di, bx
  2204                                  	; ;PRINTS R------------------------------
  2205                                  	; mov word[es:di],  		ax
  2206                                  	; mov word[es:di+160],  	ax
  2207                                  	; mov word[es:di+320],  	ax
  2208                                  	; mov word[es:di+480],  	ax
  2209                                  	; mov word[es:di+640],  	ax
  2210                                  	
  2211                                  	; mov word[es:di+2],  	ax
  2212                                  	; mov word[es:di+4],  	ax
  2213                                  	; mov word[es:di+166],  	ax
  2214                                  	; mov word[es:di+322],  	ax
  2215                                  	; mov word[es:di+324],  	ax
  2216                                  	
  2217                                  	; mov word[es:di+486],  	ax
  2218                                  	; mov word[es:di+646],  	ax
  2219                                  	; ;-------------------------------------
  2220                                  	
  2221                                  	; push 2640
  2222                                  	; push word[cs:scoreofgame]
  2223                                  	; call printnum
  2224                                  	
  2225                                  	; push cs
  2226                                  	; pop ds	
  2227                                  	; push endscreen_text1
  2228                                  	; push 0x6F
  2229                                  	; push word[cs:endscreen_text1_length]
  2230                                  	; push 0x1020
  2231                                  	; call printline
  2232                                  	
  2233                                  	; mov ax, 0xb800
  2234                                  	; mov es, ax
  2235                                  	; mov cx, 2000
  2236                                  	; mov ax, 0x0720
  2237                                  	; mov di, 0
  2238                                  	
  2239                                  	; jmp endofprogram
  2240                                  ; ;-----------------------------------------------------------------
  2241                                  
  2242                                  ; printnum: 
  2243                                  	; push bp
  2244                                  	; mov bp, sp
  2245                                  	; push es
  2246                                  	; push ax
  2247                                  	; push bx
  2248                                  	; push cx
  2249                                  	; push dx
  2250                                  	; push di
  2251                                  
  2252                                  	; mov ax, 0xb800
  2253                                  	; mov es, ax 		; point es to video base
  2254                                  	
  2255                                  	; mov ax, [bp+4] 	; load number in ax
  2256                                  	; mov bx, 10 		; use base 10 for division
  2257                                  	; mov cx, 0 		; initialize count of digits
  2258                                  	
  2259                                  ; nextdigit: 
  2260                                  	; mov dx, 0 		; zero upper half of dividend
  2261                                  	; div bx ; divide by 10
  2262                                  	; add dl, 0x30 ; convert digit into ascii value
  2263                                  	; push dx ; save ascii value on stack
  2264                                  	; inc cx ; increment count of values
  2265                                  	; cmp ax, 0 ; is the quotient zero
  2266                                  	; jnz nextdigit ; if no divide it again
  2267                                  	
  2268                                  	; mov di, [bp + 6] ; point di to 2640 index
  2269                                  ; nextpos: 
  2270                                  	; pop dx ; remove a digit from the stack
  2271                                  	; mov dh, 0x6F ; use normal attribute
  2272                                  	; mov [es:di], dx ; print char on screen
  2273                                  	; add di, 2 ; move to next screen location
  2274                                  	; loop nextpos ; repeat for all digits on stac
  2275                                  	
  2276                                  	; pop di
  2277                                  	; pop dx
  2278                                  	; pop cx
  2279                                  	; pop bx
  2280                                  	; pop ax 
  2281                                  	; pop es
  2282                                  	; pop bp
  2283                                  	; ret 4
  2284                                  
  2285                                  
  2286                                  ; ;-----------------------------------------------------------------
  2287                                  ; ;CREATES INSTRUCTION SCREEN AT THE START
  2288                                  ; ;-----------------------------------------------------------------
  2289                                  ; create_instruction_screen:
  2290                                  	; pusha
  2291                                  	
  2292                                  	; push 0x7F20 							; color
  2293                                  	; push 1140 								;pushs location of box
  2294                                  	; push 61									;pushs width of the box
  2295                                  	; push 11									;pushs height of the box
  2296                                  	; call create_box							;creates the box for text to be placed in
  2297                                  
  2298                                  	; mov ax, 0xb800
  2299                                  	; mov es, ax										
  2300                                  	; push cs
  2301                                  	; pop ds									;loads cs in ds
  2302                                  	
  2303                                  	; push instructionscreenmessage1
  2304                                  	; push 0x6B
  2305                                  	; push word[instructionscreenmessage1_length]
  2306                                  	; push 0x090C
  2307                                  	; call printline
  2308                                  	
  2309                                  	; push instructionscreenmessage2
  2310                                  	; push 0x6F
  2311                                  	; push word[instructionscreenmessage2_length]
  2312                                  	; push 0x0A0C
  2313                                  	; call printline
  2314                                  	
  2315                                  	; push instructionscreenmessage3
  2316                                  	; push 0x6F
  2317                                  	; push word[instructionscreenmessage3_length]
  2318                                  	; push 0x0B0C
  2319                                  	; call printline
  2320                                  	
  2321                                  	; push instructionscreenmessage4
  2322                                  	; push 0x6F
  2323                                  	; push word[instructionscreenmessage4_length]
  2324                                  	; push 0x0C0C
  2325                                  	; call printline
  2326                                  	
  2327                                  	; push instructionscreenmessage5
  2328                                  	; push 0x6B
  2329                                  	; push word[instructionscreenmessage5_length]
  2330                                  	; push 0x0D0C
  2331                                  	; call printline
  2332                                  	
  2333                                  	; push instructionscreenmessage6
  2334                                  	; push 0x6F
  2335                                  	; push word[instructionscreenmessage6_length]
  2336                                  	; push 0x0E0C
  2337                                  	; call printline
  2338                                  	
  2339                                  	; push instructionscreenmessage7
  2340                                  	; push 0x6F
  2341                                  	; push word[instructionscreenmessage7_length]
  2342                                  	; push 0x0F0C
  2343                                  	; call printline
  2344                                  
  2345                                  	; push 0
  2346                                  	; push 24
  2347                                  	; call curosrlocation
  2348                                  	
  2349                                  	; popa
  2350                                  	; ret
  2351                                  ; ;-----------------------------------------------------------------
  2352                                  
  2353                                  ; ;process control block
  2354                                  		; ; ax,bx,ip,cs,flags storage area
  2355                                  ; pcb:	dw 0, 0, 0, 0, 0 ; task0 regs[cs:pcb + 0]
  2356                                  		; dw 0, 0, 0, 0, 0 ; task1 regs start at [cs:pcb + 10]
  2357                                  		; dw 0, 0, 0, 0, 0 ; task2 regs start at [cs:pcb + 20]
  2358                                  
  2359                                  ; current:	db 0 ; index of current task
  2360                                  
  2361                                  ; music_length: dw 20836 
  2362                                  ; music_data: incbin "titlescreen.imf"
  2363                                  
  2364                                  ; ;-----------------------------------------------------------------
  2365                                  ; ; timer interrupt service routine
  2366                                  ; ;-----------------------------------------------------------------
  2367                                  ; timer:		push si
  2368                                  			; push bx
  2369                                  
  2370                                  			; cmp word [cs:starttimer], 1 ; is the printing flag set
  2371                                  			; jne skipall ; no, leave the ISR
  2372                                  
  2373                                  			; inc word [cs:counting] ; increment tick count
  2374                                  			; mov ax, word[cs:pausetime]
  2375                                  			; cmp word[cs:counting], ax
  2376                                  			; je reset_starttimer
  2377                                  			
  2378                                  ; skipall:	
  2379                                  			; mov bl, [cs:current]				; read index of current task ... bl = 0
  2380                                  			; mov ax, 10							; space used by one task
  2381                                  			; mul bl								; multiply to get start of task.. 10x0 = 0
  2382                                  			; mov bx, ax							; load start of task in bx....... bx = 0
  2383                                  
  2384                                  			; pop ax								; read original value of bx
  2385                                  			; mov [cs:pcb+bx+2], ax				; space for current task's BX
  2386                                  
  2387                                  			; pop ax								; read original value of si
  2388                                  			; mov [cs:pcb+bx+0], ax				; space for current task's SI
  2389                                  
  2390                                  			; pop ax								; read original value of ip
  2391                                  			; mov [cs:pcb+bx+4], ax				; space for current task
  2392                                  
  2393                                  			; pop ax								; read original value of cs
  2394                                  			; mov [cs:pcb+bx+6], ax				; space for current task
  2395                                  
  2396                                  			; pop ax								; read original value of flags
  2397                                  			; mov [cs:pcb+bx+8], ax					; space for current task
  2398                                  
  2399                                  			; inc byte [cs:current]				; update current task index...1
  2400                                  			; cmp byte [cs:current], 3			; is task index out of range
  2401                                  			; jne skipreset						; no, proceed
  2402                                  			; mov byte [cs:current], 0			; yes, reset to task 0
  2403                                  
  2404                                  ; skipreset:	mov bl, [cs:current]				; read index of current task
  2405                                  			; mov ax, 10							; space used by one task
  2406                                  			; mul bl								; multiply to get start of task
  2407                                  			; mov bx, ax							; load start of task in bx... 10
  2408                                  			
  2409                                  			; mov al, 0x20
  2410                                  			; out 0x20, al						; send EOI to PIC
  2411                                  
  2412                                  			; push word [cs:pcb+bx+8]				; flags of new task... pcb+10+8
  2413                                  			; push word [cs:pcb+bx+6]				; cs of new task ... pcb+10+6
  2414                                  			; push word [cs:pcb+bx+4]				; ip of new task... pcb+10+4
  2415                                  			; mov si, [cs:pcb+bx+0]				; si of new task...pcb+10+0
  2416                                  			; mov bx, [cs:pcb+bx+2]				; bx of new task...pcb+10+2
  2417                                  			
  2418                                  			; iret ; return from interrupt
  2419                                  			
  2420                                  ; reset_starttimer:
  2421                                  			; mov word[cs:counting], 0
  2422                                  			; mov word[cs:starttimer], 0
  2423                                  			; mov byte[cs:birdDirection], 'D'
  2424                                  			; jmp skipall
  2425                                  ; ;-----------------------------------------------------------------
  2426                                  
  2427                                  ; music:
  2428                                  		; ; 2) now let's just read "getthem.imf" file content
  2429                                  		; ;    every 4 bytes. I'll use SI register as index.
  2430                                  		
  2431                                  		; ;mov si, 0 ; current index for music_data
  2432                                  		
  2433                                  		; ;mov di, 8
  2434                                  		
  2435                                  	; .next_note:
  2436                                  	
  2437                                  		; ; 3) the first byte is the opl2 register
  2438                                  		; ;    that is selected through port 388h
  2439                                  		; mov dx, 388h
  2440                                  		; mov al, [cs:si + music_data + 0]
  2441                                  		; out dx, al
  2442                                  		
  2443                                  		; ; 4) the second byte is the data need to
  2444                                  		; ;    be sent through the port 389h
  2445                                  		; mov dx, 389h
  2446                                  		; mov al, [cs:si + music_data + 1]
  2447                                  		; out dx, al
  2448                                  		
  2449                                  		; ; 5) the last 2 bytes form a word
  2450                                  		; ;    and indicate the number of waits (delay)
  2451                                  		; mov bx, [cs:si + music_data + 2]
  2452                                  		
  2453                                  		; ; 6) then we can move to next 4 bytes
  2454                                  		; add si, 4
  2455                                  		
  2456                                  		; ; 7) now let's implement the delay
  2457                                  		
  2458                                  	; .repeat_delay:	
  2459                                  		; mov cx, 1500 ; <- change this value according to the speed
  2460                                  		              ; ;    of your computer / emulator
  2461                                  	; .delay:
  2462                                  	
  2463                                  		; ; if keypress then exit
  2464                                  		; ; mov ah, 1
  2465                                  		; ; int 16h
  2466                                  		; ; jnz .exit
  2467                                  		
  2468                                  		; loop .delay
  2469                                  		
  2470                                  		; dec bx
  2471                                  		; jg .repeat_delay
  2472                                  		
  2473                                  		; cmp si, [cs:music_length]
  2474                                  		; je .exit
  2475                                  		
  2476                                  		; ;dec di
  2477                                  		; ;cmp di, 0
  2478                                  		; ;jne .next_note
  2479                                  		
  2480                                  		; jmp music
  2481                                  		
  2482                                  		; ; 8) let's send all content of music_data
  2483                                  		; cmp si, [cs:music_length]
  2484                                  		; jb .next_note
  2485                                  		
  2486                                  	; .exit:	
  2487                                  		; ; return to DOS
  2488                                  		; mov si, 0
  2489                                  		; ;dec di
  2490                                  		; ;cmp di, 0
  2491                                  		; ;jne .next_note
  2492                                  		; jmp music
  2493                                  
  2494                                  ; music_length1: dw 6928
  2495                                  ; music_data1: incbin "background.imf"
  2496                                  
  2497                                  ; music1:
  2498                                  		; ; 2) now let's just read "getthem.imf" file content
  2499                                  		; ;    every 4 bytes. I'll use SI register as index.
  2500                                  		
  2501                                  		; mov si, 0 ; current index for music_data
  2502                                  		
  2503                                  		; push cs
  2504                                  		; pop ds
  2505                                  		
  2506                                  	; .next_note1:
  2507                                  	
  2508                                  		; ; 3) the first byte is the opl2 register
  2509                                  		; ;    that is selected through port 388h
  2510                                  		; mov dx, 388h
  2511                                  		; mov al, [cs:si + music_data1 + 0]
  2512                                  		; out dx, al
  2513                                  		
  2514                                  		; ; 4) the second byte is the data need to
  2515                                  		; ;    be sent through the port 389h
  2516                                  		; mov dx, 389h
  2517                                  		; mov al, [cs:si + music_data1 + 1]
  2518                                  		; out dx, al
  2519                                  		
  2520                                  		; ; 5) the last 2 bytes form a word
  2521                                  		; ;    and indicate the number of waits (delay)
  2522                                  		; mov bx, [cs:si + music_data1 + 2]
  2523                                  		
  2524                                  		; ; 6) then we can move to next 4 bytes
  2525                                  		; add si, 4
  2526                                  		
  2527                                  		; ; 7) now let's implement the delay
  2528                                  		
  2529                                  	; .repeat_delay1:	
  2530                                  		; mov cx, 600 ; <- change this value according to the speed
  2531                                  		              ; ;    of your computer / emulator
  2532                                  	; .delay1:
  2533                                  	
  2534                                  		; ; if keypress then exit
  2535                                  		; mov ah, 1   ; ah, 1 since it should not wait for the input
  2536                                  		; int 16h
  2537                                  		; jnz .exit1
  2538                                  		
  2539                                  		; loop .delay1
  2540                                  		
  2541                                  		; dec bx
  2542                                  		; jg .repeat_delay1
  2543                                  		
  2544                                  		; ; 8) let's send all content of music_data
  2545                                  		; cmp si, [cs:music_length1]
  2546                                  		; jb .next_note1
  2547                                  		
  2548                                  		; mov si, 0
  2549                                  		; jmp .next_note1
  2550                                  		
  2551                                  	; .exit1:	
  2552                                  		; ; return to DOS
  2553                                  		; ret
  2554                                  
  2555                                  
  2556                                  ; ;-----------------------------------------------------------------
  2557                                  ; ; keyboard interrupt service routine
  2558                                  ; ;-----------------------------------------------------------------
  2559                                  ; kbisr:		push ax
  2560                                  			; push es
  2561                                  
  2562                                  			; mov ax, 0xb800
  2563                                  			; mov es, ax ; point es to video memory
  2564                                  
  2565                                  			; in al, 0x60 ; read a char from keyboard port
  2566                                  
  2567                                  			; cmp al, 0x01  ;esc pressed
  2568                                  			; jne spacecmp ;pauses the game and opens a instruction screen
  2569                                  			; mov word [cs:pause_flag], 1
  2570                                  
  2571                                  ; spacecmp:  	cmp al, 0xb9 ; space key released
  2572                                  			; jne nextcmp ; no, try next comparison
  2573                                  			; mov word[cs:starttimer], 1
  2574                                  			; mov byte[cs:birdDirection], 'S'
  2575                                  			; jmp nomatch ; leave interrupt routine
  2576                                  
  2577                                  ; nextcmp:	cmp al, 0x39 ; has the space key pressed
  2578                                  			; jne nomatch
  2579                                  			; mov word[cs:counting], 0
  2580                                  			; mov word[cs:starttimer], 0
  2581                                  			; mov ax, [cs:birdR]
  2582                                  			; sub ax, 1
  2583                                  			; mov byte[cs:birdDirection], 'U'
  2584                                  			; cmp ax, 0
  2585                                  			; jne nomatch
  2586                                  			
  2587                                  			; mov byte[cs:birdDirection], 'S'
  2588                                  			; jmp nomatch ; leave interrupt routine
  2589                                  
  2590                                  ; nomatch:	pop es
  2591                                  			; pop ax
  2592                                  			; jmp far [cs:oldisr] ; call the original ISR
  2593                                  
  2594                                  ; exit:		mov al, 0x20
  2595                                  			; out 0x20, al ; send EOI to PIC
  2596                                  			; pop es
  2597                                  			; pop ax
  2598                                  			; iret ; return from interrupt
  2599                                  ; ;-----------------------------------------------------------------
  2600                                  
  2601                                  
  2602                                  ; wingCollision:
  2603                                  	; pusha
  2604                                  	
  2605                                  	; mov ax, [cs:birdC]
  2606                                  	; add ax, 1
  2607                                  	; mov bx, [cs:CurrentCol]
  2608                                  	; cmp ax, bx
  2609                                  	; jl exit_WC
  2610                                  	
  2611                                  	; mov ax, [cs:birdR]
  2612                                  	; ;sub ax, 1
  2613                                  	; ;add ax, 1
  2614                                  	; mov bx, [cs:pipeHeight]
  2615                                  	; cmp ax, bx
  2616                                  	; jg exit_WC
  2617                                  	
  2618                                  	; mov word[cs:has_Collided], 1
  2619                                  
  2620                                  ; exit_WC:	
  2621                                  	; popa
  2622                                  	; ret
  2623                                  
  2624                                  ; pipeUCollision:
  2625                                  	; pusha
  2626                                  	
  2627                                  	; verticalCheck:
  2628                                  		; mov ax, [cs:birdC]
  2629                                  		; add ax, 6
  2630                                  		; cmp ax, [cs:CurrentCol]
  2631                                  		; jl exit_pUC
  2632                                  		
  2633                                  		; mov ax, [cs:birdC]
  2634                                  		; add ax, 1
  2635                                  		; mov bx, [cs:CurrentCol]
  2636                                  		; add bx, word[cs:pipeWidth]
  2637                                  		; sub bx, 1
  2638                                  		; cmp ax, bx
  2639                                  		; jg exit_pUC
  2640                                  	
  2641                                  	; horizontalCheckAbove:
  2642                                  		; call wingCollision
  2643                                  		
  2644                                  		; mov ax, [cs:birdR]
  2645                                  		; ;sub ax, 1
  2646                                  		; mov bx, [cs:pipeHeight]
  2647                                  		; cmp ax, bx
  2648                                  		; jg exit_pUC
  2649                                  		
  2650                                  		; ; mov ax, cs:birdC
  2651                                  		; ; sub ax, 1
  2652                                  		; ; mov bx, [cs:CurrentCol]
  2653                                  		; ; add bx, word[cs:pipeWidth]
  2654                                  		; ; sub bx, 1
  2655                                  		; ; cmp ax, bx
  2656                                  		; ; jg exit_pUC
  2657                                  		
  2658                                  		; mov ax, [cs:birdC]
  2659                                  		; add ax, 5
  2660                                  		; mov bx, [cs:CurrentCol]
  2661                                  		; add bx, word[cs:pipeWidth]
  2662                                  		; sub bx, 1
  2663                                  		; cmp ax, bx
  2664                                  		; jg exit_pUC
  2665                                  	
  2666                                  	; collisionU:
  2667                                  		; mov word[cs:has_Collided], 1
  2668                                  
  2669                                  ; exit_pUC:
  2670                                  	; popa
  2671                                  	; ret
  2672                                  
  2673                                  ; pipeDCollision:
  2674                                  	; pusha
  2675                                  	
  2676                                  	; verticalCheckBelow:
  2677                                  		; mov ax, [cs:birdC]
  2678                                  		; add ax, 6
  2679                                  		; cmp ax, [cs:CurrentCol]
  2680                                  		; jl exit_pDC
  2681                                  		
  2682                                  		; mov ax, [cs:birdC]
  2683                                  		; add ax, 1
  2684                                  		; mov bx, [cs:CurrentCol]
  2685                                  		; add bx, word[cs:pipeWidth]
  2686                                  		; sub bx, 1
  2687                                  		; cmp ax, bx
  2688                                  		; jg exit_pDC
  2689                                  	
  2690                                  	; horizontalCheckBelow:
  2691                                  		; mov ax, [cs:birdR]
  2692                                  		; add ax, 1
  2693                                  		; mov bx, [cs:pipeHeight]
  2694                                  		; add bx, word[cs:difference]
  2695                                  		; sub bx, 1
  2696                                  		; cmp ax, bx
  2697                                  		; jl exit_pDC
  2698                                  		
  2699                                  		; mov ax, [cs:birdC]
  2700                                  		; mov bx, [cs:CurrentCol]
  2701                                  		; add bx, word[cs:pipeWidth]
  2702                                  		; sub bx, 1
  2703                                  		; cmp ax, bx
  2704                                  		; jg exit_pDC
  2705                                  	
  2706                                  	; collisionD:
  2707                                  		; mov word[cs:has_Collided], 1
  2708                                  
  2709                                  ; exit_pDC:
  2710                                  	; popa
  2711                                  	; ret
  2712                                  		
  2713                                  
  2714                                  ; groundCollision:
  2715                                  	; pusha
  2716                                  	
  2717                                  	; mov ax, [cs:birdR]
  2718                                  	; add ax, 1
  2719                                  	; cmp ax, 22
  2720                                  	; jne exit_G
  2721                                  	
  2722                                  	; mov word[cs:has_Collided], 1
  2723                                  	
  2724                                  ; exit_G:	
  2725                                  	; popa
  2726                                  	; ret
  2727                                  
  2728                                  ; skyCollision:
  2729                                  	; pusha
  2730                                  	
  2731                                  	; mov ax, [cs:birdR]
  2732                                  	; sub ax, 1
  2733                                  	; cmp ax, 0
  2734                                  	; jne exit_S
  2735                                  	
  2736                                  	; mov byte[cs:birdDirection], 'D'
  2737                                  	
  2738                                  ; exit_S:	
  2739                                  	; popa
  2740                                  	; ret
  2741                                  
  2742                                  ; checkCollision:
  2743                                  	; pusha
  2744                                  	
  2745                                  	; call pipeUCollision
  2746                                  	; call pipeDCollision
  2747                                  	; call groundCollision
  2748                                  	; ;call skyCollision
  2749                                  	
  2750                                  	; popa
  2751                                  	; ret
  2752                                  
  2753                                  ; PlayAnimation:
  2754                                  	; cmp word [cs:pause_flag], 1
  2755                                  	; jne continueanimation
  2756                                  	; call pause_screen
  2757                                  	
  2758                                  	; cmp word[cs:shouldexit], 1
  2759                                  	; je endscreen
  2760                                  	
  2761                                  ; continueanimation:
  2762                                  	; call moveGround
  2763                                  
  2764                                  ; Pipe1:
  2765                                  	; cmp word[cs:pipe1Exists], 1
  2766                                  	; jnz Pipe2
  2767                                  
  2768                                  	; call Pipe1Movement
  2769                                  	; call checkCollision
  2770                                  	; cmp word[cs:has_Collided], 1
  2771                                  	; je gameoverscreen
  2772                                  	; call checkscore
  2773                                  
  2774                                  ; Pipe2:
  2775                                  	; cmp word[cs:pipe2Exists], 1
  2776                                  	; jnz Pipe3
  2777                                  
  2778                                  	; call Pipe2Movement
  2779                                  	; call checkCollision
  2780                                  	; cmp word[cs:has_Collided], 1
  2781                                  	; je gameoverscreen
  2782                                  	; call checkscore
  2783                                  	
  2784                                  ; Pipe3:
  2785                                  	; cmp word[cs:pipe3Exists], 1
  2786                                  	; jnz continue
  2787                                  
  2788                                  	; call Pipe3Movement
  2789                                  	; call checkCollision
  2790                                  	; cmp word[cs:has_Collided], 1
  2791                                  	; je gameoverscreen
  2792                                  	; call checkscore
  2793                                  	
  2794                                  ; continue:
  2795                                  	; call delay
  2796                                  	; ;call delay
  2797                                  	; call moveBird
  2798                                  	; ;call delay
  2799                                  	; jmp PlayAnimation
  2800                                  
  2801                                  ; endofprogram:
  2802                                  ; mov dx, 388h
  2803                                      ; mov al, 0xff  ; Select all registers to silence
  2804                                      ; out dx, al
  2805                                  
  2806                                      ; mov dx, 389h
  2807                                      ; mov al, 0x00  ; Write 0 to silence the sound
  2808                                      ; out dx, al
  2809                                  	
  2810                                  ; mov ax, 0x3100 ; terminate and stay resident
  2811                                  ; int 0x21
  2812                                  
  2813                                  ; start:
  2814                                  	; push 0x0720
  2815                                  	; call clrscr
  2816                                  	; call title_screen
  2817                                  	
  2818                                  	; call music1
  2819                                  	
  2820                                  	; ;wait for key input
  2821                                  	; mov ah, 0
  2822                                  	; int 0x16
  2823                                  	
  2824                                  	; push 0x3020
  2825                                  	; call clrscr
  2826                                  
  2827                                  	; xor ax, ax
  2828                                  	; mov es, ax 					; point es to IVT base
  2829                                  	; mov ax, [es:9*4]
  2830                                  	; mov [cs:oldisr], ax 			; save offset of old routine
  2831                                  	; mov ax, [es:9*4+2]
  2832                                  	; mov [cs:oldisr+2], ax 			; save segment of old routine
  2833                                  
  2834                                  	; cli 						; disable interrupts
  2835                                  	; mov word [es:9*4], kbisr 	; store offset at n*4
  2836                                  	; mov [es:9*4+2], cs 			; store segment at n*4+2
  2837                                  	; sti 						; enable interrupts
  2838                                  
  2839                                  	; mov dx, start ; end of resident portion
  2840                                  	; add dx, 15 ; round up to next para
  2841                                  	; mov cl, 4
  2842                                  	; shr dx, cl ; number of paras..../2^4
  2843                                  
  2844                                  ; PrintStartScreen:
  2845                                  	; call Background
  2846                                  	; call Ground
  2847                                  	; call Clouds
  2848                                  	; call saveScreen
  2849                                  	
  2850                                  	; call create_instruction_screen
  2851                                  	
  2852                                  	; ;wait for key input
  2853                                  	; mov ah,0
  2854                                  	; int 0x16
  2855                                  	
  2856                                  	; call Background
  2857                                  	; call Ground
  2858                                  	; call Clouds
  2859                                  	; call Bird
  2860                                  	; mov word[cs:pipe1Exists], 1
  2861                                  	
  2862                                  	; push 3988
  2863                                  	; push word[cs:scoreofgame]
  2864                                  	; call printnum
  2865                                  	
  2866                                  	; ;wait for key input
  2867                                  	; mov ah, 0
  2868                                  	; int 0x16
  2869                                  	
  2870                                  	; mov word [cs:pcb+10+4], music			    ; initialize ip
  2871                                  	; mov [cs:pcb+10+6], cs						; initialize cs
  2872                                  	; mov word [cs:pcb+10+8], 0x0200				; initialize flags
  2873                                  
  2874                                  	; mov word [cs:pcb+20+4], PlayAnimation	    ; initialize ip
  2875                                  	; mov [cs:pcb+20+6], cs						; initialize cs
  2876                                  	; mov word [cs:pcb+20+8], 0x0200				; initialize flags
  2877                                  
  2878                                  	; mov word [cs:current], 0					; set current task index
  2879                                  	; xor ax, ax
  2880                                  	; mov es, ax									; point es to IVT base
  2881                                  	
  2882                                  	; xor ax, ax
  2883                                  	; mov es, ax 					; point es to IVT base
  2884                                  	; mov ax, [es:8*4]
  2885                                  	; mov [cs:oldisr_timer], ax 			; save offset of old routine
  2886                                  	; mov ax, [es:8*4+2]
  2887                                  	; mov [cs:oldisr_timer+2], ax 			; save segment of old routine
  2888                                  	
  2889                                  	
  2890                                  	; cli
  2891                                  	; mov word [es:8*4], timer
  2892                                  	; mov [es:8*4+2], cs							; hook timer interrupt
  2893                                  	; mov ax, 0xb800
  2894                                  	; mov es, ax									; point es to video base
  2895                                  	; xor bx, bx									; initialize bx for tasks, bx=0
  2896                                  	; mov si, 0
  2897                                  	; sti
  2898                                  
  2899                                  	; jmp $										; infinite loop ... Task 0
  2900                                  [org 0x100]
  2901 00000000 E9A207                  jmp start
  2902 00000003 00000000                count: dd 0
  2903 00000007 00                      check_death: db 0
  2904 00000008 0401                    num: dw 260
  2905 0000000A 77                      w_key: db 'w'
  2906 0000000B 73                      s_key: db 's'
  2907 0000000C 61                      a_key: db 'a'
  2908 0000000D 64                      d_key: db 'd'
  2909 0000000E 65                      e_key: db 'e'
  2910 0000000F 70                      p_key: db 'p'
  2911 00000010 00                      curr_move: db 0
  2912 00000011 47414D452030564552      game_over_msg: db 'GAME 0VER'
  2913 0000001A 53434F5245              score_msg: db 'SCORE'
  2914 0000001F 00                      is_eat: db 0
  2915 00000020 0000                    score: dw 0
  2916 00000022 534E414B452047414D-     snake_heading: db "SNAKE GAME",0
  2916 0000002B 4500               
  2917 0000002D 416C692041686D6164-     names: db "Ali Ahmad (21F-9207)                Hafiza Haiqa (21F-9107)",0
  2917 00000036 20283231462D393230-
  2917 0000003F 372920202020202020-
  2917 00000048 202020202020202020-
  2917 00000051 486166697A61204861-
  2917 0000005A 69716120283231462D-
  2917 00000063 393130372900       
  2918 00000069 507265737320275327-     press_s: db "Press 'S' to continue",0
  2918 00000072 20746F20636F6E7469-
  2918 0000007B 6E756500           
  2919 0000007F 5700                    instruction1: db "W", 0
  2920 00000081 412053204400            instruction2: db "A S D", 0
  2921 00000087 434F4E54524F4C4C45-     instruction0: db "CONTROLLER INSTRUCTIONS", 0
  2921 00000090 5220494E5354525543-
  2921 00000099 54494F4E5300       
  2922 0000009F 504C4159494E472049-     instruction3: db "PLAYING INSTRUCTIONS :", 0
  2922 000000A8 4E535452554354494F-
  2922 000000B1 4E53203A00         
  2923 000000B6 312920536E616B6520-     instruction4: db "1) Snake will die if it collides with any of the boundary", 0
  2923 000000BF 77696C6C2064696520-
  2923 000000C8 696620697420636F6C-
  2923 000000D1 6C6964657320776974-
  2923 000000DA 6820616E79206F6620-
  2923 000000E3 74686520626F756E64-
  2923 000000EC 61727900           
  2924 000000F0 322920536E616B6520-     instruction5: db "2) Snake will die if it collides with itself", 0
  2924 000000F9 77696C6C2064696520-
  2924 00000102 696620697420636F6C-
  2924 0000010B 6C6964657320776974-
  2924 00000114 6820697473656C6600 
  2925 0000011D 01                      food_color: db 1
  2926                                  
  2927                                  
  2928                                  ;--------------> SCREEN CLEARING SUBROUTINE
  2929                                  clrscr:    
  2930 0000011E 50                          push ax
  2931 0000011F 06                          push es
  2932 00000120 57                          push di
  2933 00000121 B800B8                      mov ax, 0xb800
  2934 00000124 8EC0                        mov es, ax
  2935 00000126 BF0000                      mov di, 0
  2936                                  clr:
  2937 00000129 26C7052007                  mov word [es:di], 0x0720
  2938 0000012E 83C702                      add di, 2
  2939 00000131 81FFA00F                    cmp di, 4000
  2940 00000135 75F2                        jne clr
  2941 00000137 5F                          pop di
  2942 00000138 07                          pop es
  2943 00000139 58                          pop ax
  2944 0000013A C3                          ret
  2945                                  
  2946                                  
  2947                                  
  2948                                  ;--------------> STRING PRINTING SUBROUTINE
  2949 0000013B 55                      printstr: push bp
  2950 0000013C 89E5                    mov bp, sp
  2951 0000013E 06                      push es
  2952 0000013F 50                      push ax
  2953 00000140 51                      push cx
  2954 00000141 56                      push si
  2955 00000142 57                      push di
  2956 00000143 1E                      push ds
  2957 00000144 07                      pop es ; load ds in es
  2958 00000145 8B7E04                  mov di, [bp+4] ; point di to string
  2959 00000148 B9FFFF                  mov cx, 0xffff ; load maximum number in cx
  2960 0000014B 30C0                    xor al, al ; load a zero in al
  2961 0000014D F2AE                    repne scasb ; find zero in the string
  2962 0000014F B8FFFF                  mov ax, 0xffff ; load maximum number in ax
  2963 00000152 29C8                    sub ax, cx ; find change in cx
  2964 00000154 48                      dec ax ; exclude null from length
  2965 00000155 741E                    jz exit ; no printing if string is empty
  2966 00000157 89C1                    mov cx, ax ; load string length in cx
  2967 00000159 B800B8                  mov ax, 0xb800
  2968 0000015C 8EC0                    mov es, ax ; point es to video base
  2969 0000015E B050                    mov al, 80 ; load al with columns per row
  2970 00000160 F66608                  mul byte [bp+8] ; multiply with y position
  2971 00000163 03460A                  add ax, [bp+10] ; add x position
  2972 00000166 D1E0                    shl ax, 1 ; turn into byte offset
  2973 00000168 89C7                    mov di,ax ; point di to required location
  2974 0000016A 8B7604                  mov si, [bp+4] ; point si to string
  2975 0000016D 8A6606                  mov ah, [bp+6] ; load attribute in ah
  2976 00000170 FC                      cld ; auto increment mode
  2977 00000171 AC                      nextchar: lodsb ; load next char in al
  2978 00000172 AB                      stosw ; print char/attribute pair
  2979 00000173 E2FC                    loop nextchar ; repeat for the whole string
  2980 00000175 5F                      exit: pop di
  2981 00000176 5E                      pop si
  2982 00000177 59                      pop cx
  2983 00000178 58                      pop ax
  2984 00000179 07                      pop es
  2985 0000017A 5D                      pop bp
  2986 0000017B C20800                  ret 8
  2987                                  
  2988                                  
  2989                                  ;--------------> BANNER PRINTING SUBROUTINE
  2990                                  print_banner:
  2991 0000017E 6A1E                        push 30
  2992 00000180 6A06                        push 6
  2993 00000182 B80A00                      mov ax, 0x0A
  2994 00000185 50                          push ax
  2995 00000186 B8[8700]                    mov ax, instruction0
  2996 00000189 50                          push ax
  2997 0000018A E8AEFF                      call printstr
  2998                                  
  2999 0000018D 6A29                        push 41
  3000 0000018F 6A08                        push 8
  3001 00000191 B80A00                      mov ax, 0x0A
  3002 00000194 50                          push ax
  3003 00000195 B8[7F00]                    mov ax, instruction1
  3004 00000198 50                          push ax
  3005 00000199 E89FFF                      call printstr
  3006                                  
  3007 0000019C 6A27                        push 39
  3008 0000019E 6A0A                        push 10
  3009 000001A0 B80A00                      mov ax, 0x0A
  3010 000001A3 50                          push ax
  3011 000001A4 B8[8100]                    mov ax, instruction2
  3012 000001A7 50                          push ax
  3013 000001A8 E890FF                      call printstr
  3014                                  
  3015 000001AB 6A00                        push 0
  3016 000001AD 6A11                        push 17
  3017 000001AF B80200                      mov ax, 0x02
  3018 000001B2 50                          push ax
  3019 000001B3 B8[9F00]                    mov ax, instruction3
  3020 000001B6 50                          push ax
  3021 000001B7 E881FF                      call printstr
  3022                                  
  3023 000001BA 6A00                        push 0
  3024 000001BC 6A12                        push 18
  3025 000001BE B80300                      mov ax, 0x03
  3026 000001C1 50                          push ax
  3027 000001C2 B8[B600]                    mov ax, instruction4
  3028 000001C5 50                          push ax
  3029 000001C6 E872FF                      call printstr
  3030                                  
  3031 000001C9 6A00                        push 0
  3032 000001CB 6A13                        push 19
  3033 000001CD B80300                      mov ax, 0x03
  3034 000001D0 50                          push ax
  3035 000001D1 B8[F000]                    mov ax, instruction5
  3036 000001D4 50                          push ax
  3037 000001D5 E863FF                      call printstr
  3038                                  
  3039 000001D8 B92800                      mov cx, 40
  3040                                      looping_delay_banner:
  3041 000001DB E84B01                      call delay
  3042 000001DE E2FB                        loop looping_delay_banner
  3043                                  
  3044 000001E0 E85D01                      call clear_scr
  3045 000001E3 6A23                        push 35
  3046 000001E5 6A05                        push 5
  3047 000001E7 B80A00                      mov ax, 0x0A
  3048 000001EA 50                          push ax
  3049 000001EB B8[2200]                    mov ax, snake_heading
  3050 000001EE 50                          push ax
  3051 000001EF E849FF                      call printstr
  3052                                  
  3053 000001F2 6A0C                        push 12
  3054 000001F4 6A0A                        push 10
  3055 000001F6 B80A00                      mov ax, 0x0A
  3056 000001F9 50                          push ax
  3057 000001FA B8[2D00]                    mov ax, names
  3058 000001FD 50                          push ax
  3059 000001FE E83AFF                      call printstr
  3060                                  
  3061 00000201 6A1D                        push 29
  3062 00000203 6A14                        push 20
  3063 00000205 B80A00                      mov ax, 0x0A
  3064 00000208 50                          push ax
  3065 00000209 B8[6900]                    mov ax, press_s
  3066 0000020C 50                          push ax
  3067 0000020D E82BFF                      call printstr
  3068 00000210 C3                          ret
  3069                                  
  3070                                  
  3071                                  ;--------------> SETUP THE BEEP ISR
  3072                                   beep_setup:
  3073 00000211 06                        push es
  3074 00000212 50                        push ax
  3075                                  
  3076 00000213 31C0                      xor ax, ax
  3077 00000215 8EC0                      mov es, ax
  3078                                  
  3079                                    ;Save the original ISR
  3080 00000217 26A17000                  mov ax, WORD [es: TIMER_INT * 4]
  3081 0000021B 2EA3[AC02]                mov WORD [cs:original_timer_isr], ax
  3082 0000021F 26A17200                  mov ax, WORD [es: TIMER_INT * 4 + 2]
  3083 00000223 2EA3[AE02]                mov WORD [cs:original_timer_isr + 2], ax
  3084                                  
  3085                                    ;Setup the new ISR
  3086                                  
  3087 00000227 FA                        cli
  3088 00000228 B8[5702]                  mov ax, beep_isr
  3089 0000022B 26A37000                  mov WORD [es: TIMER_INT * 4], ax
  3090 0000022F 8CC8                      mov ax, cs
  3091 00000231 26A37200                  mov WORD [es: TIMER_INT * 4 + 2], ax
  3092 00000235 FB                        sti
  3093                                  
  3094 00000236 58                        pop ax
  3095 00000237 07                        pop es
  3096 00000238 C3                        ret 
  3097                                  
  3098                                  
  3099                                  ;--------------> TEAR DOWN THE BEEP ISR
  3100                                   beep_teardown:
  3101 00000239 06                        push es
  3102 0000023A 50                        push ax
  3103                                  
  3104 0000023B E83800                    call beep_stop
  3105                                  
  3106 0000023E 31C0                      xor ax, ax
  3107 00000240 8EC0                      mov es, ax
  3108                                  
  3109                                    ;Restore the old ISR
  3110                                  
  3111 00000242 FA                        cli
  3112 00000243 2EA1[AC02]                mov ax, WORD [cs:original_timer_isr]
  3113 00000247 26A37000                  mov WORD [es: TIMER_INT * 4], ax
  3114 0000024B 2EA1[AE02]                mov ax, WORD [cs:original_timer_isr + 2]
  3115 0000024F 26A37200                  mov WORD [es: TIMER_INT * 4 + 2], ax
  3116 00000253 FB                        sti
  3117                                  
  3118 00000254 58                        pop ax
  3119 00000255 07                        pop es
  3120 00000256 C3                        ret 
  3121                                  
  3122                                  
  3123                                  ;--------------> BEEP ISR
  3124                                   beep_isr:
  3125 00000257 2E803E[A902]00            cmp BYTE [cs:sound_playing], 0
  3126 0000025D 7412                      je _bi_end
  3127                                  
  3128 0000025F 2E833E[AA02]00            cmp WORD [cs:sound_counter], 0
  3129 00000265 7407                      je _bi_stop
  3130                                  
  3131 00000267 2EFF0E[AA02]              dec WORD [cs:sound_counter]
  3132                                  
  3133 0000026C EB03                     jmp _bi_end
  3134                                  
  3135                                  _bi_stop:
  3136 0000026E E80500                    call beep_stop
  3137                                  
  3138                                  _bi_end:
  3139                                    ;Chain
  3140 00000271 2EFF2E[AC02]              jmp FAR [cs:original_timer_isr]
  3141                                   ;Stop beep
  3142                                   ;
  3143                                   beep_stop:
  3144 00000276 50                        push ax
  3145                                  
  3146                                    ;Stop the sound
  3147                                  
  3148 00000277 E461                      in al, 61h
  3149 00000279 24FC                      and al, 0fch    ;Clear bit 0 (PIT to speaker) and bit 1 (Speaker enable)
  3150 0000027B E661                      out 61h, al
  3151                                  
  3152                                    ;Disable countdown
  3153                                  
  3154 0000027D 2EC606[A902]00            mov BYTE [cs:sound_playing], 0
  3155                                  
  3156 00000283 58                        pop ax
  3157 00000284 C3                        ret
  3158                                  
  3159                                  
  3160                                   ;Beep
  3161                                   ;AX = 1193180 / frequency
  3162                                   ;BX = duration in 18.2th of sec
  3163                                   beep_play:
  3164 00000285 50                        push ax
  3165 00000286 52                        push dx
  3166                                  
  3167 00000287 89C2                      mov dx, ax
  3168                                  
  3169 00000289 B0B6                      mov al, 0b6h
  3170 0000028B E643                      out 43h, al
  3171                                  
  3172 0000028D 89D0                      mov ax, dx
  3173 0000028F E642                      out 42h, al
  3174 00000291 88E0                      mov al, ah
  3175 00000293 E642                      out 42h, al
  3176                                  
  3177                                  
  3178                                    ;Set the countdown
  3179 00000295 2E891E[AA02]              mov WORD [cs:sound_counter], bx
  3180                                  
  3181                                    ;Start the sound
  3182                                  
  3183 0000029A E461                      in al, 61h
  3184 0000029C 0C03                      or al, 3h    ;Set bit 0 (PIT to speaker) and bit 1 (Speaker enable)
  3185 0000029E E661                      out 61h, al
  3186                                  
  3187                                  
  3188                                    ;Start the countdown
  3189                                  
  3190 000002A0 2EC606[A902]01            mov BYTE [cs:sound_playing], 1
  3191                                  
  3192 000002A6 5A                        pop dx
  3193 000002A7 58                        pop ax
  3194 000002A8 C3                        ret
  3195                                  
  3196                                   ;Keep these in the code segment
  3197 000002A9 00                       sound_playing      db  0
  3198 000002AA 0000                     sound_counter      dw  0
  3199 000002AC 00000000                 original_timer_isr     dd  0
  3200                                  
  3201                                   TIMER_INT      EQU     1ch
  3202                                  
  3203                                  
  3204                                  ;--------------> EATING SUBROUTINE
  3205                                  eat:
  3206 000002B0 55                      push bp
  3207 000002B1 89E5                    mov bp, sp
  3208 000002B3 83EC02                  sub sp, 2
  3209 000002B6 50                      push ax
  3210 000002B7 53                      push bx
  3211 000002B8 51                      push cx
  3212 000002B9 52                      push dx
  3213 000002BA 56                      push si
  3214                                  
  3215 000002BB BE[D107]                mov si, pos
  3216 000002BE A1[CD07]                mov ax, word[len]
  3217 000002C1 48                      dec ax
  3218 000002C2 D1E0                    shl ax, 1
  3219 000002C4 01C6                    add si, ax  ;calculating the head position of snake
  3220 000002C6 A1[0800]                mov ax, word[num]
  3221 000002C9 8946FE                  mov word[bp-2], ax
  3222 000002CC 3904                    cmp [si], ax
  3223 000002CE 752E                    jne no_eat
  3224 000002D0 E83EFF                  call beep_setup ;Setup
  3225                                  ;produces beep when eat food
  3226 000002D3 B8A00F                  mov ax, 4000	; beep frequency
  3227 000002D6 BB0400                  mov bx, 4	;time for beep
  3228 000002D9 E8A9FF                  call beep_play
  3229 000002DC E84A00                  call delay
  3230 000002DF E857FF                  call beep_teardown  ;Tear down
  3231 000002E2 A1[0800]                mov ax, word[num]
  3232 000002E5 A3[CF07]                mov word[space], ax
  3233 000002E8 E83F01                  call print_space
  3234 000002EB E86E00                  call print_food
  3235                                  
  3236 000002EE FF06[CD07]              inc word[len]
  3237 000002F2 FF06[2000]              inc word[score]
  3238 000002F6 83C602                  add si, 2
  3239                                  
  3240 000002F9 8B46FE                  mov ax, word[bp-2]
  3241 000002FC 8904                    mov word[si], ax
  3242                                  no_eat:
  3243                                  
  3244                                  
  3245 000002FE 5E                      pop si
  3246 000002FF 5A                      pop dx
  3247 00000300 59                      pop cx
  3248 00000301 5B                      pop bx
  3249 00000302 58                      pop ax
  3250                                  
  3251 00000303 89EC                    mov sp, bp
  3252 00000305 5D                      pop bp
  3253 00000306 C3                      ret
  3254                                  
  3255                                  
  3256                                  ;--------------> KEYBOARD INTTERUPT SUBROUTINE
  3257                                  snake_int:
  3258 00000307 50                          push ax
  3259                                  
  3260 00000308 31C0                        xor ax, ax
  3261 0000030A B401                        mov ah, 0x01 
  3262 0000030C CD16                        int 0x16 ; call BIOS keyboard service
  3263 0000030E 7403                        jz no_int
  3264 00000310 E89203                  	call movement
  3265                                      no_int:
  3266                                  
  3267 00000313 58                          pop ax
  3268 00000314 C3                          ret
  3269                                  
  3270                                  
  3271                                  ;--------------> RANDOM NUMBER SUBROUTINE
  3272                                  rand_no:
  3273 00000315 50                          push ax
  3274 00000316 52                          push dx
  3275 00000317 51                          push cx
  3276                                  
  3277 00000318 0F31                        rdtsc
  3278 0000031A 31D2                        xor dx, dx
  3279 0000031C B99E0F                      mov cx, 3998
  3280 0000031F F7F1                        div cx
  3281 00000321 8916[0800]                  mov word[num], dx
  3282                                  
  3283 00000325 59                          pop cx
  3284 00000326 5A                          pop dx
  3285 00000327 58                          pop ax
  3286 00000328 C3                          ret
  3287                                  
  3288                                  
  3289                                  ;--------------> DELAY SUBROUTINE
  3290                                  delay: 
  3291 00000329 66C706[0300]60EA00-         mov dword[count], 60000
  3291 00000331 00                 
  3292                                  looping_delay:
  3293 00000332 66FF0E[0300]            	dec dword[count]
  3294 00000337 66833E[0300]00          	cmp dword[count], 0
  3295 0000033D 75F3                    	jne looping_delay
  3296 0000033F C3                          ret
  3297                                  
  3298                                  
  3299                                  ;--------------> CLEAR SCREEN SUBROUTINE
  3300                                  clear_scr:
  3301 00000340 50                          push ax
  3302 00000341 06                          push es
  3303 00000342 57                          push di
  3304                                  
  3305 00000343 B800B8                      mov ax, 0xb800
  3306 00000346 8EC0                        mov es, ax
  3307 00000348 31FF                        xor di, di
  3308                                  looping_clr:
  3309 0000034A 26C7052007                  mov word [es:di], 0x0720
  3310 0000034F 83C702                      add di, 2
  3311 00000352 81FFA00F                    cmp di, 4000
  3312 00000356 75F2                        jne looping_clr
  3313                                  
  3314 00000358 5F                          pop di
  3315 00000359 07                          pop es
  3316 0000035A 58                          pop ax
  3317 0000035B C3                          ret
  3318                                  
  3319                                  
  3320                                  ;--------------> RANDOM FOOD GENERATING SUBROUTINE
  3321                                  print_food:
  3322 0000035C 50                      push ax
  3323 0000035D 06                      push es
  3324 0000035E 57                      push di
  3325 0000035F 51                      push cx
  3326                                  
  3327 00000360 B800B8                  mov ax, 0xb800
  3328 00000363 8EC0                    mov es, ax
  3329 00000365 E8ADFF                  call rand_no
  3330 00000368 F706[0800]0100          test word[num], 1
  3331 0000036E 7404                    jz ok
  3332 00000370 FF0E[0800]              dec word[num]
  3333                                  ok:
  3334 00000374 E80C02                  call checking_food
  3335 00000377 A1[0800]                mov ax, word[num]
  3336 0000037A 89C7                    mov di, ax
  3337 0000037C 803E[1D01]0A            cmp byte[food_color], 10
  3338 00000381 7505                    jne skip_color
  3339 00000383 C606[1D01]01            mov byte[food_color], 1
  3340                                  skip_color:
  3341 00000388 FE06[1D01]              inc byte[food_color]
  3342 0000038C 8A26[1D01]              mov ah, byte[food_color]
  3343 00000390 B06F                    mov al, 0x6F
  3344 00000392 268905                  mov word[es:di], ax
  3345                                  
  3346 00000395 59                      pop cx
  3347 00000396 5F                      pop di
  3348 00000397 07                      pop es
  3349 00000398 58                      pop ax
  3350 00000399 C3                      ret
  3351                                  
  3352                                  ;--------------> Y-AXIS BORDER PRINTING SUBROUTINE
  3353                                  border_y:                         
  3354 0000039A 55                          push bp
  3355 0000039B 89E5                        mov bp, sp
  3356 0000039D 50                          push ax
  3357 0000039E 51                          push cx
  3358 0000039F 06                          push es
  3359 000003A0 57                          push di
  3360                                  
  3361 000003A1 B800B8                      mov ax, 0xb800
  3362 000003A4 8EC0                        mov es, ax
  3363 000003A6 8B7E04                      mov di, [bp+4]
  3364 000003A9 B91900                      mov cx, 25
  3365                                  looping_border_y:
  3366 000003AC 26C7052070                  mov word [es:di], 0x7020
  3367 000003B1 81C7A000                    add di, 160
  3368 000003B5 E2F5                        loop looping_border_y
  3369                                  
  3370 000003B7 5F                          pop di
  3371 000003B8 07                          pop es
  3372 000003B9 59                          pop cx
  3373 000003BA 58                          pop ax
  3374 000003BB 5D                          pop bp
  3375 000003BC C20200                      ret 2
  3376                                  
  3377                                  
  3378                                  ;--------------> X-AXIS BORDER PRINTING SUBROUTINE
  3379                                  border_x:                         
  3380 000003BF 55                          push bp
  3381 000003C0 89E5                        mov bp, sp
  3382 000003C2 50                          push ax
  3383 000003C3 51                          push cx
  3384 000003C4 06                          push es
  3385 000003C5 57                          push di
  3386                                  
  3387 000003C6 B800B8                      mov ax, 0xb800
  3388 000003C9 8EC0                        mov es, ax
  3389 000003CB 8B7E04                      mov di, [bp+4]
  3390 000003CE B95000                      mov cx, 80
  3391                                  looping_border_x: 
  3392 000003D1 26C7052070                  mov word [es:di], 0x7020
  3393 000003D6 83C702                      add di, 2
  3394 000003D9 E2F6                        loop looping_border_x
  3395                                  
  3396 000003DB 5F                          pop di
  3397 000003DC 07                          pop es
  3398 000003DD 59                          pop cx
  3399 000003DE 58                          pop ax
  3400 000003DF 5D                          pop bp
  3401 000003E0 C20200                      ret 2
  3402                                  
  3403                                  
  3404                                  ;--------------> ALL BORDER PRINTING AND CLEARING SCREEN (INITIALIZING GAME) SUBROUTINE
  3405                                  load_border:
  3406 000003E3 50                      push ax
  3407                                  
  3408 000003E4 E859FF                  call clear_scr
  3409 000003E7 6A00                    push 0
  3410 000003E9 E8AEFF                  call border_y
  3411 000003EC 689E00                  push 158
  3412 000003EF E8A8FF                  call border_y
  3413 000003F2 6A00                    push 0
  3414 000003F4 E8C8FF                  call border_x
  3415 000003F7 68000F                  push 3840
  3416 000003FA E8C2FF                  call border_x
  3417                                  
  3418 000003FD 58                      pop ax
  3419 000003FE C3                      ret
  3420                                  
  3421                                  
  3422                                  ;--------------> SNAKE PRINTING SUBROUTINE
  3423                                  print_snake:
  3424 000003FF 50                          push ax
  3425 00000400 06                          push es
  3426 00000401 57                          push di
  3427 00000402 51                          push cx 
  3428 00000403 53                          push bx
  3429                                  
  3430 00000404 B800B8                      mov ax, 0xb800
  3431 00000407 8EC0                        mov es, ax
  3432 00000409 BB[D107]                    mov bx, pos
  3433 0000040C 8B0E[CD07]                  mov cx, word[len]
  3434 00000410 49                          dec cx
  3435                                  looping_snake:  ;snake body printing 
  3436 00000411 8B3F                        mov di, [bx]
  3437 00000413 26C7052A0A                  mov word[es:di], 0x0A2A   
  3438 00000418 83C302                      add bx, 2  
  3439 0000041B E2F4                        loop looping_snake
  3440 0000041D 8B3F                        mov di, [bx]    ;snake head printing
  3441 0000041F 26C705020A                  mov word[es:di], 0x0A02
  3442                                  
  3443 00000424 5B                          pop bx
  3444 00000425 59                          pop cx
  3445 00000426 5F                          pop di
  3446 00000427 07                          pop es
  3447 00000428 58                          pop ax
  3448 00000429 C3                          ret
  3449                                  
  3450                                  
  3451                                  ;--------------> SPACE PRINTING SUBROUTINE
  3452                                  print_space:
  3453 0000042A 50                          push ax
  3454 0000042B 06                          push es
  3455 0000042C 57                          push di
  3456                                  
  3457 0000042D B800B8                      mov ax, 0xb800
  3458 00000430 8EC0                        mov es, ax
  3459 00000432 8B3E[CF07]                  mov word di, [space]
  3460 00000436 26C7052007                  mov word [es:di], 0x0720
  3461                                  
  3462 0000043B 5F                          pop di
  3463 0000043C 07                          pop es
  3464 0000043D 58                          pop ax
  3465 0000043E C3                          ret
  3466                                  
  3467                                  
  3468                                  ;--------------> RIGHT SHIFTING SUBROUTINE
  3469                                  right_shifting:
  3470 0000043F 50                          push ax
  3471 00000440 51                          push cx
  3472 00000441 56                          push si
  3473 00000442 57                          push di
  3474                                      
  3475 00000443 BF[D107]                    mov di, pos
  3476 00000446 BE[D107]                    mov si, pos
  3477 00000449 A1[D107]                    mov ax, word[pos]
  3478 0000044C 83C602                      add si, 2
  3479 0000044F A3[CF07]                    mov word[space], ax
  3480 00000452 8B0E[CD07]                  mov cx, word[len]
  3481 00000456 49                          dec cx
  3482                                  looping_right:
  3483 00000457 8B04                        mov ax , word[si]
  3484 00000459 8905                        mov word[di], ax
  3485 0000045B 83C602                      add si, 2
  3486 0000045E 83C702                      add di, 2
  3487 00000461 E2F4                        loop looping_right
  3488 00000463 BB[D107]                    mov bx, pos
  3489 00000466 8B0E[CD07]                  mov cx, word[len]
  3490 0000046A 49                          dec cx
  3491 0000046B D1E1                        shl cx, 1
  3492 0000046D 01CB                        add bx, cx
  3493 0000046F 830702                      add word[bx], 2
  3494                                  
  3495 00000472 5F                          pop di
  3496 00000473 5E                          pop si
  3497 00000474 59                          pop cx
  3498 00000475 58                          pop ax
  3499 00000476 C3                          ret
  3500                                  
  3501                                  
  3502                                  ;--------------> LEFT SHIFTING SUBROUTINE
  3503                                  left_shifting:
  3504 00000477 50                          push ax
  3505 00000478 51                          push cx
  3506 00000479 56                          push si
  3507 0000047A 57                          push di
  3508                                      
  3509 0000047B BF[D107]                    mov di, pos
  3510 0000047E BE[D107]                    mov si, pos
  3511 00000481 A1[D107]                    mov ax, word[pos]
  3512 00000484 83C602                      add si, 2
  3513 00000487 A3[CF07]                    mov word[space], ax
  3514 0000048A 8B0E[CD07]                  mov cx, word[len]
  3515 0000048E 49                          dec cx
  3516                                  looping_left:
  3517 0000048F 8B04                        mov ax , word[si]
  3518 00000491 8905                        mov word[di], ax
  3519 00000493 83C602                      add si, 2
  3520 00000496 83C702                      add di, 2
  3521 00000499 E2F4                        loop looping_left
  3522 0000049B BB[D107]                    mov bx, pos
  3523 0000049E 8B0E[CD07]                  mov cx, word[len]
  3524 000004A2 49                          dec cx
  3525 000004A3 D1E1                        shl cx, 1
  3526 000004A5 01CB                        add bx, cx
  3527 000004A7 832F02                      sub word[bx], 2
  3528                                  
  3529 000004AA 5F                          pop di
  3530 000004AB 5E                          pop si
  3531 000004AC 59                          pop cx
  3532 000004AD 58                          pop ax
  3533 000004AE C3                          ret
  3534                                  
  3535                                  
  3536                                  ;--------------> DOWN SHIFTING SUBROUTINE
  3537                                  down_shifting:
  3538 000004AF 50                          push ax
  3539 000004B0 51                          push cx
  3540 000004B1 56                          push si
  3541 000004B2 57                          push di
  3542                                      
  3543 000004B3 BF[D107]                    mov di, pos
  3544 000004B6 BE[D107]                    mov si, pos
  3545 000004B9 A1[D107]                    mov ax, word[pos]
  3546 000004BC 83C602                      add si, 2
  3547 000004BF A3[CF07]                    mov word[space], ax
  3548 000004C2 8B0E[CD07]                  mov cx, word[len]
  3549 000004C6 49                          dec cx
  3550                                  looping_down:
  3551 000004C7 8B04                        mov ax , word[si]
  3552 000004C9 8905                        mov word[di], ax
  3553 000004CB 83C602                      add si, 2
  3554 000004CE 83C702                      add di, 2
  3555 000004D1 E2F4                        loop looping_down
  3556 000004D3 BB[D107]                    mov bx, pos
  3557 000004D6 8B0E[CD07]                  mov cx, word[len]
  3558 000004DA 49                          dec cx
  3559 000004DB D1E1                        shl cx, 1
  3560 000004DD 01CB                        add bx, cx
  3561 000004DF 8107A000                    add word[bx], 160
  3562                                  
  3563 000004E3 5F                          pop di
  3564 000004E4 5E                          pop si
  3565 000004E5 59                          pop cx
  3566 000004E6 58                          pop ax
  3567 000004E7 C3                          ret
  3568                                  
  3569                                  
  3570                                  ;--------------> DOWN SHIFTING SUBROUTINE
  3571                                  up_shifting:
  3572 000004E8 50                          push ax
  3573 000004E9 51                          push cx
  3574 000004EA 56                          push si
  3575 000004EB 57                          push di
  3576                                      
  3577 000004EC BF[D107]                    mov di, pos
  3578 000004EF BE[D107]                    mov si, pos
  3579 000004F2 A1[D107]                    mov ax, word[pos]
  3580 000004F5 83C602                      add si, 2
  3581 000004F8 A3[CF07]                    mov word[space], ax
  3582 000004FB 8B0E[CD07]                  mov cx, word[len]
  3583 000004FF 49                          dec cx
  3584                                  looping_up:
  3585 00000500 8B04                        mov ax , word[si]
  3586 00000502 8905                        mov word[di], ax
  3587 00000504 83C602                      add si, 2
  3588 00000507 83C702                      add di, 2
  3589 0000050A E2F4                        loop looping_up
  3590 0000050C BB[D107]                    mov bx, pos
  3591 0000050F 8B0E[CD07]                  mov cx, word[len]
  3592 00000513 49                          dec cx
  3593 00000514 D1E1                        shl cx, 1
  3594 00000516 01CB                        add bx, cx
  3595 00000518 812FA000                    sub word[bx], 160
  3596                                  
  3597 0000051C 5F                          pop di
  3598 0000051D 5E                          pop si
  3599 0000051E 59                          pop cx
  3600 0000051F 58                          pop ax
  3601 00000520 C3                          ret
  3602                                  
  3603                                  
  3604                                  ;--------------> BORDER DEATH CHECKING SUBROUTINE
  3605                                  check_border:
  3606 00000521 50                          push ax
  3607 00000522 51                          push cx
  3608 00000523 52                          push dx
  3609 00000524 56                          push si
  3610 00000525 53                          push bx
  3611                                  
  3612 00000526 8B0E[CD07]                  mov cx, word[len]
  3613 0000052A 49                          dec cx
  3614 0000052B D1E1                        shl cx, 1
  3615 0000052D BB[D107]                    mov bx, pos
  3616 00000530 01CB                        add bx, cx
  3617 00000532 8B07                        mov ax, [bx]
  3618 00000534 B90000                      mov cx, 0
  3619                                  check_left:                        ;LEFT SIDE BORDER CHECK
  3620 00000537 39C8                        cmp ax, cx
  3621 00000539 743D                        je found
  3622 0000053B 81C1A000                    add cx, 160
  3623 0000053F 81F9000F                    cmp cx, 3840
  3624 00000543 75F2                        jne check_left
  3625                                  
  3626 00000545 B99E00                      mov cx, 158
  3627                                  check_right:                       ;RIGHT SIDE BORDER CHECK
  3628 00000548 39C8                        cmp ax, cx
  3629 0000054A 742C                        je found
  3630 0000054C 81C1A000                    add cx, 160
  3631 00000550 81F99E0F                    cmp cx, 3998
  3632 00000554 75F2                        jne check_right
  3633                                  
  3634 00000556 B90000                      mov cx, 0
  3635                                  check_up:                          ;TOP SIDE BORDER CHECK
  3636 00000559 39C8                        cmp ax, cx
  3637 0000055B 741B                        je found
  3638 0000055D 83C102                      add cx, 2
  3639 00000560 81F99E00                    cmp cx, 158
  3640 00000564 75F3                        jne check_up
  3641                                  
  3642 00000566 B9000F                      mov cx, 3840
  3643                                  check_down:                        ;BOTTOM SIDE BORDER CHECK
  3644 00000569 39C8                        cmp ax, cx
  3645 0000056B 740B                        je found
  3646 0000056D 83C102                      add cx, 2
  3647 00000570 81F99E0F                    cmp cx, 3998
  3648 00000574 75F3                        jne check_down
  3649                                  
  3650 00000576 EB05                        jmp skip_checking
  3651                                  found:                             ;IF SNAKE TOUCHES BORDER, COME TO "found" AND EXIT
  3652 00000578 C606[0700]01                mov byte[check_death], 1
  3653                                  skip_checking:
  3654                                  
  3655 0000057D 5B                          pop bx                           ;IF NOT TOUCH BORDER, LEAVE THE LOOP AS IT IS
  3656 0000057E 5E                          pop si
  3657 0000057F 5A                          pop dx
  3658 00000580 59                          pop cx
  3659 00000581 58                          pop ax
  3660 00000582 C3                          ret
  3661                                  
  3662                                  
  3663                                  ;--------------> BORDER FOOD CHECKING SUBROUTINE
  3664                                  checking_food:
  3665 00000583 50                          push ax
  3666 00000584 51                          push cx
  3667                                  
  3668 00000585 A1[0800]                    mov ax, word[num]
  3669 00000588 B90000                      mov cx, 0
  3670                                  checking_left:                        ;LEFT SIDE BORDER CHECK
  3671 0000058B 39C8                        cmp ax, cx
  3672 0000058D 743D                        je founded
  3673 0000058F 81C1A000                    add cx, 160
  3674 00000593 81F9000F                    cmp cx, 3840
  3675 00000597 75F2                        jne checking_left
  3676                                  
  3677 00000599 B99E00                      mov cx, 158
  3678                                  checking_right:                       ;RIGHT SIDE BORDER CHECK
  3679 0000059C 39C8                        cmp ax, cx
  3680 0000059E 742C                        je founded
  3681 000005A0 81C1A000                    add cx, 160
  3682 000005A4 81F99E0F                    cmp cx, 3998
  3683 000005A8 75F2                        jne checking_right
  3684                                  
  3685 000005AA B90000                      mov cx, 0
  3686                                  checking_up:                          ;TOP SIDE BORDER CHECK
  3687 000005AD 39C8                        cmp ax, cx
  3688 000005AF 741B                        je founded
  3689 000005B1 83C102                      add cx, 2
  3690 000005B4 81F99E00                    cmp cx, 158
  3691 000005B8 75F3                        jne checking_up
  3692                                  
  3693 000005BA B9000F                      mov cx, 3840
  3694                                  checking_down:                        ;BOTTOM SIDE BORDER CHECK
  3695 000005BD 39C8                        cmp ax, cx
  3696 000005BF 740B                        je founded
  3697 000005C1 83C102                      add cx, 2
  3698 000005C4 81F99E0F                    cmp cx, 3998
  3699 000005C8 75F3                        jne checking_down
  3700                                  
  3701 000005CA EB03                        jmp skip_check
  3702                                  founded:                             ;IF SNAKE TOUCHES BORDER, COME TO "found" AND EXIT
  3703 000005CC E88DFD                      call print_food
  3704                                  skip_check:
  3705                                  
  3706 000005CF 59                          pop cx
  3707 000005D0 58                          pop ax
  3708 000005D1 C3                          ret
  3709                                  
  3710                                  
  3711                                  ;--------------> LEFT MOVEMENT SUBROUTINE
  3712                                  move_left:
  3713 000005D2 50                      push ax
  3714                                  
  3715 000005D3 C606[1000]02            mov byte[curr_move], 2
  3716                                  looping_left_move:
  3717 000005D8 C606[0700]00            mov byte[check_death], 0
  3718 000005DD E841FF                  call check_border
  3719 000005E0 803E[0700]01            cmp byte[check_death], 1
  3720 000005E5 7417                    je death_left
  3721 000005E7 E815FE                  call print_snake
  3722 000005EA E88AFE                  call left_shifting
  3723 000005ED E839FD                  call delay
  3724 000005F0 E837FE                  call print_space
  3725 000005F3 E8BAFC                  call eat
  3726 000005F6 E83701                  call self_collision
  3727 000005F9 E80BFD                  call snake_int
  3728 000005FC EBDA                    jmp looping_left_move
  3729                                  
  3730                                  death_left:
  3731 000005FE E85A01                  call game_over
  3732 00000601 58                      pop ax
  3733 00000602 C3                      ret
  3734                                  
  3735                                  
  3736                                  ;--------------> RIGHT MOVEMENT SUBROUTINE
  3737                                  move_right:
  3738 00000603 C606[1000]01            mov byte[curr_move], 1
  3739 00000608 51                      push cx
  3740 00000609 50                      push ax
  3741                                  
  3742                                  looping_right_move:
  3743 0000060A C606[0700]00            mov byte[check_death], 0
  3744 0000060F E80FFF                  call check_border
  3745 00000612 803E[0700]01            cmp byte[check_death], 1
  3746 00000617 7417                    je death_right
  3747 00000619 E8E3FD                  call print_snake
  3748 0000061C E820FE                  call right_shifting
  3749 0000061F E807FD                  call delay
  3750 00000622 E805FE                  call print_space
  3751 00000625 E888FC                  call eat
  3752 00000628 E80501                  call self_collision
  3753 0000062B E8D9FC                  call snake_int
  3754 0000062E EBDA                    jmp looping_right_move
  3755                                  death_right:
  3756 00000630 E82801                  call game_over
  3757 00000633 58                      pop ax
  3758 00000634 59                      pop cx
  3759 00000635 C3                      ret
  3760                                  
  3761                                  
  3762                                  ;--------------> UP MOVEMENT SUBROUTINE
  3763                                  move_up:
  3764 00000636 50                      push ax
  3765                                  
  3766 00000637 C606[1000]03            mov byte[curr_move], 3
  3767                                  looping_up_move:
  3768 0000063C C606[0700]00            mov byte[check_death], 0
  3769 00000641 E8DDFE                  call check_border
  3770 00000644 803E[0700]01            cmp byte[check_death], 1
  3771 00000649 741A                    je death_up
  3772 0000064B E8B1FD                  call print_snake
  3773 0000064E E897FE                  call up_shifting
  3774 00000651 E8D5FC                  call delay
  3775 00000654 E8D3FD                  call print_space
  3776 00000657 E856FC                  call eat
  3777 0000065A E8D300                  call self_collision
  3778 0000065D E8A7FC                  call snake_int
  3779 00000660 E8C6FC                  call delay
  3780 00000663 EBD7                    jmp looping_up_move
  3781                                  death_up:
  3782 00000665 E8F300                  call game_over
  3783 00000668 58                      pop ax
  3784 00000669 59                      pop cx
  3785 0000066A C3                      ret
  3786                                  
  3787                                  
  3788                                  ;--------------> DOWN MOVEMENT SUBROUTINE
  3789                                  move_down:
  3790 0000066B 50                      push ax
  3791                                  
  3792 0000066C C606[1000]04            mov byte[curr_move], 4
  3793                                  looping_down_move:
  3794 00000671 C606[0700]00            mov byte[check_death], 0
  3795 00000676 E8A8FE                  call check_border
  3796 00000679 803E[0700]01            cmp byte[check_death], 1
  3797 0000067E 741A                    je death_down
  3798 00000680 E87CFD                  call print_snake
  3799 00000683 E829FE                  call down_shifting
  3800 00000686 E8A0FC                  call delay
  3801 00000689 E89EFD                  call print_space
  3802 0000068C E821FC                  call eat
  3803 0000068F E89E00                  call self_collision
  3804 00000692 E872FC                  call snake_int
  3805 00000695 E891FC                  call delay
  3806 00000698 EBD7                    jmp looping_down_move
  3807                                  death_down:
  3808 0000069A E8BE00                  call game_over
  3809 0000069D 58                      pop ax
  3810 0000069E C3                      ret
  3811                                  
  3812                                  
  3813                                  ;--------------> PAUSE SUBROUTINE
  3814                                  pausing:
  3815                                  looping_pausing:
  3816 0000069F E865FC                  call snake_int
  3817 000006A2 EBFB                    jmp looping_pausing
  3818                                  
  3819 000006A4 C3                      ret
  3820                                  
  3821                                  
  3822                                  ;--------------> OVERALL MOVEMENT CONTROLLER
  3823                                  movement:
  3824 000006A5 50                          push ax
  3825 000006A6 30E4                        xor ah, ah
  3826 000006A8 CD16                        int 0x16
  3827                                  
  3828 000006AA 3A06[0C00]                  cmp al, [a_key]
  3829 000006AE 7509                    	jne skip1
  3830 000006B0 803E[1000]01                cmp byte[curr_move], 1
  3831 000006B5 0F8519FF                    jne move_left
  3832                                      skip1:
  3833 000006B9 3A06[0D00]              	cmp al, [d_key]
  3834 000006BD 7509                    	jne skip2
  3835 000006BF 803E[1000]02                cmp byte[curr_move], 2
  3836 000006C4 0F853BFF                    jne move_right
  3837                                      skip2:
  3838 000006C8 3A06[0A00]              	cmp al, [w_key]
  3839 000006CC 7509                    	jne skip3
  3840 000006CE 803E[1000]04                cmp byte[curr_move], 4
  3841 000006D3 0F855FFF                    jne move_up
  3842                                      skip3:
  3843 000006D7 3A06[0B00]              	cmp al, [s_key]
  3844 000006DB 7507                    	jne skip4
  3845 000006DD 803E[1000]03                cmp byte[curr_move], 3
  3846 000006E2 7587                        jne move_down
  3847                                      skip4:
  3848 000006E4 3A06[0E00]                  cmp al, [e_key]
  3849 000006E8 7503                        jne skip5
  3850 000006EA E86E00                      call game_over
  3851                                      skip5:
  3852 000006ED 3A06[0F00]                  cmp al, [p_key]
  3853 000006F1 7503                        jne skip6
  3854 000006F3 E8A9FF                      call pausing
  3855                                      skip6:
  3856                                  
  3857 000006F6 58                          pop ax
  3858 000006F7 C3                          ret
  3859                                  
  3860                                  
  3861                                  ;--------------> SCORE PRINTING SUBROUTINE
  3862                                  print_score:
  3863                                  ; subroutine to print a score at top left of screen
  3864                                  ; takes the number to be printed as its parameter
  3865 000006F8 06                      push es
  3866 000006F9 50                      push ax
  3867 000006FA 53                      push bx
  3868 000006FB 51                      push cx
  3869 000006FC 52                      push dx
  3870 000006FD 57                      push di
  3871 000006FE B800B8                  mov ax, 0xb800
  3872 00000701 8EC0                    mov es, ax ; point es to video base
  3873 00000703 A1[2000]                mov ax, word[score] ; load number in ax
  3874 00000706 BB0A00                  mov bx, 10 ; use base 10 for division
  3875 00000709 B90000                  mov cx, 0 ; initialize count of digits
  3876 0000070C BA0000                  nextdigit: mov dx, 0 ; zero upper half of dividend
  3877 0000070F F7F3                    div bx ; divide by 10
  3878 00000711 80C230                  add dl, 0x30 ; convert digit into ascii value
  3879 00000714 52                      push dx ; save ascii value on stack
  3880 00000715 41                      inc cx ; increment count of values
  3881 00000716 83F800                  cmp ax, 0 ; is the quotient zero
  3882 00000719 75F1                    jnz nextdigit ; if no divide it again
  3883 0000071B BF7208                  mov di, 2162 ; point di to top left column
  3884 0000071E 5A                      nextpos: pop dx ; remove a digit from the stack
  3885 0000071F B603                    mov dh, 0x03 ; use normal attribute
  3886 00000721 268915                  mov [es:di], dx ; print char on screen
  3887 00000724 83C702                  add di, 2 ; move to next screen location
  3888 00000727 E2F5                    loop nextpos ; repeat for all digits on stack
  3889 00000729 5F                      pop di
  3890 0000072A 5A                      pop dx
  3891 0000072B 59                      pop cx
  3892 0000072C 5B                      pop bx
  3893 0000072D 58                      pop ax
  3894 0000072E 07                      pop es
  3895 0000072F C3                      ret 
  3896                                  
  3897                                  
  3898                                  ;--------------> SELF-COLLISION DEATH CHECK SUBROUTINE
  3899                                  self_collision:
  3900 00000730 53                      push bx
  3901 00000731 50                      push ax
  3902 00000732 51                      push cx
  3903                                  
  3904 00000733 BB[D107]                mov bx, pos
  3905 00000736 A1[CD07]                mov ax, word[len]
  3906 00000739 48                      dec ax
  3907 0000073A D1E0                    shl ax, 1
  3908 0000073C 01C3                    add bx, ax
  3909 0000073E 8B07                    mov ax, word[bx]
  3910 00000740 BB[D107]                mov bx, pos
  3911 00000743 8B0E[CD07]              mov cx, word[len]
  3912 00000747 83E902                  sub cx, 2
  3913                                  looping_self:
  3914 0000074A 3907                    cmp [bx], ax
  3915 0000074C 7503                    jne skip_self
  3916 0000074E E80A00                  call game_over
  3917                                  skip_self:
  3918 00000751 83C302                  add bx, 2
  3919 00000754 49                      dec cx
  3920 00000755 75F3                    jnz looping_self
  3921                                  
  3922 00000757 59                      pop cx
  3923 00000758 58                      pop ax
  3924 00000759 5B                      pop bx
  3925 0000075A C3                      ret
  3926                                  
  3927                                      
  3928                                  ;--------------> GAME OVER SUBROUTINE
  3929                                  game_over:
  3930 0000075B E8E2FB                      call clear_scr
  3931 0000075E B800B8                      mov ax, 0xb800
  3932 00000761 8EC0                        mov es, ax
  3933 00000763 BE[1100]                    mov si, game_over_msg
  3934 00000766 BFC607                      mov di, 1990
  3935 00000769 B90900                      mov cx, 9
  3936 0000076C B404                        mov ah, 0x04
  3937                                      looping_game_over:
  3938 0000076E 8A04                        mov byte al, [si]
  3939 00000770 268905                      mov word[es:di], ax
  3940 00000773 83C702                      add di, 2
  3941 00000776 46                          inc si
  3942 00000777 E2F5                        loop looping_game_over
  3943 00000779 BE[1A00]                    mov si, score_msg
  3944 0000077C B800B8                      mov ax, 0xb800
  3945 0000077F 8EC0                        mov es, ax
  3946 00000781 BF6608                      mov di, 2150
  3947 00000784 B90500                      mov cx, 5
  3948 00000787 B404                        mov ah, 0x04
  3949                                      looping_score:
  3950 00000789 8A04                        mov byte al, [si]
  3951 0000078B 268905                      mov word[es:di], ax
  3952 0000078E 83C702                      add di, 2
  3953 00000791 46                          inc si
  3954 00000792 E2F5                        loop looping_score
  3955 00000794 E861FF                      call print_score
  3956 00000797 B90300                      mov cx, 3
  3957                                      loop_over_delay:
  3958 0000079A E88CFB                      call delay
  3959 0000079D E2FB                        loop loop_over_delay
  3960                                  
  3961 0000079F B8004C                      mov ax, 0x4c00
  3962 000007A2 CD21                        int 0x21
  3963 000007A4 C3                          ret
  3964                                  
  3965                                  
  3966                                  ;--------------> GAME STARTING SUBROUTINE
  3967                                  start:
  3968                                  
  3969 000007A5 E876F9                      call clrscr
  3970 000007A8 E8D3F9                      call print_banner
  3971                                  
  3972                                  loading:
  3973 000007AB 31C0                        xor ax, ax
  3974 000007AD B401                        mov ah, 0x01 
  3975 000007AF CD16                        int 0x16 ; call BIOS keyboard service
  3976 000007B1 74F8                        jz loading
  3977                                  
  3978 000007B3 31C0                        xor ax, ax
  3979 000007B5 CD16                        int 0x16
  3980                                  
  3981 000007B7 3A06[0B00]                  cmp al, byte[s_key]
  3982 000007BB 7402                        je continue
  3983 000007BD EBEC                        jmp loading
  3984                                  
  3985                                  continue:
  3986 000007BF E821FC                      call load_border
  3987 000007C2 E897FB                      call print_food
  3988 000007C5 E83BFE                      call move_right
  3989                                     
  3990                                  
  3991 000007C8 B8004C                      mov ax, 0x4c00
  3992 000007CB CD21                        int 0x21
  3993                                  
  3994                                  
  3995                                  ;--------------> SNAKE RELATED DATA
  3996 000007CD 0300                    len: dw 3
  3997 000007CF A200                    space: dw 162
  3998 000007D1 A200A400A600            pos: dw 162, 164, 166
