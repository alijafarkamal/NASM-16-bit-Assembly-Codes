     1                                  ; Example 9.5 - Unhooking Interrupt
     2                                  	[org 0x100]
     3 00000000 EB47                    	jmp start
     4                                  
     5 00000002 0A0D5573657220656E-     message1: db 10, 13, 'User entered some key ... $'
     5 0000000B 746572656420736F6D-
     5 00000014 65206B6579202E2E2E-
     5 0000001D 2024               
     6 0000001F 00000000                oldisr: dd 0											; space for saving old isr
     7                                  
     8                                  ;---------------------------------------------------------------
     9                                  ; keyboard interrupt service routine
    10 00000023 50                      kbisr:		push ax
    11 00000024 06                      			push es
    12                                  
    13 00000025 B800B8                  			mov ax, 0xb800
    14 00000028 8EC0                    			mov es, ax									; point es to video memory
    15                                  
    16 0000002A E460                    			in al, 0x60									; read a char from keyboard port
    17                                  
    18 0000002C 3C2A                    			cmp al, 0x2a								; is the key left shift
    19 0000002E 7508                    			jne nextcmp									; no, try next comparison
    20 00000030 26C60600004C            			mov byte [es:0], 'L'						; yes, print L at top left
    21 00000036 EB0A                    			jmp nomatch									; leave interrupt routine
    22                                  
    23 00000038 3C36                    nextcmp:	cmp al, 0x36								; is the key right shift
    24 0000003A 7506                    			jne nomatch									; no, leave interrupt routine
    25 0000003C 26C606000052            			mov byte [es:0], 'R'						; yes, print R at top left
    26                                  
    27                                  nomatch:	; mov al, 0x20
    28                                  			; out 0x20, al
    29 00000042 07                      			pop es
    30 00000043 58                      			pop ax
    31 00000044 2EFF2E[1F00]            			jmp far [cs:oldisr] ; call the original ISR
    32                                  			; iret
    33                                  ;---------------------------------------------------------------
    34 00000049 31C0                    start:		xor ax, ax
    35 0000004B 8EC0                    			mov es, ax										; point es to IVT base
    36                                  			
    37 0000004D 26A12400                			mov ax, [es:9*4]
    38 00000051 A3[1F00]                			mov [oldisr], ax								; save offset of old routine
    39 00000054 26A12600                			mov ax, [es:9*4+2]
    40 00000058 A3[2100]                			mov [oldisr+2], ax								; save segment of old routine
    41                                  			
    42 0000005B FA                      			cli												; disable interrupts
    43 0000005C 26C7062400[2300]        			mov word [es:9*4], kbisr						; store offset at n*4
    44 00000063 268C0E2600              			mov [es:9*4+2], cs								; store segment at n*4+2
    45 00000068 FB                      			sti												; enable interrupts
    46                                  			
    47 00000069 B400                    l1:			mov ah, 0										; service 0 – get keystroke
    48 0000006B CD16                    			int 0x16										; call BIOS keyboard service
    49                                  
    50 0000006D BA[0200]                			mov dx, message1 								; greetings message
    51 00000070 B409                    			mov ah, 9 										; service 9 – write string
    52 00000072 CD21                    			int 0x21 										; dos services
    53                                  
    54 00000074 3C1B                    			cmp al, 27										; is the Esc key pressed
    55 00000076 75F1                    			jne l1											; if no, check for next key
    56                                  			
    57 00000078 A1[1F00]                			mov ax, [oldisr]								; read old offset in ax
    58 0000007B 8B1E[2100]              			mov bx, [oldisr+2]								; read old segment in bx
    59                                  			
    60 0000007F FA                      			cli												; disable interrupts
    61 00000080 26A32400                			mov [es:9*4], ax								; restore old offset from ax
    62 00000084 26891E2600              			mov [es:9*4+2], bx								; restore old segment from bx
    63 00000089 FB                      			sti												; enable interrupts 			
    64                                  
    65 0000008A B8004C                  			mov ax, 0x4c00									; terminate program
    66 0000008D CD21                    			int 0x21
