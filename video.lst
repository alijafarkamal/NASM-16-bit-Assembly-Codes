     1                                  [org 0x0100]
     2 00000000 E93702                  				jmp start
     3 00000003 100020003000400050-     arr:  dw 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xA0;, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0, 0x100
     3 0000000C 006000700080009000-
     3 00000015 A000               
     4                                  
     5                                  ;arr: dw 11111010, 10110001, 10101011, 01110010, 11000101, 10011100, 01010100, 01010000, 10001011
     6 00000017 0000                    result: dw 0
     7                                  ;string: db 'DRAWER'
     8                                  ;length: dw 6
     9                                  
    10                                  ;bxgnal: dw 0
    11                                  ;num: db '1011100110011001'
    12                                  
    13                                  ;yes: db 'Yes'
    14                                  ;no: db 'No'
    15                                  clrsr:
    16 00000019 B800B8                  	mov ax,0xB800
    17 0000001C 8EC0                    	mov es,ax
    18 0000001E BF0000                  	mov di,0
    19 00000021 B9D007                  	mov cx,2000
    20                                  	iteration:
    21 00000024 26C7052007              	mov word[es:di],0x720
    22 00000029 83C702                  	add di,2
    23 0000002C E2F6                    	loop iteration
    24 0000002E C3                      	ret
    25                                  ;subr:
    26                                  ;	push bp
    27                                  ;	mov bp,sp
    28                                  ;	push ax
    29                                  ;	push bx
    30                                  ;	mov ax,[bp+4]
    31                                  ;	mov bx,[bp+6]
    32                                  ;	mul bx
    33                                  ;	mov [result],ax
    34                                  ;	pop bx
    35                                  ;	pop ax
    36                                  ;	pop bp
    37                                  ;	ret 4
    38                                  ;triangle:
    39                                  ;    push bp
    40                                  ;    mov bp, sp
    41                                  ;    pusha
    42                                  ;    xor dx, dx         ; Clear dx to avoid dividxon errors
    43                                  ;	mov dx,2
    44                                  ;    mov ax, [bp+4]     ; Load the first argument into ax
    45                                  ;    mov bx, [bp+6]     ; Load the second argument into bx
    46                                  ;    mul bx             ; Multiply ax by bx, result in dx:ax
    47                                  ;    mov bx, 2          ; Load 2 into bx for dividxon
    48                                  ;    div bx             ; Divide dx:ax by bx
    49                                  ;    mov [result], ax   ; Store result`	
    50                                  ;    popa
    51                                  ;    pop bp
    52                                  ;    ret 4
    53                                  ;draw:
    54                                  ;	push bp
    55                                  ;	mov bp,sp
    56                                  ;	pusha
    57                                  ;
    58                                  ;	mov dx,[result]
    59                                  ;	mov ax,0xB800
    60                                  ;	mov es,ax
    61                                  ;	mov di,0
    62                                  ;
    63                                  ;	mov ah,0x4F
    64                                  ;	mov al,'*'
    65                                  ;	mov bx,0
    66                                  ;	mov cx,0
    67                                  ;	mov byte[es:di],al
    68                                  ;	mov di,160
    69                                  ;
    70                                  ;st_loop:
    71                                  ;	add cx,1
    72                                  ;nd_loop:
    73                                  ;	mov byte[es:di],al
    74                                  ;	add di,2
    75                                  ;	add bx,1
    76                                  ;	loop nd_loop
    77                                  ;
    78                                  ;	mov cx,bx
    79                                  ;	mov bx,0
    80                                  ;	add di,160
    81                                  ;	sub di,cx
    82                                  ;	sub di,cx
    83                                  ;
    84                                  ;	sub dx,1
    85                                  ;	jnz st_loop
    86                                  ;
    87                                  ;	popa
    88                                  ;	pop bp
    89                                  ;	ret
    90                                  ;
    91                                  ;print: 
    92                                  ;	push bp
    93                                  ;	mov bp,sp
    94                                  ;
    95                                  ;	mov cx,[bp+4]
    96                                  ;	mov di,cx
    97                                  ;	sub di,1
    98                                  ;	shr cx,1
    99                                  ;	mov bx,[bp+6]
   100                                  ;	mov bx,0
   101                                  ;
   102                                  ;loop1:
   103                                  ;	mov al,byte[bx+bx]
   104                                  ;	mov ah,byte[bx+di]
   105                                  ;	mov byte[bx+bx],ah
   106                                  ;	mov byte[bx+di],al
   107                                  ;	sub di,1
   108                                  ;	add bx,1
   109                                  ;	loop loop1
   110                                  ;
   111                                  ;
   112                                  ;	pop bp
   113                                  ;ret 4
   114                                  ;
   115                                  ;
   116                                  ;drawer:
   117                                  ;	push bp
   118                                  ;	mov bp,sp
   119                                  ;	mov ax,0xB800
   120                                  ;	mov es,ax
   121                                  ;
   122                                  ;	mov cx,80
   123                                  ;	mov ax,[bp+6]
   124                                  ;	mul cx
   125                                  ;	mov cx,[length]
   126                                  ;	add ax,[bp+4]
   127                                  ;	shl ax,1
   128                                  ;	mov di,ax
   129                                  ;	mov bx,0
   130                                  ;
   131                                  ;
   132                                  ;	drawing:
   133                                  ;
   134                                  ;	mov al,byte[string+bx]
   135                                  ;	mov ah,0x8C
   136                                  ;	mov word[es:di],ax
   137                                  ;	add di,2
   138                                  ;	add bx,1
   139                                  ;	loop drawing
   140                                  ;
   141                                  ;
   142                                  ;	pop bp
   143                                  ;	ret 4
   144                                  ;
   145                                  ;
   146                                  ;palindrome:
   147                                  ;	push bp
   148                                  ;	mov bp,sp
   149                                  ;	mov cx,16
   150                                  ;	shr cx,1
   151                                  ;	mov di,15
   152                                  ;	mov bx,0
   153                                  ;	mov bx,[bp+4]
   154                                  ;
   155                                  ;	mov ax,0xB800
   156                                  ;	mov es,ax
   157                                  ;
   158                                  ;check: 
   159                                  ;	mov dl,byte[bx+di]
   160                                  ;	cmp byte[bx+bx],dl
   161                                  ;	jne ouf_of_loop
   162                                  ;	sub di,1
   163                                  ;	add bx,1
   164                                  ;loop check
   165                                  ;
   166                                  ;
   167                                  ;	mov bx,0
   168                                  ;	mov di,0
   169                                  ;	mov cx,3
   170                                  ;	mov bx,yes
   171                                  ;
   172                                  ;yes_iter:
   173                                  ;	mov al,[bx+bx]
   174                                  ;	mov ah,0x8C
   175                                  ;	mov [es:di],ax
   176                                  ;	add di,2
   177                                  ;	add bx,1
   178                                  ;	loop yes_iter
   179                                  ;	jmp end_of
   180                                  ;
   181                                  ;
   182                                  ;ouf_of_loop: 
   183                                  ;	mov bx,0
   184                                  ;	mov di,0
   185                                  ;	mov cx,2
   186                                  ;	mov bx,no
   187                                  ;no_iter:
   188                                  ;	mov al,[bx+bx]
   189                                  ;	mov ah,0x8C
   190                                  ;	mov [es:di],ax
   191                                  ;	add di,2
   192                                  ;	add bx,1
   193                                  ;	loop no_iter
   194                                  ;end_of:
   195                                  ;
   196                                  ;	pop bp
   197                                  ;	ret 2
   198                                  
   199                                  
   200                                  
   201                                  
   202                                  help:
   203 0000002F 55                      	push bp
   204 00000030 89E5                    	mov bp,sp
   205 00000032 B800B8                  	mov ax,0xB800
   206 00000035 8EC0                    	mov es,ax
   207 00000037 B48C                    	mov ah,0x8C
   208 00000039 8A4602                  	mov al,byte[bp+2]
   209 0000003C 268905                  	mov [es:di],ax
   210 0000003F 5D                      	pop bp
   211 00000040 C20200                  	ret 2
   212                                  
   213                                  
   214                                  
   215                                  
   216                                  
   217                                  command:
   218 00000043 51                      	push cx
   219 00000044 53                      	push bx
   220 00000045 52                      	push dx
   221 00000046 50                      	push ax
   222 00000047 B90000                  	mov cx,0
   223 0000004A BB0A00                  	mov bx,10
   224                                  next:
   225 0000004D 31D2                    	xor dx,dx
   226 0000004F F7F3                    	div bx
   227 00000051 80C230                  	add dl,0x30
   228 00000054 52                      	push dx
   229 00000055 41                      	inc cx
   230 00000056 83F800                  	cmp ax,0
   231 00000059 75F2                    	jne next
   232                                  mext:
   233 0000005B 5A                      	pop dx
   234 0000005C B64C                    	mov dh,0x4C
   235 0000005E 268915                  	mov [es:di],dx
   236 00000061 83C702                  	add di,2
   237 00000064 E2F5                    	loop mext
   238                                  
   239 00000066 58                      	pop ax
   240 00000067 5A                      	pop dx
   241 00000068 5B                      	pop bx
   242 00000069 59                      	pop cx
   243 0000006A C3                      	ret
   244                                  
   245                                  multiplication_table:
   246                                  
   247 0000006B 55                      	push bp
   248 0000006C 89E5                    	mov bp,sp
   249 0000006E 60                      	pusha
   250 0000006F B800B8                  	mov ax,0xB800
   251 00000072 8EC0                    	mov es,ax
   252 00000074 BF0000                  	mov di,0
   253 00000077 BB0000                  	mov bx,0
   254 0000007A BE0100                  	mov si,1
   255                                  first_loop:
   256                                  
   257 0000007D 83FB05                  	cmp bx,5
   258 00000080 7435                    	je end
   259 00000082 83C301                  	add bx,1
   260 00000085 B90500                  	mov cx,5
   261 00000088 B80000                  	mov ax,0
   262 0000008B BE0100                  	mov si,1
   263                                  
   264                                  second_loop:
   265                                  
   266 0000008E 89F0                    	mov ax,si
   267 00000090 F7E3                    	mul bx
   268 00000092 83F80A                  	cmp ax,10
   269 00000095 731B                    	jae divv
   270 00000097 83C030                  	add ax,0x30
   271                                  
   272 0000009A B44C                    	mov ah,0x4C
   273 0000009C 268905                  	mov [es:di],ax
   274                                  labelar:
   275 0000009F 83C601                  	add si,1
   276 000000A2 83C704                  	add di,4
   277 000000A5 E2E7                    	loop second_loop
   278                                  
   279 000000A7 B8A000                  	mov ax,160
   280 000000AA 89DF                    	mov di,bx
   281 000000AC F7E7                    	mul di
   282 000000AE 89C7                    	mov di,ax
   283                                  
   284 000000B0 EBCB                    	jmp first_loop
   285                                  divv: 
   286 000000B2 E88EFF                  call command
   287 000000B5 EBE8                    jmp labelar
   288                                  end:
   289 000000B7 61                      	popa
   290 000000B8 5D                      	pop bp
   291 000000B9 C3                      	ret
   292                                  
   293                                  plus:
   294 000000BA 55                      	push bp
   295 000000BB 89E5                    	mov bp,sp
   296 000000BD 60                      	pusha
   297 000000BE B800B8                  	mov ax,0xB800
   298 000000C1 8EC0                    	mov es,ax
   299 000000C3 BF1400                  	mov di,20
   300 000000C6 8B4E06                  	mov cx,[bp+6]
   301 000000C9 B40A                    	mov ah,0x0A
   302 000000CB B02A                    	mov al,'*'
   303                                  vertical:
   304 000000CD 268905                  	mov [es:di],ax
   305 000000D0 81C7A000                	add di,160
   306 000000D4 E2F7                    loop vertical
   307 000000D6 BB0900                  	mov bx,9
   308 000000D9 B8A000                  	mov ax,160
   309 000000DC F7E3                    	mul bx
   310 000000DE 89C7                    	mov di,ax
   311 000000E0 8B4E04                  	mov cx,[bp+4]
   312 000000E3 B40A                    	mov ah,0x0A
   313 000000E5 B02A                    	mov al,'*'
   314                                  horizontal:
   315 000000E7 268905                  	mov [es:di],ax
   316 000000EA 83C702                  	add di,2
   317 000000ED E2F8                    	loop horizontal
   318 000000EF 61                      	popa
   319 000000F0 5D                      	pop bp
   320 000000F1 C20400                  	ret 4
   321                                  
   322                                  
   323                                  
   324                                  	
   325                                  poly:
   326 000000F4 55                      	push bp
   327 000000F5 89E5                    	mov bp,sp
   328 000000F7 60                      	pusha
   329 000000F8 03760C                  	add si,[bp+12]
   330 000000FB 8B4E04                  	mov cx,[bp+4]
   331                                  	
   332 000000FE BF0A00                  	mov di,10
   333 00000101 BA0000                  	mov dx,0
   334                                  
   335                                  
   336                                  
   337                                  evaluate:
   338                                  	
   339 00000104 8B5E06                  	mov bx,[bp+6]
   340 00000107 89D0                    	mov ax,dx
   341                                  ander:
   342 00000109 83FA00                  	cmp dx,0
   343 0000010C 7405                    	je baher
   344 0000010E D1E3                    	shl bx,1
   345 00000110 4A                      	dec dx
   346 00000111 EBF6                    	jmp ander
   347                                  baher:
   348 00000113 89C2                    	mov dx,ax
   349 00000115 8B03                    	mov ax,[bp+di]
   350 00000117 F7E3                    	mul bx
   351 00000119 01C6                    	add si,ax
   352 0000011B 83EF02                  	sub di,2
   353 0000011E 42                      	inc dx
   354 0000011F E2E3                    loop evaluate
   355 00000121 8936[1700]              	mov [result],si
   356 00000125 61                      	popa
   357 00000126 5D                      	pop bp
   358 00000127 C20A00                  	ret 10
   359                                  checkOccurences:
   360 0000012A 55                      	push bp
   361 0000012B 89E5                    	mov bp,sp
   362 0000012D 60                      	pusha
   363 0000012E B800B8                  	mov ax,0xB800
   364 00000131 8EC0                    	mov es,ax
   365 00000133 B9D007                  	mov cx,2000
   366 00000136 BF0000                  	mov di,0
   367                                  highlighter:
   368 00000139 26803D41                	cmp byte[es:di],'A'
   369 0000013D 7408                    	je go
   370 0000013F 26803D61                	cmp byte[es:di],'a'
   371 00000143 7402                    	je go
   372 00000145 EB08                    	jmp outsider
   373                                  go:
   374 00000147 268A05                  	mov al,byte[es:di]
   375 0000014A B4CA                    	mov ah,0xCA
   376 0000014C 268905                  	mov [es:di],ax
   377                                  outsider:
   378 0000014F 83C702                  	add di,2
   379 00000152 E2E5                    loop highlighter
   380 00000154 61                      	popa
   381 00000155 5D                      	pop bp
   382 00000156 C3                      	ret
   383                                  
   384                                  
   385                                  
   386                                  
   387                                  
   388                                  fibonacci:
   389 00000157 83F901                  	cmp cx,1
   390 0000015A 740C                    	je skip1
   391 0000015C 83E901                  	sub cx,1
   392 0000015F 89DA                    	mov dx,bx
   393 00000161 01C3                    	add bx,ax
   394 00000163 89D0                    	mov ax,dx
   395 00000165 E8EFFF                  	call fibonacci
   396                                  skip1:
   397 00000168 891E[1700]              	mov [result],bx
   398 0000016C C3                      	ret
   399                                  factorial:
   400 0000016D 55                      	push bp
   401 0000016E 89E5                    	mov bp,sp
   402 00000170 C746040700              	mov word[bp+4],7
   403 00000175 C746060800              	mov word[bp+6],8
   404 0000017A 5D                      	pop bp
   405 0000017B C20400                  	ret 4
   406                                  
   407                                  
   408                                  	;sub cx,1
   409                                  	;cmp cx,0
   410                                  	;je skipa
   411                                  	;add ax,cx
   412                                  	;call factorial
   413                                  	;skipa:
   414                                  	;mov [result],ax
   415                                  	;ret
   416                                  
   417                                  
   418                                  
   419                                  
   420                                  binary_search:
   421 0000017E 39C3                    	cmp bx,ax
   422 00000180 722B                    	jb skipa
   423 00000182 89DF                    	mov di,bx
   424 00000184 29C7                    	sub di,ax
   425 00000186 D1EF                    	shr di,1
   426 00000188 01C7                    	add di,ax
   427 0000018A F7C70100                	test di,1
   428 0000018E 7518                    	jnz skip
   429                                  label:
   430 00000190 39B5[0300]              	cmp word[arr+di],si
   431 00000194 7417                    	je skipa
   432 00000196 7708                    	ja delta
   433 00000198 89F8                    	mov ax,di
   434 0000019A 83C001                  	add ax,1
   435 0000019D E8DEFF                  	call binary_search
   436                                  delta:	
   437 000001A0 89FB                    	mov bx,di
   438 000001A2 83EB01                  	sub bx,1
   439 000001A5 E8D6FF                  	call binary_search
   440                                  skip:
   441 000001A8 83EF01                  	sub di,1
   442 000001AB EBE3                    	jmp label
   443                                  skipa:
   444 000001AD D1EF                    	shr di,1
   445 000001AF 83C701                  	add di,1
   446 000001B2 893E[1700]              	mov [result],di
   447 000001B6 C3                      	ret
   448                                  
   449                                  
   450                                  hexagon:
   451 000001B7 55                      	push bp
   452 000001B8 89E5                    	mov bp,sp
   453 000001BA 60                      	pusha
   454 000001BB B800B8                  	mov ax,0xB800
   455 000001BE 8EC0                    	mov es,ax
   456 000001C0 8B4E08                  	mov cx,[bp+8]
   457 000001C3 BFA000                  	mov di,160
   458 000001C6 8B460C                  	mov ax,[bp+12]
   459 000001C9 F7E7                    	mul di
   460 000001CB 8B7E0A                  	mov di,[bp+10]
   461 000001CE D1E7                    	shl di,1
   462 000001D0 01F8                    	add ax,di
   463 000001D2 89C7                    	mov di,ax
   464 000001D4 8A6604                  	mov ah,[bp+4]
   465 000001D7 8A4606                  	mov al,[bp+6]
   466                                  
   467                                  straight:
   468 000001DA 268905                  	mov [es:di],ax
   469 000001DD 83C702                  	add di,2
   470 000001E0 E2F8                    loop straight
   471 000001E2 8B4E08                  	mov cx,[bp+8]
   472 000001E5 81C7A000                	add di,160
   473                                  
   474                                  front_diagonal:
   475 000001E9 268905                  	mov [es:di],ax
   476 000001EC 81C7A200                	add di,162
   477 000001F0 E2F7                    loop front_diagonal
   478 000001F2 8B4E08                  	mov cx,[bp+8]
   479                                  	;sub cx,1
   480 000001F5 83EF04                  	sub di,4
   481                                  
   482                                  back_diagonal:
   483 000001F8 268905                  	mov [es:di],ax
   484 000001FB 81C79E00                	add di,158
   485 000001FF E2F7                    loop back_diagonal
   486 00000201 8B4E08                  	mov cx,[bp+8]
   487 00000204 83E901                  	sub cx,1
   488 00000207 81EFA000                	sub di,160
   489                                  
   490                                  bottom:
   491 0000020B 268905                  	mov [es:di],ax
   492 0000020E 83EF02                  	sub di,2
   493 00000211 E2F8                    loop bottom
   494 00000213 8B4E08                  	mov cx,[bp+8]
   495 00000216 81EFA000                	sub di,160
   496                                  back_back_diagonal:
   497 0000021A 268905                  	mov [es:di],ax
   498 0000021D 81EFA200                	sub di,162
   499 00000221 E2F7                    loop back_back_diagonal
   500 00000223 8B4E08                  	mov cx,[bp+8]
   501 00000226 83E901                  	sub cx,1
   502 00000229 83C704                  	add di,4
   503                                  
   504                                  back_front_diagonal:
   505 0000022C 268905                  	mov [es:di],ax
   506 0000022F 81EF9E00                	sub di,158
   507 00000233 E2F7                    loop back_front_diagonal
   508 00000235 61                      	popa
   509 00000236 5D                      	pop bp
   510 00000237 C20A00                  	ret 10
   511                                  
   512                                  start:
   513                                  
   514 0000023A E8DCFD                  	call clrsr
   515 0000023D 6A07                    	push 7
   516 0000023F 6A0A                    	push 10
   517 00000241 6A05                    	push 5
   518 00000243 6A2A                    	push '*'
   519 00000245 6A02                    	push 0x02
   520 00000247 E86DFF                  	call hexagon
   521                                  
   522 0000024A 6A05                    	push 5
   523 0000024C 6A1C                    	push 28
   524 0000024E 6A03                    	push 3
   525 00000250 6A2B                    	push '+'
   526 00000252 6A01                    	push 0x01
   527 00000254 E860FF                  	call hexagon
   528                                  
   529 00000257 6A07                    	push 7
   530 00000259 6A28                    	push 40
   531 0000025B 6A07                    	push 7
   532 0000025D 6A23                    	push '#'
   533 0000025F 6A05                    	push 0x05
   534 00000261 E853FF                  	call hexagon
   535                                  
   536                                  
   537                                  	;mov ax,0
   538                                  	;mov bx,18
   539                                  	;mov si,0x70
   540                                  	;call binary_search
   541                                  
   542                                  	;mov cx,5
   543                                  	;mov ax,cx
   544                                  	;push 5
   545                                  	;push 6
   546                                  	;mov cx,8
   547                                  	;mov ax,0
   548                                  	;mov bx,1
   549                                  	;mov si,0
   550                                  	;call fibonacci
   551                                  
   552                                  	
   553                                  	;mov ax,[arr]
   554                                  
   555                                  	;call checkOccurences
   556                                  	;call clrsr
   557                                  	;push 3
   558                                  	;push 4
   559                                  	;push 5
   560                                  	;push 2
   561                                  	;push 2
   562                                  	;call poly
   563                                  
   564                                  
   565                                  
   566                                  
   567                                  	;call plus
   568                                  	;call multiplication_table
   569                                  	;mov ax,num
   570                                  	;push ax
   571                                  	;call palindrome
   572                                  	;push string
   573                                  	;push word[length]
   574                                  	;call print
   575                                  	;push 2
   576                                  	;push 5
   577                                  	;call drawer
   578                                  	;call clrsr
   579                                  	;push 2
   580                                  	;push 5
   581                                  	;call triangle
   582                                  	;call draw
   583                                  
   584                                  	;call subr
   585                                  	;mov word[0x0500],0xB
   586                                  	;mov word[0x0600],0xF
   587                                  	;mov ax,[0x0500]
   588                                  	;mov bx,[0x0600]
   589                                  	;mov cx,ax
   590                                  	;mov ax,bx
   591                                  	;mov bx,cx
   592                                  	;mov word[0x0500],bx
   593                                  	;mov word[0x0600],ax
   594                                  enda:
   595 00000264 B8004C                  mov ax,0x4c00
   596 00000267 CD21                    int 0x21
