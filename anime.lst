     1                                  ; ; %imacro note 2
     2                                  ; ; %ifidni %1,C
     3                                   ; ; db (%2)*12 + 0
     4                                  ; ; %elifidni %1,C#
     5                                   ; ; db (%2)*12 + 1
     6                                  ; ; %elifidni %1,D
     7                                   ; ; db (%2)*12 + 2
     8                                  ; ; %elifidni %1,D#
     9                                   ; ; db (%2)*12 + 3
    10                                  ; ; %elifidni %1,E
    11                                   ; ; db (%2)*12 + 4
    12                                  ; ; %elifidni %1,F
    13                                   ; ; db (%2)*12 + 5
    14                                  ; ; %elifidni %1,F#
    15                                   ; ; db (%2)*12 + 6
    16                                  ; ; %elifidni %1,G
    17                                   ; ; db (%2)*12 + 7
    18                                  ; ; %elifidni %1,G#
    19                                   ; ; db (%2)*12 + 8
    20                                  ; ; %elifidni %1,A
    21                                   ; ; db (%2)*12 + 9
    22                                  ; ; %elifidni %1,A#
    23                                   ; ; db (%2)*12 + 10
    24                                  ; ; %elifidni %1,H
    25                                   ; ; db (%2)*12 + 11
    26                                  ; ; %else
    27                                   ; ; %error Invalid use of note macro.
    28                                  ; ; %endif
    29                                  ; ; %endmacro
    30                                  ; [org 0x0100]
    31                                   ; mov ax, 0x0013 
    32                                   ; int 0x10 
    33                                   ; mov ax, 0xA000 
    34                                   ; mov es, ax 
    35                                       ; jmp start
    36                                  
    37                                  ; exit_msg: db 'Exit? (y/n)', 0  ;
    38                                  ; game_ended_msg: db 'Game Ended. Press Key', 0
    39                                  ; a_keeper: dw 0
    40                                  ; rect_mov_count: dw 0
    41                                  ; green_shades db 2, 10, 12, 28, 34 
    42                                  ; upperPillarHeight dw 0 
    43                                  ; lowerPillarHeight dw 0 
    44                                  ; bird_bottom_corner: dw 0
    45                                  ; bird_bottom_corner_end: dw 0
    46                                  ; bird_top_corner: dw 0
    47                                  ; bird_pos: dw 31180
    48                                  ; pipesX: dw 319, 459
    49                                  ; pipesY: dw 20 , 20
    50                                  ; leftOverPipeWidth: dw 0
    51                                  ; leftOverPipeY: dw 0
    52                                  ; boolDrawBottomPipe: dw 0
    53                                  ; intBottomPipeStart: dw 0
    54                                  ; intPipeEndX: dw 0
    55                                  ; collision_detected: dw 0
    56                                  ; boolAdjusted: dw 0
    57                                  ; boolFirstPipe: dw 0
    58                                  ; rect_pos1: dw 0
    59                                  ; rect_pos2: dw 0
    60                                  ; rect_pos_down: dw 0
    61                                  ; rect_pos_down1: dw 0
    62                                  ; rect_pos_down2: dw 0
    63                                  ; isAnimating: dw 0
    64                                  ; BirdDirection: db 'D'
    65                                  ; bird_position_holder: dw 0
    66                                  ; score :dw 0
    67                                  ; tickcount: dw 0
    68                                  ; old_timer:dw 0,0
    69                                  ; delay_threshold dw 1600   
    70                                  ; timer_hooked db 0    
    71                                  ; is_flapping :db 0  
    72                                  ; upper_pillar_helper: dw 0
    73                                  ; GameTitle: db 'Assembler Aviator', 0
    74                                  ; RollNumbers: db 'Roll Numbers: 23L-0815, 23L-0576', 0
    75                                  ; Names: db 'Developed by: Ali Jafar,Tayyab Khalil', 0
    76                                  ; Semester: db 'Semester: Fall 2024', 0
    77                                  ; Instructions: db 'Press UP ARROW to move up,ESC to quit', 0
    78                                  ; Instructions1: db 'If ESC is pressed, game stops', 0
    79                                  ; Instructions2: db 'If y is pressed, it exits', 0
    80                                  ; Instructions3: db 'else it continues from where it stops', 0
    81                                  ; StartMessage: db 'Press any key to start...', 0
    82                                  ; cscore: db 'Score: ' ,0
    83                                  ; ; notes: dw 440, 494, 523, 587, 659, 698, 784  ; Frequencies for A4, B4, C5, etc.
    84                                  ; ; durations: dw 300, 300, 400, 300, 500, 300, 600 ; Durations in milliseconds
    85                                  ; ; note_count: dw 7                              ; Number of notes
    86                                  ; notes: dw 0x1FB4, 0x152F, 0x0A97  ; Frequencies for D3, A3, and A4
    87                                  ; durations: dw 500, 500, 500         ; Durations in milliseconds
    88                                  ; note_count: dw 3                    ; Number of notes
    89                                  ; current_note: dw 0                  ; Index of the current note
    90                                  ; ; pcb: times *2 dw 0 ; Allocate space for 2 tasks (game + music)
    91                                  
    92                                  ; pcb: dw 0, 0, 0, 0, 0 ; task0 regs[cs:pcb + 0]
    93                                  ; dw 0, 0, 0, 0, 0 ;
    94                                  ; current: db 0
    95                                  ; %include"sound.asm"
    96                                  ; music:
    97                                  
    98                                  ; push cs 
    99                                  ; pop ds
   100                                  ; push es
   101                                  ; push ds
   102                                  ; pusha
   103                                  	; call start1
   104                                  	; popa
   105                                  	; pop DS
   106                                  	; pop es
   107                                  	; jmp music
   108                                  ; background:
   109                                  ; push cs 
   110                                  ; pop ds
   111                                  ; push es
   112                                      ; xor di, di
   113                                      ; mov cx, 320 * 200
   114                                      ; mov al, 2
   115                                      ; rep stosb
   116                                  	; pop es
   117                                      ; ret
   118                                  ; DisplayIntroduction:
   119                                  
   120                                  ; push cs 
   121                                  ; pop ds
   122                                  ; push es
   123                                      ; call background
   124                                      ; mov dh, 7
   125                                      ; mov dl, 3
   126                                      ; mov si, GameTitle
   127                                      ; call PrintStringAtPosition
   128                                      ; mov dh, 9
   129                                      ; mov si, RollNumbers
   130                                      ; call PrintStringAtPosition
   131                                  
   132                                      ; mov dh, 11
   133                                      ; mov si, Names
   134                                      ; call PrintStringAtPosition
   135                                  
   136                                      ; mov dh, 13
   137                                      ; mov si, Semester
   138                                      ; call PrintStringAtPosition
   139                                  
   140                                      ; mov dh, 15
   141                                      ; mov si, Instructions
   142                                      ; call PrintStringAtPosition
   143                                  
   144                                      ; mov dh, 17
   145                                      ; mov si, StartMessage
   146                                      ; call PrintStringAtPosition
   147                                  	; pop es
   148                                      ; ret
   149                                  
   150                                  ; PrintStringAtPosition:
   151                                  
   152                                  ; push cs 
   153                                  ; pop ds
   154                                  ; push es
   155                                      ; pusha
   156                                      ; mov ah, 02h
   157                                      ; int 10h
   158                                      ; mov ah, 0Eh
   159                                      ; mov bh, 0
   160                                      ; mov bl, 15
   161                                  
   162                                  ; print_position_loop:
   163                                      ; lodsb
   164                                      ; cmp al, 0
   165                                      ; je done_position_print
   166                                      ; int 10h
   167                                      ; jmp print_position_loop
   168                                  
   169                                  ; done_position_print:
   170                                      ; popa
   171                                  	; pop es
   172                                      ; ret
   173                                  ; collision:
   174                                  ; push cs 
   175                                  ; pop ds
   176                                  ; push es
   177                                  ; pusha
   178                                   ; cmp word[bird_pos],150
   179                                   ; ja next_check
   180                                   ; mov word[collision_detected],1
   181                                   ; jmp get_out
   182                                  ; next_check:
   183                                  ; mov di, word[bird_bottom_corner_end]
   184                                  ; add di,320
   185                                   ; cmp di,57600
   186                                   ; jb get_out
   187                                   ; mov word[collision_detected],1
   188                                  ; get_out: 
   189                                  ; popa
   190                                  ; pop es
   191                                  ; ret
   192                                  
   193                                  
   194                                  ; ShowExitConfirmation:
   195                                  ; push cs 
   196                                  ; pop ds
   197                                      ; mov ah, 02h                
   198                                      ; mov bh, 0                   
   199                                      ; mov dh, 24                  ; Row (adjust as needed)
   200                                      ; mov dl, 15                  ; Column (adjust as needed)
   201                                      ; int 10h
   202                                  
   203                                      ; mov ah, 0Eh                 ; BIOS teletype function
   204                                      ; mov bh, 0                   ; Page number
   205                                      ; mov bl, 2                  ; White text
   206                                      ; mov si, exit_msg            ; Pointer to message
   207                                  
   208                                  ; print_message_text:
   209                                      ; lodsb                      
   210                                      ; cmp al, 0
   211                                      ; je wait_for_key1
   212                                      ; int 10h                   
   213                                      ; jmp print_message_text
   214                                  
   215                                  ; wait_for_key1:
   216                                  ; push cs 
   217                                  ; pop ds
   218                                      ; mov ah, 0
   219                                      ; int 16h                     ; Get key in AL
   220                                      ; cmp al, 'y'                 ; Check if 'y' or 'Y'
   221                                      ; je exit_game
   222                                      ; cmp al, 'Y'
   223                                      ; je exit_game
   224                                  ; end_erase:
   225                                  	; mov bx,10
   226                                  	; mov di,60920
   227                                  ; exit_loop:
   228                                  	; mov cx,88
   229                                  	; mov al,6
   230                                  	; rep stosb
   231                                  	; dec bx
   232                                  	; add di,232
   233                                  	; cmp bx,0
   234                                  ; jne exit_loop
   235                                      ; ret
   236                                  
   237                                  ; exit_game:
   238                                  ; push cs 
   239                                  ; pop ds
   240                                      ; ; mov ax, 0x0003
   241                                      ; ; int 0x10
   242                                      ; mov ah, 02h
   243                                      ; mov bh, 0
   244                                      ; mov dh, 12
   245                                      ; mov dl, 15
   246                                      ; int 10h
   247                                  
   248                                      ; mov ah, 0Eh
   249                                      ; mov si, game_ended_msg
   250                                  
   251                                  ; print_loop:
   252                                      ; lodsb
   253                                      ; cmp al, 0
   254                                      ; je wait_for_key
   255                                      ; int 10h
   256                                      ; jmp print_loop
   257                                  ; wait_for_key:
   258                                      ; mov ah, 0
   259                                      ; int 16h
   260                                  
   261                                      ; mov ax, 0x0003
   262                                      ; int 0x10
   263                                  
   264                                      ; mov ax, 0x4C00
   265                                      ; int 0x21
   266                                  
   267                                  ; upper_part:
   268                                  ; push cs 
   269                                  ; pop ds
   270                                  ; push es
   271                                      ; xor di, di
   272                                      ; mov al, 35h
   273                                      ; mov cx, 320 * 60
   274                                      ; rep stosb
   275                                  	; pop es
   276                                      ; ret
   277                                  
   278                                  ; medium_part:
   279                                  ; push cs 
   280                                  ; pop ds
   281                                  ; push es
   282                                      ; mov di, 320 * 60
   283                                      ; mov al, 35h
   284                                      ; mov cx, 360 * 60
   285                                      ; rep stosb
   286                                  	; pop es
   287                                      ; ret
   288                                  
   289                                  ; lower_part:
   290                                  ; push cs 
   291                                  ; pop ds
   292                                  ; push es
   293                                      ; mov di, 320 * 120
   294                                      ; mov al, 35h
   295                                      ; mov cx, 320 * 80
   296                                      ; rep stosb
   297                                  	; pop es
   298                                      ; ret
   299                                  
   300                                  ; sscore:
   301                                  ; push cs 
   302                                  ; pop ds
   303                                  ; push es
   304                                      ; pusha
   305                                      ; mov si, cscore
   306                                      ; mov ah, 02h
   307                                      ; mov bh, 0
   308                                      ; mov dh, 24
   309                                      ; mov dl, 1
   310                                      ; int 10h
   311                                      ; mov ah, 0Eh
   312                                      ; mov bh, 0
   313                                      ; mov bl, 15
   314                                  
   315                                  ; print_scoer:
   316                                      ; lodsb
   317                                      ; cmp al, 0
   318                                      ; je done_
   319                                      ; int 10h
   320                                      ; jmp print_scoer
   321                                  
   322                                  ; done_:
   323                                      ; popa
   324                                  	; pop es
   325                                      ; ret
   326                                  
   327                                  ; cal_dig:
   328                                  
   329                                      ; call sscore
   330                                  	; push cs 
   331                                  ; pop ds
   332                                  ; push es
   333                                      ; mov ax, [score]
   334                                  	; cmp ax,1000
   335                                  	; je movv
   336                                  	; jne movv1
   337                                  	; movv:
   338                                  	; mov ax,0
   339                                  	; movv1:
   340                                      ; xor cx, cx
   341                                      ; mov bx, 10
   342                                  ; store_digits:
   343                                  ; push cs 
   344                                  ; pop ds
   345                                      ; xor dx, dx
   346                                      ; div bx
   347                                      ; push dx
   348                                      ; inc cx
   349                                      ; cmp ax, 0
   350                                      ; jnz store_digits
   351                                  
   352                                  ; draw_score:
   353                                  ; push cs 
   354                                  ; pop ds
   355                                      ; mov ah, 02h
   356                                      ; mov bh, 0
   357                                      ; mov dh, 24
   358                                      ; mov dl, 8
   359                                      ; int 10h
   360                                  
   361                                  ; print_digits:
   362                                  
   363                                      ; pop dx
   364                                      ; add dl, 0x30
   365                                      ; mov al, dl
   366                                      ; mov ah, 0Eh
   367                                      ; mov bh, 0
   368                                      ; int 10h
   369                                      ; inc dl
   370                                      ; loop print_digits
   371                                  	; pop es
   372                                      ; ret    
   373                                  
   374                                  
   375                                  ; bird_body:
   376                                  ; push cs 
   377                                  ; pop ds
   378                                  ; push es
   379                                      ; pusha
   380                                      ; mov bx,12 
   381                                      ; mov si, [bird_pos] 
   382                                      ; add si,18
   383                                      ; mov word[bird_top_corner],si
   384                                      ; sub si,18
   385                                  ; body:
   386                                      ; mov di, si
   387                                      ; mov al, 14 
   388                                      ; mov cx, 18 
   389                                      ; rep stosb
   390                                      ; sub bx,1
   391                                      ; add si, 320
   392                                      ; cmp bx, 0 
   393                                      ; jnz body
   394                                  	; push di
   395                                  	; mov di,[bird_pos]
   396                                  	; add di,1608
   397                                  	; mov al,  0xCC
   398                                  	; stosb
   399                                  	; inc di
   400                                  	; stosb
   401                                  	; inc di
   402                                  	; stosb
   403                                  	; pop di
   404                                      ; sub si,320
   405                                      ; mov word[bird_bottom_corner],si
   406                                      ; add si,18
   407                                      ; mov word[bird_bottom_corner_end],si
   408                                      ; sub si,18
   409                                      ; mov [bird_position_holder],si
   410                                      ; popa
   411                                  ; pop es	
   412                                      ; ret 
   413                                  
   414                                  ; defDrawPipe:
   415                                  
   416                                  ; push cs 
   417                                  ; pop ds
   418                                      ; push bp
   419                                      ; mov bp, sp
   420                                      ; pusha
   421                                      ; mov cx, [bp+4]
   422                                      ; mov dx, 0
   423                                      ; mov ah, 0ch
   424                                      ; mov bx, [bp+6]
   425                                      ; mov word [intBottomPipeStart], bx
   426                                      ; add word [intBottomPipeStart], 55
   427                                      ; mov word [boolDrawBottomPipe], 0
   428                                      ; mov word [intPipeEndX], cx
   429                                      ; add word [intPipeEndX], 40
   430                                      ; cmp word [bp+8], 1
   431                                      ; je drawTopPipe
   432                                      ; cmp word [leftOverPipeWidth], 0
   433                                      ; jbe endDrawPipe
   434                                      ; mov cx, [leftOverPipeWidth]
   435                                      ; mov word [intPipeEndX], cx
   436                                      ; mov cx, 40
   437                                      ; sub cx, [leftOverPipeWidth]
   438                                      ; add bx, cx
   439                                      ; mov cx, 0
   440                                      ; dec word [leftOverPipeWidth]
   441                                  ; drawTopPipe:
   442                                      ; mov al,2
   443                                  ; colorSelected:
   444                                      ; cmp cx, 320
   445                                      ; jae endDrawPipe
   446                                      ; cmp cx, 0
   447                                      ; jb endDrawPipe
   448                                      ; int 10h
   449                                  ; skipPipe:
   450                                      ; inc dx
   451                                      ; cmp dx, [bp+6]
   452                                      ; jbe drawTopPipe
   453                                      ; cmp dx, [intBottomPipeStart]
   454                                      ; ja notSkip
   455                                      ; add dx, 54
   456                                  ; notSkip:
   457                                      ; cmp dx, 180
   458                                      ; jb drawTopPipe
   459                                      ; inc cx
   460                                      ; mov dx, 0
   461                                      ; inc bx
   462                                      ; cmp cx, [intPipeEndX]
   463                                      ; jb drawTopPipe
   464                                  ; endDrawPipe:
   465                                      ; popa 
   466                                      ; pop bp
   467                                      ; ret 6
   468                                  ; movePipe:
   469                                  ; push cs 
   470                                  ; pop ds
   471                                      ; push bp
   472                                      ; mov bp, sp
   473                                      ; pusha
   474                                      ; inc word[rect_mov_count]
   475                                      ; cmp word[rect_mov_count],325
   476                                      ; je incc
   477                                      ; jne noincc
   478                                  ; incc:
   479                                      ; mov word[rect_mov_count],0
   480                                     ; ; inc word[score]
   481                                      ; ;call cal_dig
   482                                  ; noincc:
   483                                      ; mov bx, [bp+4]
   484                                      ; dec word [bx]
   485                                      ; mov cx, [bx]
   486                                      ; add cx,41
   487                                      ; mov word [boolAdjusted], 0
   488                                      ; cmp cx, 320
   489                                      ; jge adjustX
   490                                      ; jmp continueDrawing
   491                                  ; adjustX:
   492                                      ; sub word cx, 320
   493                                      ; mov word [boolAdjusted], 1
   494                                  ; continueDrawing:
   495                                      ; mov dx,0
   496                                      ; mov al,35h
   497                                      ; mov ah,0ch
   498                                      ; mov si,[bp+6]
   499                                  ; drawLastColumnSky:
   500                                      ; int 10h
   501                                      ; cmp dx, [ds:si]
   502                                      ; jne continueDrawingSky
   503                                      ; cmp word [boolAdjusted], 0
   504                                      ; je notCheckForadjusted
   505                                      ; cmp cx,41
   506                                      ; ja skipSkyColumn
   507                                  ; notCheckForadjusted:
   508                                      ; cmp cx,41
   509                                      ; jb continueDrawingSky
   510                                      ; add dx, 55
   511                                      ; jmp drawLastColumnSky
   512                                  ; continueDrawingSky:
   513                                      ; inc dx
   514                                      ; cmp dx,180
   515                                      ; jb drawLastColumnSky
   516                                  ; skipSkyColumn:
   517                                      ; sub cx,41
   518                                      ; cmp cx,0
   519                                      ; jne endMovePipe
   520                                      ; cmp word [pipesX], 0
   521                                      ; jne endMovePipeContinue
   522                                      ; mov word [boolFirstPipe], 1
   523                                  ; endMovePipeContinue:
   524                                      ; mov word [leftOverPipeWidth], 40
   525                                      ; mov cx, [ds:si]
   526                                      ; mov word [leftOverPipeY], cx
   527                                      ; mov word [bx], 320
   528                                      ; push word [bp+6]
   529                                      ; call generateRandomNumber
   530                                  ; endMovePipe:
   531                                      ; popa
   532                                      ; pop bp
   533                                      ; ret 2
   534                                  ; generateRandomNumber:
   535                                  ; push cs 
   536                                  ; pop ds
   537                                      ; push bp
   538                                      ; mov bp, sp
   539                                      ; pusha
   540                                      ; mov ah,0
   541                                      ; int 1ah
   542                                      ; mov ax,dx
   543                                      ; mov bx,60
   544                                      ; mov dx,0
   545                                      ; div bx
   546                                      ; mov bx, [bp+4]
   547                                      ; mov word [bx], dx
   548                                      ; add word [bx], 20
   549                                      ; popa
   550                                      ; pop bp
   551                                      ; ret 2
   552                                  
   553                                  ; ground:
   554                                  ; push cs 
   555                                  ; pop ds
   556                                      ; mov di, 57600
   557                                      ; mov cx, 320 * 10
   558                                      ; mov bx, 1
   559                                  ; .draw_gradient:
   560                                      ; mov al, [green_shades+bx]
   561                                      ; stosb
   562                                      ; inc bx
   563                                      ; cmp bx, 4
   564                                      ; jne .continue_gradient
   565                                      ; mov bx, 1
   566                                  ; .continue_gradient:
   567                                      ; loop .draw_gradient
   568                                      ; mov di, 60800
   569                                      ; mov al, 6
   570                                      ; mov cx, 320 * 10
   571                                      ; rep stosb
   572                                      ; ret
   573                                  
   574                                  
   575                                  ; delay:
   576                                  ; push cs 
   577                                  ; pop ds
   578                                   ; pusha
   579                                   ; mov cx,64000
   580                                  ; delay1:
   581                                   ; loop delay1
   582                                   ; popa
   583                                   ; ret
   584                                  
   585                                  
   586                                  
   587                                  ; remover_bird:
   588                                  ; push cs 
   589                                  ; pop ds
   590                                   ; pusha
   591                                   ; mov di,si
   592                                   ; mov al,35h
   593                                   ; mov cx,18
   594                                   ; rep stosb
   595                                   ; popa
   596                                   ; ret
   597                                  
   598                                  
   599                                  
   600                                  ; bird_falling:
   601                                  ; push cs 
   602                                  ; pop ds
   603                                  ; pusha
   604                                  ; mov ax,0xA000
   605                                  ; mov es,ax
   606                                  ; push di
   607                                  ; mov di,[bird_top_corner]
   608                                  ; cmp byte[es:di],2
   609                                  ; je exit_game_1
   610                                  ; mov di,[bird_bottom_corner]
   611                                  ; cmp byte[es:di+320],2
   612                                  ; je exit_game_1
   613                                  ; mov di,[bird_bottom_corner_end]
   614                                  ; cmp byte[es:di+320],2
   615                                  ; je exit_game_1
   616                                  ; pop di
   617                                   ; mov si,word[bird_pos]
   618                                   ; call remover_bird
   619                                   ; add word[bird_pos],320
   620                                   ; call bird_body
   621                                  ; jmp outr
   622                                  ; exit_game_1:
   623                                  ; mov word[collision_detected],1
   624                                  ; pop di
   625                                  ; outr:
   626                                   ; popa
   627                                   ; ret
   628                                  
   629                                  ; moving_up:
   630                                  ; push cs 
   631                                  ; pop ds
   632                                   ; pusha
   633                                  ; mov ax,0xA000
   634                                  ; mov es,ax
   635                                  ; push di
   636                                  ; mov di,[bird_top_corner]
   637                                  ; cmp byte[es:di-320],2
   638                                  ; je exit_game_2
   639                                  ; mov di,[bird_bottom_corner_end]
   640                                  ; cmp byte[es:di],2
   641                                  ; je exit_game_2
   642                                  ; mov di,[bird_pos]
   643                                  ; cmp byte[es:di-320],2
   644                                  ; je exit_game_2
   645                                  ; pop di
   646                                  
   647                                   ; sub word[bird_pos],320
   648                                   ; mov si,[bird_position_holder]
   649                                   ; call remover_bird
   650                                   ; call bird_body
   651                                  ; jmp outrr
   652                                  ; exit_game_2:
   653                                  ; mov word[collision_detected],1
   654                                  ; pop di
   655                                  ; outrr:
   656                                   ; popa
   657                                   ; ret
   658                                  
   659                                  ; bird_falling_collide:
   660                                  ; push cs 
   661                                  ; pop ds
   662                                  ; pusha
   663                                   ; mov si,word[bird_pos]
   664                                   ; call remover_bird
   665                                   ; add word[bird_pos],320
   666                                   ; call bird_body
   667                                   ; popa
   668                                   ; ret
   669                                  
   670                                  ; remover_extra:
   671                                  ; push cs 
   672                                  ; pop ds
   673                                  ; pusha
   674                                   ; mov di,[bird_pos]
   675                                  ; mov cx,12
   676                                   ; mov al,35h
   677                                  ; l2:
   678                                   ; stosb
   679                                   ; add di,319
   680                                  ; loop l2
   681                                   ; popa
   682                                   ; ret
   683                                  
   684                                  
   685                                  ; collide_extra:
   686                                  ; push cs 
   687                                  ; pop ds
   688                                  ; pusha
   689                                  ; l1:
   690                                  ; call remover_extra
   691                                  ; add word[bird_pos],1
   692                                  ; call delay
   693                                  ; call delay
   694                                  ; call bird_body
   695                                  ; mov di,[bird_bottom_corner]
   696                                  ; cmp byte[es:di+320],2
   697                                  ; je l1
   698                                  ; popa
   699                                  ; ret
   700                                  
   701                                  ; Collider:
   702                                  ; push cs 
   703                                  ; pop ds
   704                                  ; iteration:
   705                                  ; pusha
   706                                  ; mov ax,0xA000
   707                                  ; mov es,ax
   708                                  ; mov di,[bird_bottom_corner_end]
   709                                  ; cmp byte[es:di+318],2
   710                                  ; je outrrr
   711                                  ; mov di,[bird_bottom_corner]
   712                                  ; cmp byte[es:di+320],2
   713                                  ; je outrrr
   714                                  ; popa
   715                                  ; call delay
   716                                  ; call bird_falling_collide
   717                                  ; cmp word[bird_bottom_corner_end],57600
   718                                  ; jb iteration
   719                                  ; jmp labela
   720                                  ; outrrr:
   721                                  ; call collide_extra
   722                                  ; popa
   723                                  ; call Collider
   724                                  ; labela:
   725                                  ; call delay
   726                                  ; call delay
   727                                  ; call exit_game
   728                                  ; ret
   729                                  
   730                                  ; HandleKeyPress:
   731                                  ; push cs 
   732                                  ; pop ds
   733                                      ; push ax
   734                                      ; push bx
   735                                      ; push cx
   736                                      ; push dx
   737                                      ; mov ah, 1          
   738                                      ; int 0x16
   739                                      ; jz no_key_pressed  
   740                                      ; mov ah, 0          
   741                                      ; int 0x16
   742                                      ; cmp ah, 0x01          
   743                                      ; je exit_game_press
   744                                  
   745                                      ; cmp ah, 0x48          
   746                                      ; je handle_up
   747                                  
   748                                      ; cmp ah, 0xC8          
   749                                      ; je handle_release
   750                                  
   751                                      ; jmp no_key_pressed    
   752                                  
   753                                  ; exit_game_press:
   754                                      ; call ShowExitConfirmation
   755                                      ; jmp out_of
   756                                  
   757                                  ; handle_up:
   758                                      ; mov word [is_flapping], 1  
   759                                      ; mov word [tickcount], 0    
   760                                      ; call moving_up             
   761                                      ; jmp out_of
   762                                  ; handle_release:
   763                                      ; cmp byte [timer_hooked], 1 
   764                                      ; je out_of                  
   765                                      ; mov byte [timer_hooked], 1 
   766                                      ; call hook_timer            
   767                                      ; mov word [is_flapping], 0  
   768                                      ; jmp out_of
   769                                  ; no_key_pressed:
   770                                      ; call bird_falling
   771                                  ; out_of:
   772                                      ; pop dx
   773                                      ; pop cx
   774                                      ; pop bx
   775                                      ; pop ax
   776                                      ; ret
   777                                  
   778                                  
   779                                  ; hook_timer:
   780                                  ; push cs 
   781                                  ; pop ds
   782                                      ; cli                        
   783                                      ; push ds
   784                                      ; xor ax, ax
   785                                      ; mov es, ax
   786                                      ; mov ax, word [es:8*4]
   787                                      ; mov word [old_timer], ax
   788                                      ; mov ax, word [es:8*4+2]
   789                                      ; mov word [old_timer+2], ax
   790                                      ; mov ax, [delay_threshold]
   791                                      ; mov word [es:8*4], timr
   792                                      ; mov word [es:8*4+2], cs
   793                                      ; pop ds
   794                                      ; sti
   795                                      ; ret
   796                                  
   797                                  ; timr:
   798                                  ; push cs 
   799                                  ; pop ds
   800                                      ; push ax
   801                                      ; push bx
   802                                      ; push cx
   803                                      ; push dx
   804                                      ; inc word [tickcount]
   805                                      ; cmp word [tickcount], ax
   806                                      ; jne end_timer
   807                                      ; mov word [tickcount], 0
   808                                      ; call bird_falling
   809                                      ; mov byte [timer_hooked], 0
   810                                      ; call unhook_timer
   811                                  ; end_timer:
   812                                      ; mov al, 0x20
   813                                      ; out 0x20, al
   814                                      ; pop dx
   815                                      ; pop cx
   816                                      ; pop bx
   817                                      ; pop ax
   818                                      ; iret
   819                                  
   820                                  ; unhook_timer:
   821                                  ; push cs 
   822                                  ; pop ds
   823                                      ; cli
   824                                      ; push ds
   825                                      ; xor ax, ax
   826                                      ; mov es, ax
   827                                      ; mov ax, word [old_timer]
   828                                      ; mov word [es:8*4], ax
   829                                      ; mov ax, word [old_timer+2]
   830                                      ; mov word [es:8*4+2], ax
   831                                      ; pop ds
   832                                      ; sti
   833                                      ; ret
   834                                  
   835                                  ; ground_mover:
   836                                  ; push cs 
   837                                  ; pop ds
   838                                   ; pusha
   839                                   ; push ds
   840                                   ; mov ax,0xA000
   841                                   ; mov ds,ax
   842                                   ; mov di,57600
   843                                   ; mov si,57602
   844                                   ; mov cx,3198
   845                                   ; rep movsb
   846                                   ; pop ds
   847                                   ; popa
   848                                   ; ret
   849                                  
   850                                  ; PrintStartScreen:
   851                                   ; call upper_part  
   852                                   ; call medium_part
   853                                   ; call lower_part
   854                                   ; call bird_body
   855                                   ; call ground
   856                                   ; ret
   857                                  
   858                                  ; anime:
   859                                  	; call sscore
   860                                  
   861                                  ; main_loop:
   862                                  	; call delay
   863                                  	; call delay
   864                                      ; call HandleKeyPress 
   865                                  	; call collision
   866                                  	; cmp word[collision_detected],1
   867                                  	; je Collider
   868                                  	; mov word[collision_detected],0
   869                                  ; continue_loop:
   870                                      ; push pipesY ; y-coordinate address of pipe
   871                                      ; push pipesX ; x-coordinate address of pipe    
   872                                      ; call movePipe
   873                                  
   874                                      ; push pipesY+2 ; y-coordinate address of pipe
   875                                      ; push pipesX+2 ; x-coordinate address of pipe
   876                                      ; call movePipe
   877                                      ; push 1
   878                                      ; push word [pipesY] ; x-coordinate of pipe
   879                                      ; push word [pipesX] ; y-coordinate of pipe
   880                                      ; call defDrawPipe
   881                                      ; push 1
   882                                      ; push word [pipesY+2] ; x-coordinate of pipe
   883                                      ; push word [pipesX+2] ; y-coordinate of pipe
   884                                      ; call defDrawPipe
   885                                      ; push 0
   886                                      ; push word [leftOverPipeY]
   887                                      ; push 0
   888                                      ; call defDrawPipe
   889                                  	; call ground_mover
   890                                  		; ;call music
   891                                  ; jmp main_loop ; Repeat the main loop
   892                                  	; ret
   893                                  ; ; sound:
   894                                  ; ; pusha 
   895                                      ; ; infinite_sound_loop:
   896                                          ; ; ; Set up sound for the current note
   897                                          ; ; mov al, 182
   898                                          ; ; out 43h, al
   899                                          ; ; mov bx, 1193180
   900                                          ; ; div bx
   901                                          ; ; out 42h, al
   902                                          ; ; mov al, ah
   903                                          ; ; out 42h, al
   904                                          ; ; in al, 61h
   905                                          ; ; or al, 00000011b
   906                                          ; ; out 61h, al
   907                                  
   908                                          ; ; ; Delay for a duration to keep the sound playing
   909                                          ; ; mov bx, 3
   910                                      ; ; delay_loop1:
   911                                          ; ; mov cx, 65535
   912                                      ; ; delay_loop2:
   913                                          ; ; dec cx
   914                                          ; ; jne delay_loop2
   915                                          ; ; dec bx
   916                                          ; ; jne delay_loop1
   917                                  
   918                                          ; ; ; Turn off sound briefly (optional, for a pause effect)
   919                                          ; ; in al, 61h
   920                                          ; ; and al, 11111100b
   921                                          ; ; out 61h, al
   922                                  
   923                                          ; ; ; Loop back to play sound continuously
   924                                          ; ; jmp infinite_sound_loop
   925                                      ; ; popa
   926                                      ; ; ret
   927                                  ; sound:
   928                                      ; pusha                       ; Save all general-purpose registers
   929                                      ; push ds                     ; Save DS
   930                                      ; push es                     ; Save ES
   931                                      ; push ss                     ; Save SS
   932                                  
   933                                      ; mov ax, ds                  ; Preserve original DS value
   934                                      ; push ax
   935                                  
   936                                      ; ; Set up DS and ES for the routine
   937                                      ; mov ax, 0x40                ; BIOS data segment
   938                                      ; mov ds, ax                  ; Use BIOS data segment
   939                                      ; mov ax, 0xB800              ; Video memory segment
   940                                      ; mov es, ax                  ; Use ES for potential screen updates (if needed)
   941                                  
   942                                  ; infinite_sound_loop:
   943                                      ; ; Set up sound for the current note
   944                                      ; mov al, 182                 ; Command to set frequency mode
   945                                      ; out 43h, al
   946                                      ; mov bx, 1193180             ; Base frequency of 1.19318 MHz
   947                                      ; div bx                      ; Calculate divisor for desired frequency
   948                                      ; out 42h, al                 ; Low byte of divisor to timer
   949                                      ; mov al, ah
   950                                      ; out 42h, al                 ; High byte of divisor to timer
   951                                  
   952                                      ; ; Enable the speaker
   953                                      ; in al, 61h                  ; Read speaker control register
   954                                      ; or al, 00000011b            ; Enable speaker
   955                                      ; out 61h, al
   956                                  
   957                                      ; ; Optional delay or loop (minimal)
   958                                      ; nop                         ; Use NOP or a small delay instead of an infinite loop
   959                                      ; nop
   960                                  
   961                                      ; ; Disable the speaker
   962                                      ; in al, 61h
   963                                      ; and al, 11111100b           ; Disable speaker
   964                                      ; out 61h, al
   965                                  
   966                                      ; ; Exit condition (optional, for testing)
   967                                      ; ; Uncomment the following lines to exit the loop after one iteration:
   968                                      ; ; mov ax, 1
   969                                      ; ; cmp ax, 1
   970                                      ; ; je sound_exit
   971                                  
   972                                      ; ; Continue sound loop
   973                                      ; jmp infinite_sound_loop
   974                                  
   975                                  ; sound_exit:
   976                                      ; ; Restore original segment registers and general-purpose registers
   977                                      ; pop ax                      ; Restore original DS value
   978                                      ; mov ds, ax                  ; Restore DS
   979                                      ; pop ss                      ; Restore SS
   980                                      ; pop es                      ; Restore ES
   981                                      ; pop ds                      ; Restore DS
   982                                      ; popa                        ; Restore all general-purpose registers
   983                                      ; ret                         ; Return to caller
   984                                  
   985                                  
   986                                  
   987                                  ; prrint:
   988                                  ; inc word [score]
   989                                  ; call sound
   990                                  ; jmp prrint
   991                                  ; start:
   992                                  
   993                                   ; call DisplayIntroduction 
   994                                   ; mov ah,0
   995                                   ; int 16h
   996                                   ; cmp ah,0x01
   997                                   ; je exit_game
   998                                   ; call PrintStartScreen 
   999                                       ; xor ax, ax
  1000                                       ; mov es, ax
  1001                                       ; cli
  1002                                       ; mov word [es:8*4], timer
  1003                                       ; mov [es:8*4+2], cs
  1004                                       ; sti
  1005                                  
  1006                                  ; ll1:
  1007                                       ; mov word [pcb+10+4], sound         ; Game logic thread
  1008                                       ; mov [pcb+10+6], cs
  1009                                       ; mov word [pcb+10+8], 0x0200    
  1010                                       ; mov word [pcb+20+4], anime  ; Music thread
  1011                                       ; mov [pcb+20+6], cs
  1012                                       ; mov word [pcb+20+8], 0x0200         ; Flags
  1013                                       ; mov word [current], 0               ; Start with the first task
  1014                                  	 ; jmp ll1
  1015                                  ; ;	jmp $
  1016                                  
  1017                                    ; ; call anime
  1018                                   ; mov ax, 0x4C00
  1019                                  ; int 0x21
  1020                                  ; ;pcb: times 20 dw 0
  1021                                      ; timer:
  1022                                  	; push cs 
  1023                                  ; pop ds
  1024                                    ; push ax
  1025                                   ; push bx
  1026                                   ; mov bl, [cs:current] ; read index of current task ... bl
  1027                                   ; mov ax, 10 ; space used by
  1028                                   ; mul bl ; multiply to get
  1029                                   ; mov bx, ax ; load start of
  1030                                   ; pop ax ; read origina
  1031                                  
  1032                                   ; mov [cs:pcb+bx+2], ax ; space for current task's BX
  1033                                   ; pop ax ; read original
  1034                                   ; mov [cs:pcb+bx+0], ax ; space for current task's AX
  1035                                   ; pop ax ; read original
  1036                                   ; mov [cs:pcb+bx+4], ax ; space for current task
  1037                                   ; pop ax ; read original
  1038                                   ; mov [cs:pcb+bx+6], ax ; space for current task
  1039                                   ; pop ax ; read original
  1040                                   ; mov [cs:pcb+bx+8], ax ; space for current task
  1041                                   ; inc byte [cs:current] ; update current task index...1
  1042                                   ; cmp byte [cs:current], 3; is task index out of range
  1043                                   ; jne skipreset ; no, proceed
  1044                                   ; mov byte [cs:current], 0 ; yes, reset to task 0
  1045                                   ; skipreset: 
  1046                                   ; mov bl, [cs:current] ; read index of current task
  1047                                   ; mov ax, 10 ; space used by
  1048                                   ; mul bl ; multiply to get
  1049                                   ; mov bx, ax ; load start of
  1050                                   ; mov al, 0x20
  1051                                   ; out 0x20, al ; send EOI to PIC
  1052                                   ; push word [cs:pcb+bx+8] ; flags of new task...
  1053                                   ; push word [cs:pcb+bx+6] ; cs of new task ...
  1054                                   ; push word [cs:pcb+bx+4] ; ip of new task...
  1055                                   ; mov ax, [cs:pcb+bx+0] ; ax of new task...pcb+10+0
  1056                                   ; mov bx, [cs:pcb+bx+2] ; bx of new task...pcb+10+2
  1057                                   ; iret ; return to new
  1058                                  
  1059                                  
  1060                                  
  1061                                  
  1062                                  
  1063                                  ; %imacro note 2
  1064                                  ; %ifidni %1,C
  1065                                   ; db (%2)*12 + 0
  1066                                  ; %elifidni %1,C#
  1067                                   ; db (%2)*12 + 1
  1068                                  ; %elifidni %1,D
  1069                                   ; db (%2)*12 + 2
  1070                                  ; %elifidni %1,D#
  1071                                   ; db (%2)*12 + 3
  1072                                  ; %elifidni %1,E
  1073                                   ; db (%2)*12 + 4
  1074                                  ; %elifidni %1,F
  1075                                   ; db (%2)*12 + 5
  1076                                  ; %elifidni %1,F#
  1077                                   ; db (%2)*12 + 6
  1078                                  ; %elifidni %1,G
  1079                                   ; db (%2)*12 + 7
  1080                                  ; %elifidni %1,G#
  1081                                   ; db (%2)*12 + 8
  1082                                  ; %elifidni %1,A
  1083                                   ; db (%2)*12 + 9
  1084                                  ; %elifidni %1,A#
  1085                                   ; db (%2)*12 + 10
  1086                                  ; %elifidni %1,H
  1087                                   ; db (%2)*12 + 11
  1088                                  ; %else
  1089                                   ; %error Invalid use of note macro.
  1090                                  ; %endif
  1091                                  ; %endmacro
  1092                                  
  1093                                  
  1094                                  
  1095                                  [org 0x0100]
  1096 00000000 B81300                   mov ax, 0x0013 
  1097 00000003 CD10                     int 0x10 
  1098 00000005 B800A0                   mov ax, 0xA000 
  1099 00000008 8EC0                     mov es, ax 
  1100 0000000A E9A907                       jmp start
  1101                                  
  1102 0000000D 457869743F2028792F-     exit_msg: db 'Exit? (y/n)', 0  ;
  1102 00000016 6E2900             
  1103 00000019 47616D6520456E6465-     game_ended_msg: db 'Game Ended. Press Key', 0
  1103 00000022 642E20507265737320-
  1103 0000002B 4B657900           
  1104 0000002F 0000                    a_keeper: dw 0
  1105 00000031 0000                    rect_mov_count: dw 0
  1106 00000033 020A0C1C22              green_shades db 2, 10, 12, 28, 34 
  1107 00000038 0000                    upperPillarHeight dw 0 
  1108 0000003A 0000                    lowerPillarHeight dw 0 
  1109 0000003C 0000                    bird_bottom_corner: dw 0
  1110 0000003E 0000                    bird_bottom_corner_end: dw 0
  1111 00000040 0000                    bird_top_corner: dw 0
  1112 00000042 CC79                    bird_pos: dw 31180
  1113 00000044 3F01CB01                pipesX: dw 319, 459
  1114 00000048 14001400                pipesY: dw 20 , 20
  1115 0000004C 0000                    leftOverPipeWidth: dw 0
  1116 0000004E 0000                    leftOverPipeY: dw 0
  1117 00000050 0000                    boolDrawBottomPipe: dw 0
  1118 00000052 0000                    intBottomPipeStart: dw 0
  1119 00000054 0000                    intPipeEndX: dw 0
  1120 00000056 0000                    collision_detected: dw 0
  1121 00000058 0000                    boolAdjusted: dw 0
  1122 0000005A 0000                    boolFirstPipe: dw 0
  1123 0000005C 0000                    rect_pos1: dw 0
  1124 0000005E 0000                    rect_pos2: dw 0
  1125 00000060 0000                    rect_pos_down: dw 0
  1126 00000062 0000                    rect_pos_down1: dw 0
  1127 00000064 0000                    rect_pos_down2: dw 0
  1128 00000066 0000                    isAnimating: dw 0
  1129 00000068 44                      BirdDirection: db 'D'
  1130 00000069 0000                    bird_position_holder: dw 0
  1131 0000006B 0000                    score :dw 0
  1132 0000006D 0000                    tickcount: dw 0
  1133 0000006F 00000000                old_timer:dw 0,0
  1134 00000073 4006                    delay_threshold dw 1600   
  1135 00000075 00                      timer_hooked db 0    
  1136 00000076 00                      is_flapping :db 0  
  1137 00000077 0000                    upper_pillar_helper: dw 0
  1138 00000079 417373656D626C6572-     GameTitle: db 'Assembler Aviator', 0
  1138 00000082 2041766961746F7200 
  1139 0000008B 526F6C6C204E756D62-     RollNumbers: db 'Roll Numbers: 23L-0815, 23L-0576', 0
  1139 00000094 6572733A2032334C2D-
  1139 0000009D 303831352C2032334C-
  1139 000000A6 2D3035373600       
  1140 000000AC 446576656C6F706564-     Names: db 'Developed by: Ali Jafar,Tayyab Khalil', 0
  1140 000000B5 2062793A20416C6920-
  1140 000000BE 4A616661722C546179-
  1140 000000C7 796162204B68616C69-
  1140 000000D0 6C00               
  1141 000000D2 53656D65737465723A-     Semester: db 'Semester: Fall 2024', 0
  1141 000000DB 2046616C6C20323032-
  1141 000000E4 3400               
  1142 000000E6 507265737320555020-     Instructions: db 'Press UP ARROW to move up,ESC to quit', 0
  1142 000000EF 4152524F5720746F20-
  1142 000000F8 6D6F76652075702C45-
  1142 00000101 534320746F20717569-
  1142 0000010A 7400               
  1143 0000010C 496620455343206973-     Instructions1: db 'If ESC is pressed, game stops', 0
  1143 00000115 20707265737365642C-
  1143 0000011E 2067616D652073746F-
  1143 00000127 707300             
  1144 0000012A 496620792069732070-     Instructions2: db 'If y is pressed, it exits', 0
  1144 00000133 7265737365642C2069-
  1144 0000013C 7420657869747300   
  1145 00000144 656C73652069742063-     Instructions3: db 'else it continues from where it stops', 0
  1145 0000014D 6F6E74696E75657320-
  1145 00000156 66726F6D2077686572-
  1145 0000015F 652069742073746F70-
  1145 00000168 7300               
  1146 0000016A 507265737320616E79-     StartMessage: db 'Press any key to start...', 0
  1146 00000173 206B657920746F2073-
  1146 0000017C 746172742E2E2E00   
  1147 00000184 53636F72653A2000        cscore: db 'Score: ' ,0
  1148                                  ; notes: dw 440, 494, 523, 587, 659, 698, 784  ; Frequencies for A4, B4, C5, etc.
  1149                                  ; durations: dw 300, 300, 400, 300, 500, 300, 600 ; Durations in milliseconds
  1150                                  ; note_count: dw 7                              ; Number of notes
  1151 0000018C B41F2F15970A            notes: dw 0x1FB4, 0x152F, 0x0A97  ; Frequencies for D3, A3, and A4
  1152 00000192 F401F401F401            durations: dw 500, 500, 500         ; Durations in milliseconds
  1153 00000198 0300                    note_count: dw 3                    ; Number of notes
  1154 0000019A 0000                    current_note: dw 0                  ; Index of the current note
  1155                                  ; pcb: times *2 dw 0 ; Allocate space for 2 tasks (game + music)
  1156                                  
  1157 0000019C 000000000000000000-     pcb: dw 0, 0, 0, 0, 0 ; task0 regs[cs:pcb + 0]
  1157 000001A5 00                 
  1158 000001A6 000000000000000000-     dw 0, 0, 0, 0, 0 ;
  1158 000001AF 00                 
  1159 000001B0 00                      current: db 0
  1160                                  background:
  1161 000001B1 0E                      push cs 
  1162 000001B2 1F                      pop ds
  1163 000001B3 06                      push es
  1164 000001B4 31FF                        xor di, di
  1165 000001B6 B900FA                      mov cx, 320 * 200
  1166 000001B9 B002                        mov al, 2
  1167 000001BB F3AA                        rep stosb
  1168 000001BD 07                      	pop es
  1169 000001BE C3                          ret
  1170                                  DisplayIntroduction:
  1171                                  
  1172 000001BF 0E                      push cs 
  1173 000001C0 1F                      pop ds
  1174 000001C1 06                      push es
  1175 000001C2 E8ECFF                      call background
  1176 000001C5 B607                        mov dh, 7
  1177 000001C7 B203                        mov dl, 3
  1178 000001C9 BE[7900]                    mov si, GameTitle
  1179 000001CC E82A00                      call PrintStringAtPosition
  1180 000001CF B609                        mov dh, 9
  1181 000001D1 BE[8B00]                    mov si, RollNumbers
  1182 000001D4 E82200                      call PrintStringAtPosition
  1183                                  
  1184 000001D7 B60B                        mov dh, 11
  1185 000001D9 BE[AC00]                    mov si, Names
  1186 000001DC E81A00                      call PrintStringAtPosition
  1187                                  
  1188 000001DF B60D                        mov dh, 13
  1189 000001E1 BE[D200]                    mov si, Semester
  1190 000001E4 E81200                      call PrintStringAtPosition
  1191                                  
  1192 000001E7 B60F                        mov dh, 15
  1193 000001E9 BE[E600]                    mov si, Instructions
  1194 000001EC E80A00                      call PrintStringAtPosition
  1195                                  
  1196 000001EF B611                        mov dh, 17
  1197 000001F1 BE[6A01]                    mov si, StartMessage
  1198 000001F4 E80200                      call PrintStringAtPosition
  1199 000001F7 07                      	pop es
  1200 000001F8 C3                          ret
  1201                                  
  1202                                  PrintStringAtPosition:
  1203                                  
  1204 000001F9 0E                      push cs 
  1205 000001FA 1F                      pop ds
  1206 000001FB 06                      push es
  1207 000001FC 60                          pusha
  1208 000001FD B402                        mov ah, 02h
  1209 000001FF CD10                        int 10h
  1210 00000201 B40E                        mov ah, 0Eh
  1211 00000203 B700                        mov bh, 0
  1212 00000205 B30F                        mov bl, 15
  1213                                  
  1214                                  print_position_loop:
  1215 00000207 AC                          lodsb
  1216 00000208 3C00                        cmp al, 0
  1217 0000020A 7404                        je done_position_print
  1218 0000020C CD10                        int 10h
  1219 0000020E EBF7                        jmp print_position_loop
  1220                                  
  1221                                  done_position_print:
  1222 00000210 61                          popa
  1223 00000211 07                      	pop es
  1224 00000212 C3                          ret
  1225                                  
  1226                                  collision:
  1227 00000213 FA                      cli
  1228 00000214 0E                      push cs 
  1229 00000215 1F                      pop ds
  1230 00000216 06                      push es
  1231 00000217 60                      pusha
  1232 00000218 813E[4200]9600           cmp word[bird_pos],150
  1233 0000021E 7708                     ja next_check
  1234 00000220 C706[5600]0100           mov word[collision_detected],1
  1235 00000226 EB14                     jmp get_out
  1236                                  next_check:
  1237 00000228 8B3E[3E00]              mov di, word[bird_bottom_corner_end]
  1238 0000022C 81C74001                add di,320
  1239 00000230 81FF00E1                 cmp di,57600
  1240 00000234 7206                     jb get_out
  1241 00000236 C706[5600]0100           mov word[collision_detected],1
  1242                                  get_out: 
  1243 0000023C 61                      popa
  1244 0000023D 07                      pop es
  1245 0000023E FB                      sti
  1246 0000023F C3                      ret
  1247                                  
  1248                                  
  1249                                  ShowExitConfirmation:
  1250 00000240 FA                      cli
  1251 00000241 0E                      push cs 
  1252 00000242 1F                      pop ds
  1253 00000243 B402                        mov ah, 02h                
  1254 00000245 B700                        mov bh, 0                   
  1255 00000247 B618                        mov dh, 24                  ; Row (adjust as needed)
  1256 00000249 B20F                        mov dl, 15                  ; Column (adjust as needed)
  1257 0000024B CD10                        int 10h
  1258                                  
  1259 0000024D B40E                        mov ah, 0Eh                 ; BIOS teletype function
  1260 0000024F B700                        mov bh, 0                   ; Page number
  1261 00000251 B302                        mov bl, 2                  ; White text
  1262 00000253 BE[0D00]                    mov si, exit_msg            ; Pointer to message
  1263                                  
  1264                                  print_message_text:
  1265 00000256 AC                          lodsb                      
  1266 00000257 3C00                        cmp al, 0
  1267 00000259 7404                        je wait_for_key1
  1268 0000025B CD10                        int 10h                   
  1269 0000025D EBF7                        jmp print_message_text
  1270                                  
  1271                                  wait_for_key1:
  1272 0000025F 0E                      push cs 
  1273 00000260 1F                         pop ds
  1274 00000261 B400                        mov ah, 0
  1275 00000263 CD16                        int 16h                     ;Get key in AL
  1276 00000265 3C79                        cmp al, 'y'                 ;Check if 'y' or 'Y'
  1277 00000267 741D                        je exit_game
  1278 00000269 3C59                        cmp al, 'Y'
  1279 0000026B 7419                        je exit_game
  1280                                  end_erase:
  1281 0000026D BB0A00                  	mov bx,10
  1282 00000270 BFF8ED                  	mov di,60920
  1283                                  exit_loop:
  1284 00000273 B95800                  	mov cx,88
  1285 00000276 B006                    	mov al,6
  1286 00000278 F3AA                    	rep stosb
  1287 0000027A 4B                      	dec bx
  1288 0000027B 81C7E800                	add di,232
  1289 0000027F 83FB00                  	cmp bx,0
  1290 00000282 75EF                    jne exit_loop
  1291 00000284 FB                      	sti
  1292 00000285 C3                          ret
  1293                                  
  1294                                  exit_game:
  1295 00000286 FA                      	cli
  1296 00000287 0E                      	push cs 
  1297 00000288 1F                      	pop ds
  1298 00000289 B402                        mov ah, 02h
  1299 0000028B B700                        mov bh, 0
  1300 0000028D B60C                        mov dh, 12
  1301 0000028F B20F                        mov dl, 15
  1302 00000291 CD10                        int 10h
  1303                                  
  1304 00000293 B40E                        mov ah, 0Eh
  1305 00000295 BE[1900]                    mov si, game_ended_msg
  1306                                  
  1307                                  print_loop:
  1308 00000298 AC                          lodsb
  1309 00000299 3C00                        cmp al, 0
  1310 0000029B 7404                        je wait_for_key
  1311 0000029D CD10                        int 10h
  1312 0000029F EBF7                        jmp print_loop
  1313                                  wait_for_key:
  1314 000002A1 B400                        mov ah, 0
  1315 000002A3 CD16                        int 16h
  1316                                  
  1317 000002A5 B80300                      mov ax, 0x0003
  1318 000002A8 CD10                        int 0x10
  1319                                  
  1320 000002AA B8004C                      mov ax, 0x4C00
  1321 000002AD CD21                        int 0x21
  1322                                  
  1323                                  upper_part:
  1324 000002AF 0E                      push cs 
  1325 000002B0 1F                      pop ds
  1326 000002B1 06                      push es
  1327 000002B2 31FF                        xor di, di
  1328 000002B4 B035                        mov al, 35h
  1329 000002B6 B9004B                      mov cx, 320 * 60
  1330 000002B9 F3AA                        rep stosb
  1331 000002BB 07                      	pop es
  1332 000002BC C3                          ret
  1333                                  
  1334                                  medium_part:
  1335 000002BD 0E                      push cs 
  1336 000002BE 1F                      pop ds
  1337 000002BF 06                      push es
  1338 000002C0 BF004B                      mov di, 320 * 60
  1339 000002C3 B035                        mov al, 35h
  1340 000002C5 B96054                      mov cx, 360 * 60
  1341 000002C8 F3AA                        rep stosb
  1342 000002CA 07                      	pop es
  1343 000002CB C3                          ret
  1344                                  
  1345                                  lower_part:
  1346 000002CC 0E                      push cs 
  1347 000002CD 1F                      pop ds
  1348 000002CE 06                      push es
  1349 000002CF BF0096                      mov di, 320 * 120
  1350 000002D2 B035                        mov al, 35h
  1351 000002D4 B90064                      mov cx, 320 * 80
  1352 000002D7 F3AA                        rep stosb
  1353 000002D9 07                      	pop es
  1354 000002DA C3                          ret
  1355                                  
  1356                                  sscore:
  1357 000002DB 0E                      push cs 
  1358 000002DC 1F                      pop ds
  1359 000002DD 06                      push es
  1360 000002DE 60                          pusha
  1361 000002DF BE[8401]                    mov si, cscore
  1362 000002E2 B402                        mov ah, 02h
  1363 000002E4 B700                        mov bh, 0
  1364 000002E6 B618                        mov dh, 24
  1365 000002E8 B201                        mov dl, 1
  1366 000002EA CD10                        int 10h
  1367 000002EC B40E                        mov ah, 0Eh
  1368 000002EE B700                        mov bh, 0
  1369 000002F0 B30F                        mov bl, 15
  1370                                  
  1371                                  print_scoer:
  1372 000002F2 AC                          lodsb
  1373 000002F3 3C00                        cmp al, 0
  1374 000002F5 7404                        je done_
  1375 000002F7 CD10                        int 10h
  1376 000002F9 EBF7                        jmp print_scoer
  1377                                  
  1378                                  done_:
  1379 000002FB 61                          popa
  1380 000002FC 07                      	pop es
  1381 000002FD C3                          ret
  1382                                  
  1383                                  cal_dig:
  1384                                  
  1385 000002FE E8DAFF                      call sscore
  1386 00000301 0E                      	push cs 
  1387 00000302 1F                      pop ds
  1388 00000303 06                      push es
  1389 00000304 A1[6B00]                    mov ax, [score]
  1390 00000307 3DE803                  	cmp ax,1000
  1391 0000030A 7402                    	je movv
  1392 0000030C 7503                    	jne movv1
  1393                                  	movv:
  1394 0000030E B80000                  	mov ax,0
  1395                                  	movv1:
  1396 00000311 31C9                        xor cx, cx
  1397 00000313 BB0A00                      mov bx, 10
  1398                                  store_digits:
  1399 00000316 0E                      push cs 
  1400 00000317 1F                      pop ds
  1401 00000318 31D2                        xor dx, dx
  1402 0000031A F7F3                        div bx
  1403 0000031C 52                          push dx
  1404 0000031D 41                          inc cx
  1405 0000031E 83F800                      cmp ax, 0
  1406 00000321 75F3                        jnz store_digits
  1407                                  
  1408                                  draw_score:
  1409 00000323 0E                      push cs 
  1410 00000324 1F                      pop ds
  1411 00000325 B402                        mov ah, 02h
  1412 00000327 B700                        mov bh, 0
  1413 00000329 B618                        mov dh, 24
  1414 0000032B B208                        mov dl, 8
  1415 0000032D CD10                        int 10h
  1416                                  
  1417                                  print_digits:
  1418                                  
  1419 0000032F 5A                          pop dx
  1420 00000330 80C230                      add dl, 0x30
  1421 00000333 88D0                        mov al, dl
  1422 00000335 B40E                        mov ah, 0Eh
  1423 00000337 B700                        mov bh, 0
  1424 00000339 CD10                        int 10h
  1425 0000033B FEC2                        inc dl
  1426 0000033D E2F0                        loop print_digits
  1427 0000033F 07                      	pop es
  1428 00000340 C3                          ret    
  1429                                  
  1430                                  
  1431                                  bird_body:
  1432 00000341 0E                      push cs 
  1433 00000342 1F                      pop ds
  1434 00000343 06                      push es
  1435 00000344 60                          pusha
  1436 00000345 BB0C00                      mov bx,12 
  1437 00000348 8B36[4200]                  mov si, [bird_pos] 
  1438 0000034C 83C612                      add si,18
  1439 0000034F 8936[4000]                  mov word[bird_top_corner],si
  1440 00000353 83EE12                      sub si,18
  1441                                  body:
  1442 00000356 89F7                        mov di, si
  1443 00000358 B00E                        mov al, 14 
  1444 0000035A B91200                      mov cx, 18 
  1445 0000035D F3AA                        rep stosb
  1446 0000035F 83EB01                      sub bx,1
  1447 00000362 81C64001                    add si, 320
  1448 00000366 83FB00                      cmp bx, 0 
  1449 00000369 75EB                        jnz body
  1450 0000036B 57                      	push di
  1451 0000036C 8B3E[4200]              	mov di,[bird_pos]
  1452 00000370 81C74806                	add di,1608
  1453 00000374 B0CC                    	mov al,  0xCC
  1454 00000376 AA                      	stosb
  1455 00000377 47                      	inc di
  1456 00000378 AA                      	stosb
  1457 00000379 47                      	inc di
  1458 0000037A AA                      	stosb
  1459 0000037B 5F                      	pop di
  1460 0000037C 81EE4001                    sub si,320
  1461 00000380 8936[3C00]                  mov word[bird_bottom_corner],si
  1462 00000384 83C612                      add si,18
  1463 00000387 8936[3E00]                  mov word[bird_bottom_corner_end],si
  1464 0000038B 83EE12                      sub si,18
  1465 0000038E 8936[6900]                  mov [bird_position_holder],si
  1466 00000392 61                          popa
  1467 00000393 07                      pop es	
  1468 00000394 C3                          ret 
  1469                                  
  1470                                  defDrawPipe:
  1471 00000395 55                          push bp
  1472 00000396 89E5                        mov bp, sp
  1473 00000398 60                          pusha
  1474 00000399 8B4E04                      mov cx, [bp+4]
  1475 0000039C BA0000                      mov dx, 0
  1476 0000039F B40C                        mov ah, 0ch
  1477 000003A1 8B5E06                      mov bx, [bp+6]
  1478 000003A4 891E[5200]                  mov word [intBottomPipeStart], bx
  1479 000003A8 8306[5200]37                add word [intBottomPipeStart], 55
  1480 000003AD C706[5000]0000              mov word [boolDrawBottomPipe], 0
  1481 000003B3 890E[5400]                  mov word [intPipeEndX], cx
  1482 000003B7 8306[5400]28                add word [intPipeEndX], 40
  1483 000003BC 837E0801                    cmp word [bp+8], 1
  1484 000003C0 741F                        je drawTopPipe
  1485 000003C2 833E[4C00]00                cmp word [leftOverPipeWidth], 0
  1486 000003C7 7647                        jbe endDrawPipe
  1487 000003C9 8B0E[4C00]                  mov cx, [leftOverPipeWidth]
  1488 000003CD 890E[5400]                  mov word [intPipeEndX], cx
  1489 000003D1 B92800                      mov cx, 40
  1490 000003D4 2B0E[4C00]                  sub cx, [leftOverPipeWidth]
  1491 000003D8 01CB                        add bx, cx
  1492 000003DA B90000                      mov cx, 0
  1493 000003DD FF0E[4C00]                  dec word [leftOverPipeWidth]
  1494                                  drawTopPipe:
  1495 000003E1 B002                        mov al,2
  1496                                  colorSelected:
  1497 000003E3 81F94001                    cmp cx, 320
  1498 000003E7 7327                        jae endDrawPipe
  1499 000003E9 83F900                      cmp cx, 0
  1500 000003EC 7222                        jb endDrawPipe
  1501 000003EE CD10                        int 10h
  1502                                  skipPipe:
  1503 000003F0 42                          inc dx
  1504 000003F1 3B5606                      cmp dx, [bp+6]
  1505 000003F4 76EB                        jbe drawTopPipe
  1506 000003F6 3B16[5200]                  cmp dx, [intBottomPipeStart]
  1507 000003FA 7703                        ja notSkip
  1508 000003FC 83C236                      add dx, 54
  1509                                  notSkip:
  1510 000003FF 81FAB400                    cmp dx, 180
  1511 00000403 72DC                        jb drawTopPipe
  1512 00000405 41                          inc cx
  1513 00000406 BA0000                      mov dx, 0
  1514 00000409 43                          inc bx
  1515 0000040A 3B0E[5400]                  cmp cx, [intPipeEndX]
  1516 0000040E 72D1                        jb drawTopPipe
  1517                                  endDrawPipe:
  1518 00000410 61                          popa 
  1519 00000411 5D                          pop bp
  1520                                  	;pop es
  1521 00000412 C20600                      ret 6
  1522                                  movePipe:
  1523 00000415 0E                      push cs 
  1524 00000416 1F                      pop ds
  1525 00000417 55                          push bp
  1526 00000418 89E5                        mov bp, sp
  1527 0000041A 60                          pusha
  1528 0000041B FF06[3100]                  inc word[rect_mov_count]
  1529 0000041F 813E[3100]4501              cmp word[rect_mov_count],325
  1530 00000425 7402                        je incc
  1531 00000427 750D                        jne noincc
  1532                                  incc:
  1533 00000429 C706[3100]0000              mov word[rect_mov_count],0
  1534 0000042F FF06[6B00]                  inc word[score]
  1535 00000433 E8C8FE                      call cal_dig
  1536                                  noincc:
  1537 00000436 8B5E04                      mov bx, [bp+4]
  1538 00000439 FF0F                        dec word [bx]
  1539 0000043B 8B0F                        mov cx, [bx]
  1540 0000043D 83C129                      add cx,41
  1541 00000440 C706[5800]0000              mov word [boolAdjusted], 0
  1542 00000446 81F94001                    cmp cx, 320
  1543 0000044A 7D02                        jge adjustX
  1544 0000044C EB0A                        jmp continueDrawing
  1545                                  adjustX:
  1546 0000044E 81E94001                    sub word cx, 320
  1547 00000452 C706[5800]0100              mov word [boolAdjusted], 1
  1548                                  continueDrawing:
  1549 00000458 BA0000                      mov dx,0
  1550 0000045B B035                        mov al,35h
  1551 0000045D B40C                        mov ah,0ch
  1552 0000045F 8B7606                      mov si,[bp+6]
  1553                                  drawLastColumnSky:
  1554 00000462 CD10                        int 10h
  1555 00000464 3E3B14                      cmp dx, [ds:si]
  1556 00000467 7516                        jne continueDrawingSky
  1557 00000469 833E[5800]00                cmp word [boolAdjusted], 0
  1558 0000046E 7405                        je notCheckForadjusted
  1559 00000470 83F929                      cmp cx,41
  1560 00000473 7711                        ja skipSkyColumn
  1561                                  notCheckForadjusted:
  1562 00000475 83F929                      cmp cx,41
  1563 00000478 7205                        jb continueDrawingSky
  1564 0000047A 83C237                      add dx, 55
  1565 0000047D EBE3                        jmp drawLastColumnSky
  1566                                  continueDrawingSky:
  1567 0000047F 42                          inc dx
  1568 00000480 81FAB400                    cmp dx,180
  1569 00000484 72DC                        jb drawLastColumnSky
  1570                                  skipSkyColumn:
  1571 00000486 83E929                      sub cx,41
  1572 00000489 83F900                      cmp cx,0
  1573 0000048C 7524                        jne endMovePipe
  1574 0000048E 833E[4400]00                cmp word [pipesX], 0
  1575 00000493 7506                        jne endMovePipeContinue
  1576 00000495 C706[5A00]0100              mov word [boolFirstPipe], 1
  1577                                  endMovePipeContinue:
  1578 0000049B C706[4C00]2800              mov word [leftOverPipeWidth], 40
  1579 000004A1 3E8B0C                      mov cx, [ds:si]
  1580 000004A4 890E[4E00]                  mov word [leftOverPipeY], cx
  1581 000004A8 C7074001                    mov word [bx], 320
  1582 000004AC FF7606                      push word [bp+6]
  1583 000004AF E80500                      call generateRandomNumber
  1584                                  endMovePipe:
  1585 000004B2 61                          popa
  1586 000004B3 5D                          pop bp
  1587 000004B4 C20200                      ret 2
  1588                                  generateRandomNumber:
  1589 000004B7 0E                      push cs 
  1590 000004B8 1F                      pop ds
  1591 000004B9 55                          push bp
  1592 000004BA 89E5                        mov bp, sp
  1593 000004BC 60                          pusha
  1594 000004BD B400                        mov ah,0
  1595 000004BF CD1A                        int 1ah
  1596 000004C1 89D0                        mov ax,dx
  1597 000004C3 BB3C00                      mov bx,60
  1598 000004C6 BA0000                      mov dx,0
  1599 000004C9 F7F3                        div bx
  1600 000004CB 8B5E04                      mov bx, [bp+4]
  1601 000004CE 8917                        mov word [bx], dx
  1602 000004D0 830714                      add word [bx], 20
  1603 000004D3 61                          popa
  1604 000004D4 5D                          pop bp
  1605 000004D5 C20200                      ret 2
  1606                                  
  1607                                  ground:
  1608 000004D8 0E                      push cs 
  1609 000004D9 1F                      pop ds
  1610 000004DA 06                      push es
  1611 000004DB BF00E1                      mov di, 57600
  1612 000004DE B9800C                      mov cx, 320 * 10
  1613 000004E1 BB0100                      mov bx, 1
  1614                                  .draw_gradient:
  1615 000004E4 8A87[3300]                  mov al, [green_shades+bx]
  1616 000004E8 AA                          stosb
  1617 000004E9 43                          inc bx
  1618 000004EA 83FB04                      cmp bx, 4
  1619 000004ED 7503                        jne .continue_gradient
  1620 000004EF BB0100                      mov bx, 1
  1621                                  .continue_gradient:
  1622 000004F2 E2F0                        loop .draw_gradient
  1623 000004F4 BF80ED                      mov di, 60800
  1624 000004F7 B006                        mov al, 6
  1625 000004F9 B9800C                      mov cx, 320 * 10
  1626 000004FC F3AA                        rep stosb
  1627 000004FE 07                      	pop es
  1628 000004FF C3                          ret
  1629                                  
  1630                                  
  1631                                  delay:
  1632 00000500 0E                      push cs 
  1633 00000501 1F                      pop ds
  1634 00000502 60                       pusha
  1635 00000503 B900FA                   mov cx,64000
  1636                                  delay1:
  1637 00000506 E2FE                     loop delay1
  1638 00000508 61                       popa
  1639 00000509 C3                       ret
  1640                                  
  1641                                  
  1642                                  
  1643                                  remover_bird:
  1644 0000050A 0E                      push cs 
  1645 0000050B 1F                      pop ds
  1646 0000050C 60                       pusha
  1647 0000050D 89F7                     mov di,si
  1648 0000050F B035                     mov al,35h
  1649 00000511 B91200                   mov cx,18
  1650 00000514 F3AA                     rep stosb
  1651 00000516 61                       popa
  1652 00000517 C3                       ret
  1653                                  
  1654                                  
  1655                                  
  1656                                  bird_falling:
  1657 00000518 0E                      push cs 
  1658 00000519 1F                      pop ds
  1659 0000051A 60                      pusha
  1660 0000051B B800A0                  mov ax,0xA000
  1661 0000051E 8EC0                    mov es,ax
  1662 00000520 57                      push di
  1663 00000521 8B3E[4000]              mov di,[bird_top_corner]
  1664 00000525 26803D02                cmp byte[es:di],2
  1665 00000529 742B                    je exit_game_1
  1666 0000052B 8B3E[3C00]              mov di,[bird_bottom_corner]
  1667 0000052F 2680BD400102            cmp byte[es:di+320],2
  1668 00000535 741F                    je exit_game_1
  1669 00000537 8B3E[3E00]              mov di,[bird_bottom_corner_end]
  1670 0000053B 2680BD400102            cmp byte[es:di+320],2
  1671 00000541 7413                    je exit_game_1
  1672 00000543 5F                      pop di
  1673 00000544 8B36[4200]               mov si,word[bird_pos]
  1674 00000548 E8BFFF                   call remover_bird
  1675 0000054B 8106[4200]4001           add word[bird_pos],320
  1676 00000551 E8EDFD                   call bird_body
  1677 00000554 EB07                    jmp outr
  1678                                  exit_game_1:
  1679 00000556 C706[5600]0100          mov word[collision_detected],1
  1680 0000055C 5F                      pop di
  1681                                  outr:
  1682 0000055D 61                       popa
  1683 0000055E C3                       ret
  1684                                  
  1685                                  moving_up:
  1686 0000055F 0E                      push cs 
  1687 00000560 1F                      pop ds
  1688 00000561 60                       pusha
  1689 00000562 B800A0                  mov ax,0xA000
  1690 00000565 8EC0                    mov es,ax
  1691 00000567 57                      push di
  1692 00000568 8B3E[4000]              mov di,[bird_top_corner]
  1693 0000056C 2680BDC0FE02            cmp byte[es:di-320],2
  1694 00000572 7429                    je exit_game_2
  1695 00000574 8B3E[3E00]              mov di,[bird_bottom_corner_end]
  1696 00000578 26803D02                cmp byte[es:di],2
  1697 0000057C 741F                    je exit_game_2
  1698 0000057E 8B3E[4200]              mov di,[bird_pos]
  1699 00000582 2680BDC0FE02            cmp byte[es:di-320],2
  1700 00000588 7413                    je exit_game_2
  1701 0000058A 5F                      pop di
  1702                                  
  1703 0000058B 812E[4200]4001           sub word[bird_pos],320
  1704 00000591 8B36[6900]               mov si,[bird_position_holder]
  1705 00000595 E872FF                   call remover_bird
  1706 00000598 E8A6FD                   call bird_body
  1707 0000059B EB07                    jmp outrr
  1708                                  exit_game_2:
  1709 0000059D C706[5600]0100          mov word[collision_detected],1
  1710 000005A3 5F                      pop di
  1711                                  outrr:
  1712 000005A4 61                       popa
  1713 000005A5 C3                       ret
  1714                                  
  1715                                  bird_falling_collide:
  1716 000005A6 0E                      push cs 
  1717 000005A7 1F                      pop ds
  1718 000005A8 60                      pusha
  1719 000005A9 8B36[4200]               mov si,word[bird_pos]
  1720 000005AD E85AFF                   call remover_bird
  1721 000005B0 8106[4200]4001           add word[bird_pos],320
  1722 000005B6 E888FD                   call bird_body
  1723 000005B9 61                       popa
  1724 000005BA C3                       ret
  1725                                  
  1726                                  remover_extra:
  1727 000005BB 0E                      push cs 
  1728 000005BC 1F                      pop ds
  1729 000005BD 60                      pusha
  1730 000005BE 8B3E[4200]               mov di,[bird_pos]
  1731 000005C2 B90C00                  mov cx,12
  1732 000005C5 B035                     mov al,35h
  1733                                  l2:
  1734 000005C7 AA                       stosb
  1735 000005C8 81C73F01                 add di,319
  1736 000005CC E2F9                    loop l2
  1737 000005CE 61                       popa
  1738 000005CF C3                       ret
  1739                                  
  1740                                  
  1741                                  collide_extra:
  1742 000005D0 0E                      push cs 
  1743 000005D1 1F                      pop ds
  1744 000005D2 60                      pusha
  1745                                  l1:
  1746 000005D3 E8E5FF                  call remover_extra
  1747 000005D6 8306[4200]01            add word[bird_pos],1
  1748 000005DB E822FF                  call delay
  1749 000005DE E81FFF                  call delay
  1750 000005E1 E85DFD                  call bird_body
  1751 000005E4 8B3E[3C00]              mov di,[bird_bottom_corner]
  1752 000005E8 2680BD400102            cmp byte[es:di+320],2
  1753 000005EE 74E3                    je l1
  1754 000005F0 61                      popa
  1755 000005F1 C3                      ret
  1756                                  
  1757                                  Collider:
  1758 000005F2 FA                      cli
  1759 000005F3 0E                      push cs 
  1760 000005F4 1F                      pop ds
  1761                                  iteration:
  1762 000005F5 60                      pusha
  1763 000005F6 B800A0                  mov ax,0xA000
  1764 000005F9 8EC0                    mov es,ax
  1765 000005FB 8B3E[3E00]              mov di,[bird_bottom_corner_end]
  1766 000005FF 2680BD3E0102            cmp byte[es:di+318],2
  1767 00000605 741E                    je outrrr
  1768 00000607 8B3E[3C00]              mov di,[bird_bottom_corner]
  1769 0000060B 2680BD400102            cmp byte[es:di+320],2
  1770 00000611 7412                    je outrrr
  1771 00000613 61                      popa
  1772 00000614 FB                      sti
  1773 00000615 E8E8FE                  call delay
  1774 00000618 E88BFF                  call bird_falling_collide
  1775 0000061B 813E[3E00]00E1          cmp word[bird_bottom_corner_end],57600
  1776 00000621 72D2                    jb iteration
  1777 00000623 EB07                    jmp labela
  1778                                  outrrr:
  1779 00000625 E8A8FF                  call collide_extra
  1780 00000628 61                      popa
  1781 00000629 E8C6FF                  call Collider
  1782                                  labela:
  1783 0000062C E8D1FE                  call delay
  1784 0000062F E8CEFE                  call delay
  1785 00000632 E851FC                  call exit_game
  1786 00000635 C3                      ret
  1787                                  
  1788                                  HandleKeyPress:
  1789 00000636 0E                      push cs 
  1790 00000637 1F                      pop ds
  1791 00000638 50                          push ax
  1792 00000639 53                          push bx
  1793 0000063A 51                          push cx
  1794 0000063B 52                          push dx
  1795 0000063C B401                        mov ah, 1          
  1796 0000063E CD16                        int 0x16
  1797 00000640 7442                        jz no_key_pressed  
  1798 00000642 B400                        mov ah, 0          
  1799 00000644 CD16                        int 0x16
  1800 00000646 80FC01                      cmp ah, 0x01          
  1801 00000649 740C                        je exit_game_press
  1802                                  
  1803 0000064B 80FC48                      cmp ah, 0x48          
  1804 0000064E 740C                        je handle_up
  1805                                  
  1806 00000650 80FCC8                      cmp ah, 0xC8          
  1807 00000653 7418                        je handle_release
  1808                                  
  1809 00000655 EB2D                        jmp no_key_pressed    
  1810                                  
  1811                                  exit_game_press:
  1812 00000657 E8E6FB                      call ShowExitConfirmation
  1813 0000065A EB2B                        jmp out_of
  1814                                  
  1815                                  handle_up:
  1816 0000065C C706[7600]0100              mov word [is_flapping], 1  
  1817 00000662 C706[6D00]0000              mov word [tickcount], 0    
  1818 00000668 E8F4FE                      call moving_up             
  1819 0000066B EB1A                        jmp out_of
  1820                                  handle_release:
  1821 0000066D 803E[7500]01                cmp byte [timer_hooked], 1 
  1822 00000672 7413                        je out_of                  
  1823 00000674 C606[7500]01                mov byte [timer_hooked], 1 
  1824 00000679 E81000                      call hook_timer            
  1825 0000067C C706[7600]0000              mov word [is_flapping], 0  
  1826 00000682 EB03                        jmp out_of
  1827                                  no_key_pressed:
  1828 00000684 E891FE                      call bird_falling
  1829                                  out_of:
  1830 00000687 5A                          pop dx
  1831 00000688 59                          pop cx
  1832 00000689 5B                          pop bx
  1833 0000068A 58                          pop ax
  1834 0000068B C3                          ret
  1835                                  
  1836                                  
  1837                                  hook_timer:
  1838 0000068C 0E                      push cs 
  1839 0000068D 1F                      pop ds
  1840 0000068E FA                          cli                        
  1841 0000068F 1E                          push ds
  1842 00000690 31C0                        xor ax, ax
  1843 00000692 8EC0                        mov es, ax
  1844 00000694 26A12000                    mov ax, word [es:8*4]
  1845 00000698 A3[6F00]                    mov word [old_timer], ax
  1846 0000069B 26A12200                    mov ax, word [es:8*4+2]
  1847 0000069F A3[7100]                    mov word [old_timer+2], ax
  1848 000006A2 A1[7300]                    mov ax, [delay_threshold]
  1849 000006A5 26C7062000[B406]            mov word [es:8*4], timr
  1850 000006AC 268C0E2200                  mov word [es:8*4+2], cs
  1851 000006B1 1F                          pop ds
  1852 000006B2 FB                          sti
  1853 000006B3 C3                          ret
  1854                                  
  1855                                  timr:
  1856 000006B4 0E                      push cs 
  1857 000006B5 1F                      pop ds
  1858 000006B6 50                          push ax
  1859 000006B7 53                          push bx
  1860 000006B8 51                          push cx
  1861 000006B9 52                          push dx
  1862 000006BA FF06[6D00]                  inc word [tickcount]
  1863 000006BE 3906[6D00]                  cmp word [tickcount], ax
  1864 000006C2 7511                        jne end_timer
  1865 000006C4 C706[6D00]0000              mov word [tickcount], 0
  1866 000006CA E84BFE                      call bird_falling
  1867 000006CD C606[7500]00                mov byte [timer_hooked], 0
  1868 000006D2 E80900                      call unhook_timer
  1869                                  end_timer:
  1870 000006D5 B020                        mov al, 0x20
  1871 000006D7 E620                        out 0x20, al
  1872 000006D9 5A                          pop dx
  1873 000006DA 59                          pop cx
  1874 000006DB 5B                          pop bx
  1875 000006DC 58                          pop ax
  1876 000006DD CF                          iret
  1877                                  
  1878                                  unhook_timer:
  1879 000006DE 0E                      push cs 
  1880 000006DF 1F                      pop ds
  1881 000006E0 FA                          cli
  1882 000006E1 1E                          push ds
  1883 000006E2 31C0                        xor ax, ax
  1884 000006E4 8EC0                        mov es, ax
  1885 000006E6 A1[6F00]                    mov ax, word [old_timer]
  1886 000006E9 26A32000                    mov word [es:8*4], ax
  1887 000006ED A1[7100]                    mov ax, word [old_timer+2]
  1888 000006F0 26A32200                    mov word [es:8*4+2], ax
  1889 000006F4 1F                          pop ds
  1890 000006F5 FB                          sti
  1891 000006F6 C3                          ret
  1892                                  
  1893                                  ground_mover:
  1894 000006F7 0E                      push cs 
  1895 000006F8 1F                      pop ds
  1896 000006F9 60                       pusha
  1897 000006FA 1E                       push ds
  1898 000006FB 06                       push es
  1899 000006FC B800A0                   mov ax,0xA000
  1900 000006FF 8ED8                     mov ds,ax
  1901 00000701 BF00E1                   mov di,57600
  1902 00000704 BE02E1                   mov si,57602
  1903 00000707 B97E0C                   mov cx,3198
  1904 0000070A F3A4                     rep movsb
  1905 0000070C 07                       pop es
  1906 0000070D 1F                       pop ds
  1907 0000070E 61                       popa
  1908 0000070F C3                       ret
  1909                                  
  1910                                  PrintStartScreen:
  1911 00000710 E89CFB                   call upper_part  
  1912 00000713 E8A7FB                   call medium_part
  1913 00000716 E8B3FB                   call lower_part
  1914 00000719 E825FC                   call bird_body
  1915 0000071C E8B9FD                   call ground
  1916 0000071F C3                       ret
  1917                                  
  1918                                  anime:
  1919 00000720 E8B8FB                  	call sscore
  1920                                  
  1921                                  main_loop:
  1922 00000723 E8DAFD                  	call delay
  1923 00000726 E8D7FD                  	call delay
  1924 00000729 E80AFF                      call HandleKeyPress 
  1925 0000072C E8E4FA                  	call collision
  1926 0000072F 833E[5600]01            	cmp word[collision_detected],1
  1927 00000734 0F84BAFE                	je Collider
  1928 00000738 C706[5600]0000          	mov word[collision_detected],0
  1929                                  continue_loop:
  1930 0000073E B800A0                  mov ax,0xA000
  1931 00000741 8ED8                    mov ds,ax
  1932 00000743 68[4800]                    push pipesY ; y-coordinate address of pipe
  1933 00000746 68[4400]                    push pipesX ; x-coordinate address of pipe    
  1934 00000749 E8C9FC                      call movePipe
  1935                                  
  1936 0000074C 68[4A00]                    push pipesY+2 ; y-coordinate address of pipe
  1937 0000074F 68[4600]                    push pipesX+2 ; x-coordinate address of pipe
  1938 00000752 E8C0FC                      call movePipe
  1939 00000755 6A01                        push 1
  1940 00000757 FF36[4800]                  push word [pipesY] ; x-coordinate of pipe
  1941 0000075B FF36[4400]                  push word [pipesX] ; y-coordinate of pipe
  1942 0000075F E833FC                      call defDrawPipe
  1943 00000762 6A01                        push 1
  1944 00000764 FF36[4A00]                  push word [pipesY+2] ; x-coordinate of pipe
  1945 00000768 FF36[4600]                  push word [pipesX+2] ; y-coordinate of pipe
  1946 0000076C E826FC                      call defDrawPipe
  1947 0000076F 6A00                        push 0
  1948 00000771 FF36[4E00]                  push word [leftOverPipeY]
  1949 00000775 6A00                        push 0
  1950 00000777 E81BFC                      call defDrawPipe
  1951 0000077A E87AFF                  	call ground_mover
  1952                                  		;call music
  1953 0000077D EBA4                    jmp main_loop ; Repeat the main loop
  1954 0000077F C3                      	ret
  1955                                  sound:
  1956 00000780 60                          pusha                       ; Save all general-purpose registers
  1957 00000781 1E                          push ds                     ; Save DS
  1958 00000782 06                          push es                     ; Save ES
  1959 00000783 16                          push ss                     ; Save SS
  1960 00000784 B800A0                      mov ax, 0xA000              ; Video memory segment
  1961 00000787 8EC0                        mov es, ax                  ; Use ES for potential screen updates (if needed)
  1962                                  
  1963                                  infinite_sound_loop:
  1964 00000789 B0B6                        mov al, 182                 ; Command to set frequency mode
  1965 0000078B E643                        out 43h, al
  1966 0000078D BBDC34                      mov bx, 1193180             ; Base frequency of 1.19318 MHz
  1966          ******************       warning: word data exceeds bounds [-w+number-overflow]
  1967 00000790 F7F3                        div bx                      ; Calculate divisor for desired frequency
  1968 00000792 E642                        out 42h, al                 ; Low byte of divisor to timer
  1969 00000794 88E0                        mov al, ah
  1970 00000796 E642                        out 42h, al                 ; High byte of divisor to timer
  1971                                  
  1972                                      ; Enable the speaker
  1973 00000798 E461                        in al, 61h                  ; Read speaker control register
  1974 0000079A 0C03                        or al, 00000011b            ; Enable speaker
  1975 0000079C E661                        out 61h, al
  1976                                  
  1977                                      ; Optional delay or loop (minimal)
  1978 0000079E 90                          nop                         ; Use NOP or a small delay instead of an infinite loop
  1979 0000079F 90                          nop
  1980                                  
  1981                                      ; Disable the speaker
  1982 000007A0 E461                        in al, 61h
  1983 000007A2 24FC                        and al, 11111100b           ; Disable speaker
  1984 000007A4 E661                        out 61h, al
  1985 000007A6 EBE1                        jmp infinite_sound_loop
  1986                                  
  1987                                  sound_exit:
  1988 000007A8 17                          pop ss                      ; Restore SS
  1989 000007A9 07                          pop es                      ; Restore ES
  1990 000007AA 1F                          pop ds                      ; Restore DS
  1991 000007AB 61                          popa                        ; Restore all general-purpose registers
  1992 000007AC C3                          ret                         ; Return to caller
  1993                                  prrint:
  1994 000007AD FF06[6B00]              inc word [score]
  1995 000007B1 E8CCFF                  call sound
  1996 000007B4 EBF7                    jmp prrint
  1997                                  start:
  1998                                  
  1999 000007B6 E806FA                   call DisplayIntroduction 
  2000 000007B9 B400                     mov ah,0
  2001 000007BB CD16                     int 16h
  2002 000007BD 80FC01                   cmp ah,0x01
  2003 000007C0 0F84C2FA                 je exit_game
  2004 000007C4 E849FF                   call PrintStartScreen 
  2005 000007C7 31C0                         xor ax, ax
  2006 000007C9 8EC0                         mov es, ax
  2007 000007CB FA                           cli
  2008 000007CC 26C7062000[0608]             mov word [es:8*4], timer
  2009 000007D3 268C0E2200                   mov [es:8*4+2], cs
  2010 000007D8 FB                           sti
  2011                                  
  2012                                  ll1:
  2013 000007D9 C706[AA01][8007]             mov word [pcb+10+4], sound         ; Game logic thread
  2014 000007DF 8C0E[AC01]                   mov [pcb+10+6], cs
  2015 000007E3 C706[AE01]0002               mov word [pcb+10+8], 0x0200    
  2016 000007E9 C706[B401][2007]             mov word [pcb+20+4], anime  ; Music thread
  2017 000007EF 8C0E[B601]                   mov [pcb+20+6], cs
  2018 000007F3 C706[B801]0002               mov word [pcb+20+8], 0x0200         ; Flags
  2019 000007F9 C706[B001]0000               mov word [current], 0               ; Start with the first task
  2020 000007FF EBD8                    	 jmp ll1
  2021                                  ;	jmp $
  2022                                  
  2023                                    ; call anime
  2024 00000801 B8004C                   mov ax, 0x4C00
  2025 00000804 CD21                    int 0x21
  2026                                  timer:
  2027 00000806 0E                      	push cs 
  2028 00000807 1F                      pop ds
  2029 00000808 50                        push ax
  2030 00000809 53                       push bx
  2031 0000080A 2E8A1E[B001]             mov bl, [cs:current] ; read index of current task ... bl
  2032 0000080F B80A00                   mov ax, 10 ; space used by
  2033 00000812 F6E3                     mul bl ; multiply to get
  2034 00000814 89C3                     mov bx, ax ; load start of
  2035 00000816 58                       pop ax ; read origina
  2036                                  
  2037 00000817 2E8987[9E01]             mov [cs:pcb+bx+2], ax ; space for current task's BX
  2038 0000081C 58                       pop ax ; read original
  2039 0000081D 2E8987[9C01]             mov [cs:pcb+bx+0], ax ; space for current task's AX
  2040 00000822 58                       pop ax ; read original
  2041 00000823 2E8987[A001]             mov [cs:pcb+bx+4], ax ; space for current task
  2042 00000828 58                       pop ax ; read original
  2043 00000829 2E8987[A201]             mov [cs:pcb+bx+6], ax ; space for current task
  2044 0000082E 58                       pop ax ; read original
  2045 0000082F 2E8987[A401]             mov [cs:pcb+bx+8], ax ; space for current task
  2046 00000834 2EFE06[B001]             inc byte [cs:current] ; update current task index...1
  2047 00000839 2E803E[B001]03           cmp byte [cs:current], 3; is task index out of range
  2048 0000083F 7506                     jne skipreset ; no, proceed
  2049 00000841 2EC606[B001]00           mov byte [cs:current], 0 ; yes, reset to task 0
  2050                                   skipreset: 
  2051 00000847 2E8A1E[B001]             mov bl, [cs:current] ; read index of current task
  2052 0000084C B80A00                   mov ax, 10 ; space used by
  2053 0000084F F6E3                     mul bl ; multiply to get
  2054 00000851 89C3                     mov bx, ax ; load start of
  2055 00000853 B020                     mov al, 0x20
  2056 00000855 E620                     out 0x20, al ; send EOI to PIC
  2057 00000857 2EFFB7[A401]             push word [cs:pcb+bx+8] ; flags of new task...
  2058 0000085C 2EFFB7[A201]             push word [cs:pcb+bx+6] ; cs of new task ...
  2059 00000861 2EFFB7[A001]             push word [cs:pcb+bx+4] ; ip of new task...
  2060 00000866 2E8B87[9C01]             mov ax, [cs:pcb+bx+0] ; ax of new task...pcb+10+0
  2061 0000086B 2E8B9F[9E01]             mov bx, [cs:pcb+bx+2] ; bx of new task...pcb+10+2
  2062 00000870 CF                       iret ; return to new
