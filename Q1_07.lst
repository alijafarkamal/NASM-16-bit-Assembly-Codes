     1                                  [org 0x0100]
     2 00000000 E9D700                  jmp start
     3                                  
     4                                  ; Clear screen routine
     5                                  clrscr:
     6 00000003 06                          push es
     7 00000004 50                          push ax
     8 00000005 57                          push di
     9                                  
    10 00000006 B800B8                      mov ax, 0xb800
    11 00000009 8EC0                        mov es, ax             ; Video memory segment
    12 0000000B BF0000                      mov di, 0              ; Start at the top left corner
    13                                  
    14                                  nextloc:
    15 0000000E 26C7052007                  mov word [es:di], 0x0720  ; Clear with space character, grey on black background
    16 00000013 83C702                      add di, 2               ; Move to next character position
    17 00000016 81FFA00F                    cmp di, 4000            ; Check if we've reached the end of screen buffer (80x25)
    18 0000001A 75F2                        jne nextloc             ; Continue clearing if not done
    19                                  
    20 0000001C 5F                          pop di
    21 0000001D 58                          pop ax
    22 0000001E 07                          pop es
    23 0000001F C3                          ret
    24                                  drawedges:
    25 00000020 55                      	push bp
    26 00000021 89E5                        mov bp, sp
    27 00000023 57                          push di
    28 00000024 50                          push ax
    29 00000025 06                          push es
    30                                  	
    31 00000026 B800B8                  	mov ax,0xB800
    32 00000029 8EC0                    	mov es,ax
    33                                  	
    34 0000002B 8B7E04                  	mov di,[bp+4]
    35 0000002E B82B00                  	mov ax, '+'            ; Character '+'.
    36 00000031 B40F                        mov ah, 0x0F           ; Attribute byte (bright white on bright red).
    37 00000033 268905                      mov [es:di], ax        ; Write character and attribute to video memory.
    38                                  	
    39 00000036 8B7E06                  	mov di,[bp+6]
    40 00000039 B82B00                  	mov ax, '+'            ; Character '+'.
    41 0000003C B40F                        mov ah, 0x0F           ; Attribute byte (bright white on bright red).
    42 0000003E 268905                      mov [es:di], ax        ; Write character and attribute to video memory.
    43                                  	
    44 00000041 8B7E08                  	mov di,[bp+8]
    45 00000044 B82B00                  	mov ax, '+'            ; Character '+'.
    46 00000047 B40F                        mov ah, 0x0F           ; Attribute byte (bright white on bright red).
    47 00000049 268905                      mov [es:di], ax        ; Write character and attribute to video memory.
    48                                  	;push '/'
    49 0000004C 81C79C00                	add di,156
    50 00000050 B90400                  	mov cx,4
    51                                  loop1:
    52 00000053 B82F00                  	mov ax,'/'
    53 00000056 B418                    	mov ah,0x18
    54 00000058 268905                  	mov [es:di], ax
    55 0000005B 81C79C00                	add di,156
    56 0000005F E2F2                    	loop loop1
    57                                  	
    58                                  	;add di,158
    59 00000061 83C702                  	add di,2
    60 00000064 B91300                  	mov cx,19
    61                                  loop2:	
    62 00000067 B82D00                  	mov ax,'-'
    63 0000006A B428                    	mov ah,0x28
    64 0000006C 268905                  	mov [es:di],ax
    65 0000006F 83C702                  	add di,2
    66 00000072 E2F3                    	loop loop2
    67                                  	
    68 00000074 8B7E08                  	mov di,[bp+8]
    69 00000077 81C7A400                	add di,164
    70 0000007B B90400                  	mov cx,4
    71                                  loop3:
    72 0000007E B85C00                  	mov ax,'\'
    73 00000081 B448                    	mov ah,0x48
    74 00000083 268905                  	mov [es:di],ax
    75 00000086 81C7A400                	add di,164
    76 0000008A E2F2                    	loop loop3
    77                                  	
    78 0000008C 07                      	pop es
    79 0000008D 58                          pop ax
    80 0000008E 5F                          pop di
    81 0000008F 5D                          pop bp
    82 00000090 C3                          ret
    83                                  	
    84                                  	
    85                                  calcvert:
    86 00000091 55                          push bp
    87 00000092 89E5                        mov bp, sp
    88 00000094 57                          push di
    89 00000095 50                          push ax
    90 00000096 06                          push es
    91                                  
    92 00000097 B800B8                      mov ax, 0xB800
    93 0000009A 8EC0                        mov es, ax             ; Set video memory segment.
    94                                  
    95 0000009C 8B460C                      mov ax, [bp+12]         ; Get the row (Top).
    96 0000009F BBA000                      mov bx, 160            ; Each row is 160 bytes wide.
    97 000000A2 F7E3                        mul bx                 ; AX = AX * BX.
    98 000000A4 89C7                        mov di, ax             ; DI now holds the row's offset in bytes.
    99                                  
   100 000000A6 8B5E0E                      mov bx, [bp+14]         ; Get the column (Left).
   101 000000A9 D1E3                        shl bx, 1              ; Each column is 2 bytes wide.
   102 000000AB 01DF                        add di, bx             ; Add column offset to DI.
   103                                  	;sub sp,2
   104 000000AD 57                      	push di
   105                                  	
   106 000000AE 8B460A                  	mov ax, [bp+10]         ; Get the row (Top).
   107 000000B1 BBA000                      mov bx, 160            ; Each row is 160 bytes wide.
   108 000000B4 F7E3                        mul bx                 ; AX = AX * BX.
   109 000000B6 89C7                        mov di, ax             ; DI now holds the row's offset in bytes.
   110                                  
   111 000000B8 8B5E08                      mov bx, [bp+8]         ; Get the column (Left).
   112 000000BB D1E3                        shl bx, 1              ; Each column is 2 bytes wide.
   113 000000BD 01DF                        add di, bx             ; Add column offset to DI.
   114                                  	;sub sp,2
   115 000000BF 57                      	push di
   116                                  	
   117 000000C0 8B4606                  	mov ax, [bp+6]         ; Get the row (Top).
   118 000000C3 BBA000                      mov bx, 160            ; Each row is 160 bytes wide.
   119 000000C6 F7E3                        mul bx                 ; AX = AX * BX.
   120 000000C8 89C7                        mov di, ax             ; DI now holds the row's offset in bytes.
   121                                  
   122 000000CA 8B5E04                      mov bx, [bp+4]         ; Get the column (Left).
   123 000000CD D1E3                        shl bx, 1              ; Each column is 2 bytes wide.
   124 000000CF 01DF                        add di, bx             ; Add column offset to DI.
   125                                  	;sub sp,2
   126 000000D1 57                      	push di
   127 000000D2 E84BFF                  	call drawedges
   128                                  
   129 000000D5 07                          pop es
   130 000000D6 58                          pop ax
   131 000000D7 5F                          pop di
   132 000000D8 5D                          pop bp
   133 000000D9 C3                          ret
   134                                  
   135                                  start:
   136 000000DA E826FF                      call clrscr
   137                                  	
   138 000000DD 6A0F                        push 15                ; Right
   139 000000DF 6A05                        push 5                 ; Left
   140 000000E1 6A0A                        push 10                ; Top
   141 000000E3 6A05                    	push 5
   142 000000E5 6A0A                    	push 10
   143 000000E7 6A19                    	push 25
   144 000000E9 E8A5FF                      call calcvert
   145                                  
   146 000000EC B8004C                      mov ax, 0x4C00
   147 000000EF CD21                        int 0x21               ; Exit program
