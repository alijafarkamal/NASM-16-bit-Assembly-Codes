     1                                  [org 0x0100]
     2 00000000 E9A600                  jmp start
     3 00000003 0000                    zero_count: dw 0
     4 00000005 0000                    one_count: dw 0
     5                                  clrscr:
     6 00000007 06                          push es
     7 00000008 50                          push ax
     8 00000009 57                          push di
     9                                  
    10 0000000A B800B8                      mov ax, 0xb800
    11 0000000D 8EC0                        mov es, ax             ; Video memory segment
    12 0000000F BF0000                      mov di, 0              ; Start at the top left corner
    13                                  
    14                                  nextloc:
    15 00000012 26C7052007                  mov word [es:di], 0x0720  ; Clear with space character, grey on black background
    16 00000017 83C702                      add di, 2               ; Move to next character position
    17 0000001A 81FFA00F                    cmp di, 4000            ; Check if we've reached the end of screen buffer (80x25)
    18 0000001E 75F2                        jne nextloc             ; Continue clearing if not done
    19                                  
    20 00000020 5F                          pop di
    21 00000021 58                          pop ax
    22 00000022 07                          pop es
    23 00000023 C3                          ret
    24                                  	
    25                                  count_bits:
    26 00000024 55                      	push bp              
    27 00000025 89E5                        mov bp, sp
    28 00000027 B91000                      mov cx, 16     
    29 0000002A 8B4604                      mov ax, [bp+4]      
    30 0000002D 31F6                    	xor si,si
    31 0000002F 31FF                    	xor di,di
    32                                  loop1:
    33 00000031 A90100                  	test ax,1
    34 00000034 7405                    	jz increment
    35 00000036 83C601                  	add si,1
    36 00000039 EB03                    	jmp bit_by_bit
    37                                  increment:
    38 0000003B 83C701                  	add di,1
    39                                  bit_by_bit:
    40 0000003E D1E8                    	shr ax,1
    41 00000040 E2EF                    	loop loop1
    42                                  	
    43                                  	
    44 00000042 8B4606                  	mov ax,[bp+6]
    45 00000045 B91000                  	mov cx,16
    46                                  loop2:
    47 00000048 A90100                  	test ax,1
    48 0000004B 7405                    	jz increment1
    49 0000004D 83C601                  	add si,1
    50 00000050 EB03                    	jmp bit_by
    51                                  increment1:
    52 00000052 83C701                  	add di,1
    53                                  bit_by:
    54 00000055 D1E8                    	shr ax,1
    55 00000057 E2EF                    	loop loop2
    56 00000059 8936[0300]              	mov [zero_count],si
    57 0000005D 893E[0500]              	mov [one_count],di
    58                                  	
    59 00000061 5D                      	pop bp
    60 00000062 C3                      	ret
    61                                  draw_rectangle:
    62 00000063 55                      	push bp              
    63 00000064 89E5                        mov bp, sp
    64 00000066 56                      	push si;0
    65 00000067 57                      	push di;1
    66                                  
    67 00000068 89FA                    	mov dx,di
    68 0000006A BBA000                  	mov bx,160
    69 0000006D F7E3                    	mul bx
    70 0000006F D1E2                    	shl dx,1
    71                                  		
    72 00000071 89F1                    	mov cx,si
    73 00000073 D1E1                    	shl cx,1
    74 00000075 51                      	push cx
    75 00000076 B800B8                  	mov ax,0xB800
    76 00000079 8EC0                    	mov es,ax
    77 0000007B BF0000                  	mov di,0
    78                                  	
    79 0000007E 8B5EFC                  	mov bx,[bp-4]
    80                                  label1:
    81 00000081 B800B8                  	mov ax,0xB800
    82 00000084 8EC0                    	mov es,ax
    83 00000086 89F1                    	mov cx,si
    84                                  row:
    85 00000088 B82300                  	mov ax,'#'
    86 0000008B B40F                    	mov ah,0x0F
    87 0000008D 268905                  	mov [es:di],ax
    88 00000090 83C702                  	add di,2
    89 00000093 E2F3                    	loop row
    90                                  col:
    91 00000095 4B                      	dec bx
    92 00000096 81C7A000                	add di,160
    93 0000009A 2B7EFA                  	sub di,[bp-6]
    94 0000009D 83FB00                  	cmp bx,0
    95 000000A0 75DF                    	jne label1
    96                                  	
    97 000000A2 59                      	pop cx
    98 000000A3 5F                      	pop di
    99 000000A4 5E                      	pop si
   100 000000A5 5D                      	pop bp
   101 000000A6 C20400                  	ret 4
   102                                  start:
   103 000000A9 E85BFF                      call clrscr
   104                                  	
   105 000000AC 68215C                      push 23585       
   106 000000AF 68E012                  	push 4832
   107 000000B2 E86FFF                      call count_bits      
   108 000000B5 E8ABFF                      call draw_rectangle  
   109                                  	
   110 000000B8 B8004C                      mov ax, 0x4C00
   111 000000BB CD21                        int 0x21               ; Exit program
