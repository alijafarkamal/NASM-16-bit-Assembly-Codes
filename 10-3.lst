     1                                  ; Example 11.1 - elementary multitasking of two threads
     2                                  
     3                                  [org 0x0100]
     4 00000000 E9A800                  jmp start
     5                                  ;process control block
     6                                  		; ax,bx,ip,cs,flags storage area
     7 00000003 000000000000000000-     pcb:	dw 0, 0, 0, 0, 0 ; task0 regs[cs:pcb + 0]
     7 0000000C 00                 
     8 0000000D 000000000000000000-     		dw 0, 0, 0, 0, 0 ; task1 regs start at [cs:pcb + 10]
     8 00000016 00                 
     9 00000017 000000000000000000-     		dw 0, 0, 0, 0, 0 ; task2 regs start at [cs:pcb + 20]
     9 00000020 00                 
    10                                  
    11 00000021 00                      current:	db 0 ; index of current task
    12 00000022 5C7C2F2D                chars:		db '\|/-' ; shapes to form a bar
    13                                  
    14                                  ;---------------------------------------------------------------------------
    15                                  ; one task to be multitasked
    16                                  ;---------------------------------------------------------------------------
    17 00000026 8A87[2200]              taskone:	mov al, [chars+bx]			; read the next shape
    18 0000002A 26A20000                			mov [es:0], al				; write at top left of screen 
    19 0000002E 43                      			inc bx						; increment to next shape
    20 0000002F 83E303                  			and bx, 3					; taking modulus by 4
    21 00000032 EBF2                    			jmp taskone					; infinite task
    22                                  
    23                                  ;---------------------------------------------------------------------------
    24                                  ; second task to be multitasked
    25                                  ;---------------------------------------------------------------------------
    26 00000034 8A87[2200]              tasktwo:	mov al, [chars+bx]			; read the next shape...0
    27 00000038 26A29E00                			mov [es:158], al			; write at top right of screen
    28 0000003C 43                      			inc bx						; increment to next shape
    29 0000003D 83E303                  			and bx, 3					; taking modulus by 4
    30 00000040 EBF2                    			jmp tasktwo					; infinite task
    31                                  
    32                                  ;---------------------------------------------------------------------------
    33                                  ; timer interrupt service routine
    34                                  ;---------------------------------------------------------------------------
    35 00000042 50                      timer:		push ax
    36 00000043 53                      			push bx
    37                                  
    38 00000044 2E8A1E[2100]            			mov bl, [cs:current]				; read index of current task ... bl = 0
    39 00000049 B80A00                  			mov ax, 10							; space used by one task
    40 0000004C F6E3                    			mul bl								; multiply to get start of task.. 10x0 = 0
    41 0000004E 89C3                    			mov bx, ax							; load start of task in bx....... bx = 0
    42                                  
    43 00000050 58                      			pop ax								; read original value of bx
    44 00000051 2E8987[0500]            			mov [cs:pcb+bx+2], ax				; space for current task's BX
    45                                  
    46 00000056 58                      			pop ax								; read original value of ax
    47 00000057 2E8987[0300]            			mov [cs:pcb+bx+0], ax				; space for current task's AX
    48                                  
    49 0000005C 58                      			pop ax								; read original value of ip
    50 0000005D 2E8987[0700]            			mov [cs:pcb+bx+4], ax				; space for current task
    51                                  
    52 00000062 58                      			pop ax								; read original value of cs
    53 00000063 2E8987[0900]            			mov [cs:pcb+bx+6], ax				; space for current task
    54                                  
    55 00000068 58                      			pop ax								; read original value of flags
    56 00000069 2E8987[0B00]            			mov [cs:pcb+bx+8], ax					; space for current task
    57                                  
    58 0000006E 2EFE06[2100]            			inc byte [cs:current]				; update current task index...1
    59 00000073 2E803E[2100]03          			cmp byte [cs:current], 3			; is task index out of range
    60 00000079 7506                    			jne skipreset						; no, proceed
    61 0000007B 2EC606[2100]00          			mov byte [cs:current], 0			; yes, reset to task 0
    62                                  
    63 00000081 2E8A1E[2100]            skipreset:	mov bl, [cs:current]				; read index of current task
    64 00000086 B80A00                  			mov ax, 10							; space used by one task
    65 00000089 F6E3                    			mul bl								; multiply to get start of task
    66 0000008B 89C3                    			mov bx, ax							; load start of task in bx... 10
    67                                  			
    68 0000008D B020                    			mov al, 0x20
    69 0000008F E620                    			out 0x20, al						; send EOI to PIC
    70                                  
    71 00000091 2EFFB7[0B00]            			push word [cs:pcb+bx+8]				; flags of new task... pcb+10+8
    72 00000096 2EFFB7[0900]            			push word [cs:pcb+bx+6]				; cs of new task ... pcb+10+6
    73 0000009B 2EFFB7[0700]            			push word [cs:pcb+bx+4]				; ip of new task... pcb+10+4
    74 000000A0 2E8B87[0300]            			mov ax, [cs:pcb+bx+0]				; ax of new task...pcb+10+0
    75 000000A5 2E8B9F[0500]            			mov bx, [cs:pcb+bx+2]				; bx of new task...pcb+10+2
    76                                  
    77 000000AA CF                      			iret								; return to new task
    78                                  
    79                                  ;---------------------------------------------------------------------------
    80                                  start:		
    81 000000AB B84C04                  mov ax, 1100
    82 000000AE E640                    out 0x40, al
    83 000000B0 88E0                    mov al, ah
    84 000000B2 E640                    out 0x40, al
    85                                  
    86                                  
    87 000000B4 C706[1100][2600]        mov word [pcb+10+4], taskone			; initialize ip
    88 000000BA 8C0E[1300]              			mov [pcb+10+6], cs						; initialize cs
    89 000000BE C706[1500]0002          			mov word [pcb+10+8], 0x0200				; initialize flags
    90                                  
    91 000000C4 C706[1B00][3400]        			mov word [pcb+20+4], tasktwo			; initialize ip
    92 000000CA 8C0E[1D00]              			mov [pcb+20+6], cs						; initialize cs
    93 000000CE C706[1F00]0002          			mov word [pcb+20+8], 0x0200				; initialize flags
    94                                  
    95 000000D4 C706[2100]0000          			mov word [current], 0						; set current task index
    96 000000DA 31C0                    			xor ax, ax
    97 000000DC 8EC0                    			mov es, ax									; point es to IVT base
    98                                  			
    99 000000DE FA                      			cli
   100 000000DF 26C7062000[4200]        			mov word [es:8*4], timer
   101 000000E6 268C0E2200              			mov [es:8*4+2], cs							; hook timer interrupt
   102 000000EB B800B8                  			mov ax, 0xb800
   103 000000EE 8EC0                    			mov es, ax									; point es to video base
   104 000000F0 31DB                    			xor bx, bx									; initialize bx for tasks, bx=0
   105 000000F2 FB                      			sti
   106                                  
   107 000000F3 EBFE                    			jmp $										; infinite loop ... Task 0
