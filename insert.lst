     1                                  ;insertion sort
     2                                  [org 0x0100]
     3 00000000 EB16                     		jmp start
     4 00000002 050003000800060002-     arr: dw 5, 3, 8, 6, 2, 7, 4, 10, 1, 9 ; Array to be sorted
     4 0000000B 00070004000A000100-
     4 00000014 0900               
     5 00000016 0A00                    size: dw 10 ; Size of the array
     6                                  
     7                                  start:
     8 00000018 BB0000                  	mov bx,0			;counter
     9 0000001B BD0200                  	mov bp,2			;pointer to first number[1]
    10 0000001E A1[1600]                	mov ax,[size]
    11 00000021 0306[1600]              	add ax,[size]
    12 00000025 83E802                  	sub ax,2			;size getter
    13 00000028 89EE                    	mov si,bp
    14                                  sort:
    15 0000002A 8B96[0200]              	mov dx,[arr+bp]		;takes number in dx to be compared
    16 0000002E 3997[0200]              	cmp [arr+bx],dx		;compares number
    17 00000032 7707                    	ja swap
    18 00000034 83FB00                  	cmp bx,0			;condition for insertion sort
    19 00000037 750E                    	jnz condition
    20 00000039 EB19                    	jmp check			;if not swap is necessary, just go on net value
    21                                  swap:
    22 0000003B 8B8F[0200]              	mov cx,[arr+bx]		;makes temp
    23 0000003F 8997[0200]              	mov [arr+bx],dx		;swap
    24 00000043 898E[0200]              	mov [arr+bp],cx		;finally swaps
    25                                  condition:
    26 00000047 83FB00                  	cmp bx,0			;if it is at 0th index
    27 0000004A 7408                    	jz check
    28 0000004C 83EB02                  	sub bx,2			;backward iteration
    29 0000004F 83ED02                  	sub bp,2
    30 00000052 EBD6                    	jmp sort
    31                                  check:
    32 00000054 89F5                    	mov bp,si
    33 00000056 39C5                    	cmp bp,ax			
    34 00000058 740C                    	jz out				;comes out of loop
    35 0000005A 83C502                  	add bp,2
    36 0000005D 89EB                    	mov bx,bp			;moves to next index less than iterator index
    37 0000005F 89EE                    	mov si,bp
    38 00000061 83EB02                  	sub bx,2			;finally it does
    39 00000064 EBC4                    	jmp sort
    40                                  out:
    41                                  
    42 00000066 B8004C                  	mov ax, 0x4c00		;terminate the program
    43 00000069 CD21                    INT		0x21
